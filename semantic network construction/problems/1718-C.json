{"uid": "1718-C", "url": "https://codeforces.com/contest/1718/problem/C", "tags": ["data structures", " greedy", " math", " number theory"], "title": "1718-C", "statement": "C. Tonya and Burenka-179time limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputTonya was given an array of $$$a$$$ of length $$$n$$$ written on a postcard for his birthday. For some reason, the postcard turned out to be acyclic array, so the index of the element located strictly to the right of the $$$n$$$-th is $$$1$$$. Tonya wanted to study it better, so he bought a robot \"Burenka-179\".A program for Burenka is a pair of numbers $$$(s, k)$$$, where $$$1 \\\\leq s \\\\leq n$$$, $$$1 \\\\leq k \\\\leq n-1$$$. Note that $$$k$$$cannotbe equal to $$$n$$$. Initially, Tonya puts the robot in the position of the array $$$s$$$. After that, Burenka makesexactly$$$n$$$ steps through the array. If at the beginning of a step Burenka stands in the position $$$i$$$, then the following happens:The number $$$a_{i}$$$ is added to theusefulnessof the program.\"Burenka\" moves $$$k$$$ positions to the right ($$$i := i + k$$$ is executed, if $$$i$$$ becomes greater than $$$n$$$, then $$$i := i - n$$$).Help Tonya find the maximum possibleusefulnessof a program for \"Burenka\" if the initial usefulness of any program is $$$0$$$.Also, Tony's friend Ilyusha asks him to change the array $$$q$$$ times. Each time he wants to assign $$$a_p := x$$$ for a given index $$$p$$$ and a value $$$x$$$. You need to find the maximum possibleusefulnessof the program after each of these changes.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) is the number of test cases. The description of the test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$q$$$ ($$$2 \\\\le n \\\\le 2 \\\\cdot 10^5$$$, $$$0 \\\\le q \\\\le 2 \\\\cdot 10^5$$$).The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\\\ldots, a_n$$$ ($$$1 \\\\le a_i \\\\le 10^9$$$) — elements of the array.The following $$$q$$$ lines contain changes, each of them contains two integers $$$p$$$ and $$$x$$$ ($$$1 \\\\leq p \\\\leq n$$$, $$$1 \\\\leq x \\\\leq 10^9$$$), meaning you should assign $$$a_p := x$$$.It is guaranteed that the sum of $$$n$$$ and the sum of $$$q$$$ over all test cases do not exceed $$$2 \\\\cdot 10^5$$$.OutputFor each test case, output $$$q+1$$$ numbers — the maximum usefulness of a program initially and after each of the changes.ExampleInput42 11 21 34 44 1 3 22 64 61 13 119 31 7 9 4 5 2 3 6 83 12 19 16 31 1 1 1 1 11 54 43 8Output3 5 14 16 24 24 24 57 54 36 36 6 18 27 28NoteIn the first test case, initially and after each request, the answer is achieved at $$$s = 1$$$, $$$k = 1$$$ or $$$s = 2$$$, $$$k = 1$$$.In the second test case, initially, the answer is achieved when $$$s = 1$$$, $$$k = 2$$$ or $$$s = 3$$$, $$$k = 2$$$. After the first request, the answer is achieved at $$$s = 2$$$, $$$k = 2$$$ or $$$s = 4$$$, $$$k = 2$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "e6846809", "template_md5": "35d339e4", "result": "You are given an array of $n$ integers.  The array is circular, meaning the index of the element to the right of the last element is 1.\n\nYou have a robot that starts at a position $s$ in the array. The robot then takes $n$ steps, each step moving $k$ positions to the right. If the robot goes past the end of the array, it wraps around to the beginning.\n\nFor each step, the robot's \"usefulness\" increases by the value of the element it is standing on.\n\nYour task is to find the maximum possible usefulness the robot can achieve, given different starting positions $s$ and $k$.\n\nYou will also be given $q$ updates to the array. Each update changes the value of a specific element in the array. After each update, you need to find the maximum possible usefulness again. \n\n\n\nLet me know if you'd like help with the algorithm to solve this problem!"}, {"prompt_md5": "79175854", "template_md5": "465699a0", "result": "You are given an array of numbers.  You can start a robot at any position in the array. The robot moves a fixed number of positions to the right each step, wrapping around to the beginning if it reaches the end.  The robot's score is the sum of the numbers it encounters. Find the maximum possible score the robot can achieve, and update the maximum score after each change to a number in the array."}]}