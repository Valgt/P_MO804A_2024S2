{"uid": "1615-F", "url": "https://codeforces.com/contest/1615/problem/F", "tags": ["combinatorics", " dp", " math"], "title": "1615-F", "statement": "F. LEGOndary Grandmastertime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputAfter getting bored by playing with crayons, you decided to switch to Legos! Today, you're working with a long strip, with height $$$1$$$ and length $$$n$$$, some positions of which are occupied by $$$1$$$ by $$$1$$$ Lego pieces.In one second, you can either remove twoadjacentLego pieces from the strip (if both are present), or add two Lego pieces toadjacentpositions (if both are absent). You can only add or remove Lego's at two adjacent positions at the same time, as otherwise your chubby fingers run into precision issues.You want to know exactly how much time you'll spend playing with Legos. You value efficiency, so given some starting state and some ending state, you'll always spend the least number of seconds to transform the starting state into the ending state. If it's impossible to transform the starting state into the ending state, you just skip it (so you spend $$$0$$$ seconds).The issue is that, for some positions, you don't remember whether there were Legos there or not (in either the starting state, the ending state, or both). Over all pairs of (starting state, ending state) that are consistent with your memory, find the total amount of time it will take to transform the starting state to the ending state. Print this value modulo $$$1\\\\,000\\\\,000\\\\,007$$$ ($$$10^9 + 7$$$).InputThe first line contains one integer $$$t$$$ ($$$1 \\\\leq t \\\\leq 1000$$$) — the number of test cases. Then $$$t$$$ cases follow.The first line of each test case contains one integer $$$n$$$ ($$$2 \\\\leq n \\\\leq 2000$$$) — the size of the Lego strip.The second line of each test case contains a string $$$s$$$ of length $$$n$$$, consisting of the characters0,1, and?— your memory of the starting state:1represents a position that definitely has a Lego piece,0represents a position that definitely does not have a Lego piece,and?represents a position that you don't remember.The third line of each test case contains a string $$$t$$$ of length $$$n$$$, consisting of the characters0,1, and?— your memory of the ending state. It follows a similar format to the starting state.It's guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2000$$$.OutputFor each test case, output a single integer — the answer to the problem modulo $$$1\\\\,000\\\\,000\\\\,007$$$ ($$$10^9 + 7$$$).ExampleInput6 2 00 11 3 ??? ??? 3 ??1 0?0 4 ??0? ??11 5 ????? 0??1? 10 ?01??01?1? ??100?1???Output1 16 1 14 101 1674NoteFor the first test case, $$$00$$$ is the only possible starting state, and $$$11$$$ is the only possible ending state. It takes exactly one operation to change $$$00$$$ to $$$11$$$.For the second test case, some of the possible starting and ending state pairs are:$$$(000, 011)$$$ — takes $$$1$$$ operation.$$$(001, 100)$$$ — takes $$$2$$$ operations.$$$(010, 000)$$$ — takes $$$0$$$ operations, as it's impossible to achieve the ending state.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "92e6aac8", "template_md5": "35d339e4", "result": "You have a strip of length $n$ with height 1. Some positions on the strip have a Lego piece (represented by 1), some are empty (represented by 0), and some are unknown (represented by ?). You are given two states of the strip: a starting state and an ending state.\n\nYou can perform the following operation in one second:\n\n* Remove two adjacent Lego pieces if they exist.\n* Add two Lego pieces to two adjacent empty positions.\n\nYou can only perform this operation on adjacent positions.\n\nFind the minimum number of seconds it takes to transform the starting state into the ending state, considering all possible consistent states for the unknown positions. If it's impossible to transform the starting state into the ending state, output 0.\n\nThe answer should be modulo $10^9 + 7$."}, {"prompt_md5": "92a86e26", "template_md5": "465699a0", "result": "You have a line of a fixed length. Some positions on the line can have a block or be empty. You know the state of some positions, but others are unknown. You can change the state of two adjacent positions simultaneously: either add blocks to both or remove blocks from both.  \n\nFind the minimum number of operations needed to transform the line from one known state to another known state, considering all possible unknown states. If it's impossible to transform one state to another, count it as 0 operations."}]}