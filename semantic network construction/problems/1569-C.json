{"uid": "1569-C", "url": "https://codeforces.com/contest/1569/problem/C", "tags": ["combinatorics", " math"], "title": "1569-C", "statement": "C. Jury Meetingtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard output$$$n$$$ people gathered to hold a jury meeting of the upcoming competition, the $$$i$$$-th member of the jury came up with $$$a_i$$$ tasks, which they want to share with each other.First, the jury decides on the order which they will follow while describing the tasks. Let that be a permutation $$$p$$$ of numbers from $$$1$$$ to $$$n$$$ (an array of size $$$n$$$ where each integer from $$$1$$$ to $$$n$$$ occurs exactly once).Then the discussion goes as follows:If a jury member $$$p_1$$$ has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped.If a jury member $$$p_2$$$ has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped....If a jury member $$$p_n$$$ has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped.If there are still members with tasks left, then the process repeats from the start. Otherwise, the discussion ends.A permutation $$$p$$$ is nice if none of the jury members tell two or more of their own tasks in a row.Count the number of nice permutations. The answer may be really large, so print it modulo $$$998\\\\,244\\\\,353$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of test cases.The first line of the test case contains a single integer $$$n$$$ ($$$2 \\\\le n \\\\le 2 \\\\cdot 10^5$$$) — number of jury members.The second line contains $$$n$$$ integers $$$a_1, a_2, \\\\dots, a_n$$$ ($$$1 \\\\le a_i \\\\le 10^9$$$) — the number of problems that the $$$i$$$-th member of the jury came up with.The sum of $$$n$$$ over all test cases does not exceed $$$2 \\\\cdot 10^5$$$.OutputFor each test case, print one integer — the number of nice permutations, taken modulo $$$998\\\\,244\\\\,353$$$.ExampleInput4 2 1 2 3 5 5 5 4 1 3 3 7 6 3 4 2 1 3 3Output1 6 0 540NoteExplanation of the first test case from the example:There are two possible permutations, $$$p = [1, 2]$$$ and $$$p = [2, 1]$$$. For $$$p = [1, 2]$$$, the process is the following:the first jury member tells a task;the second jury member tells a task;the first jury member doesn't have any tasks left to tell, so they are skipped;the second jury member tells a task.So, the second jury member has told two tasks in a row (in succession), so the permutation is not nice.For $$$p = [2, 1]$$$, the process is the following:the second jury member tells a task;the first jury member tells a task;the second jury member tells a task.So, this permutation is nice.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "e685d168", "template_md5": "35d339e4", "result": "You are given $n$ people, each with a number of tasks ($a_1, a_2, ..., a_n$).  They want to present their tasks in a specific order.\n\nThe order is determined by a permutation $p$ of the numbers from 1 to $n$.  \n\nHere's how the presentation works:\n\n1. Person $p_1$ presents one task if they have any left.\n2. Person $p_2$ presents one task if they have any left.\n3. ...\n4. Person $p_n$ presents one task if they have any left.\n\nIf anyone still has tasks, the process repeats from step 1.\n\nA permutation is considered \"nice\" if no person presents two of their own tasks in a row.\n\nFind the number of nice permutations. The answer may be very large, so give it modulo 998244353."}, {"prompt_md5": "2233525f", "template_md5": "465699a0", "result": "You have a group of people, each with a number of tasks. They take turns presenting tasks in a specific order.  You need to find how many different orders are possible where no person presents two of their own tasks in a row."}]}