{"uid": "909-E", "url": "https://codeforces.com/contest/909/problem/E", "tags": ["dfs and similar", " dp", " graphs", " greedy"], "title": "909-E", "statement": "E. Coprocessortime limit per test1.5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a program you want to execute as a set of tasks organized in a dependency graph. The dependency graph is a directed acyclic graph: each task can depend on results of one or several other tasks, and there are no directed circular dependencies between tasks. A task can only be executed if all tasks it depends on have already completed.Some of the tasks in the graph can only be executed on a coprocessor, and the rest can only be executed on the main processor. In one coprocessor call you can send it a set of tasks which can only be executed on it. For each task of the set, all tasks on which it depends must be either already completed or be included in the set. The main processor starts the program execution and gets the results of tasks executed on the coprocessor automatically.Find the minimal number of coprocessor calls which are necessary to execute the given program.InputThe first line contains two space-separated integersN(1 ≤N≤ 105) — the total number of tasks given, andM(0 ≤M≤ 105) — the total number of dependencies between tasks.The next line containsNspace-separated integers. IfEi= 0, taskican only be executed on the main processor, otherwise it can only be executed on the coprocessor.The nextMlines describe the dependencies between tasks. Each line contains two space-separated integersT1andT2and means that taskT1depends on taskT2(T1≠T2). Tasks are indexed from0toN- 1. AllMpairs(T1,T2)are distinct. It is guaranteed that there are no circular dependencies between tasks.OutputOutput one line containing an integer — the minimal number of coprocessor calls necessary to execute the program.ExamplesInput4 30 1 0 10 11 22 3Output2Input4 31 1 1 00 10 23 0Output1NoteIn the first test, tasks 1 and 3 can only be executed on the coprocessor. The dependency graph is linear, so the tasks must be executed in order 3 -> 2 -> 1 -> 0. You have to call coprocessor twice: first you call it for task 3, then you execute task 2 on the main processor, then you call it for for task 1, and finally you execute task 0 on the main processor.In the second test, tasks 0, 1 and 2 can only be executed on the coprocessor. Tasks 1 and 2 have no dependencies, and task 0 depends on tasks 1 and 2, so all three tasks 0, 1 and 2 can be sent in one coprocessor call. After that task 3 is executed on the main processor.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "96d54b79", "template_md5": "35d339e4", "result": "You are given a program with $N$ tasks, where each task can depend on other tasks. Some tasks can only be executed on a coprocessor, while others can only be executed on the main processor. \n\nYou can send a set of tasks to the coprocessor at once, but all tasks in the set must be able to be executed on the coprocessor and all their dependencies must be either already completed or included in the set.\n\nThe main processor starts the program and automatically receives the results of tasks executed on the coprocessor.\n\nFind the minimum number of times you need to call the coprocessor to execute the entire program. \n\n\n\nInput:\n\n* The first line contains two integers: $N$ (the number of tasks) and $M$ (the number of dependencies).\n* The second line contains $N$ integers, where each integer indicates whether a task can only be executed on the main processor (0) or the coprocessor (1).\n* The next $M$ lines each contain two integers, representing a dependency: task $T1$ depends on task $T2$.\n\nOutput:\n\n* A single integer representing the minimum number of coprocessor calls needed."}, {"prompt_md5": "88a84358", "template_md5": "465699a0", "result": "You have a set of tasks that need to be completed. Some tasks can only be done on a special processor (coprocessor), while others can be done on a regular processor.  Tasks have dependencies, meaning some tasks need to be finished before others can start.  Find the fewest times you need to use the coprocessor to complete all the tasks."}]}