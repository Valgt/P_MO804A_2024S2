{"uid": "1520-F2", "url": "https://codeforces.com/contest/1520/problem/F2", "tags": ["binary search", " constructive algorithms", " data structures", " interactive"], "title": "1520-F2", "statement": "F2. Guess the K-th Zero (Hard version)time limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an interactive problem.This is a hard version of the problem. The difference from the easy version is that in the hard version $$$1 \\\\le t \\\\le \\\\min(n, 10^4)$$$ and the total number of queries is limited to $$$6 \\\\cdot 10^4$$$.Polycarp is playing a computer game. In this game, an array consisting of zeros and ones is hidden. Polycarp wins if he guesses the position of the $$$k$$$-th zero from the left $$$t$$$ times.Polycarp can make no more than $$$6 \\\\cdot 10^4$$$ requests totally of the following type:?$$$l$$$ $$$r$$$ — find out the sum of all elements in positions from $$$l$$$ to $$$r$$$ ($$$1 \\\\le l \\\\le r \\\\le n$$$) inclusive.To make the game more interesting, each guessed zero turns into one and the game continues on the changed array. More formally, if the position of the $$$k$$$-th zero was $$$x$$$, then after Polycarp guesses this position, the $$$x$$$-th element of the array will be replaced from $$$0$$$ to $$$1$$$.Help Polycarp win the game.InteractionFirst, your program must read two integers $$$n$$$ and $$$t$$$ ($$$1 \\\\le n \\\\le 2 \\\\cdot 10^5$$$, $$$1 \\\\le t \\\\le \\\\min(n, 10^4)$$$).Then $$$t$$$ lines follow, each of which contains one integer $$$k$$$ ($$$1 \\\\le k \\\\le n$$$). It is guaranteed that at the moment of the request the array contains at least $$$k$$$ zeros. In order to get the next value of $$$k$$$, you must output the answer for the previous value of $$$k$$$.After that, you can make no more than $$$6 \\\\cdot 10^4$$$ requests in total.Use the following format to output the answer (it is not a request, it doesn't count in $$$6 \\\\cdot 10^4$$$):!$$$x$$$ — position of the $$$k$$$-th zero.Positions in the array are numbered from left to right from $$$1$$$ to $$$n$$$ inclusive.After printing $$$t$$$ answers, your program should exit immediately.In this task, the interactor isnot adaptive. This means that within the same test, the hidden array and the queriesdo not change.In case of an incorrect query,-1will be displayed. When this value is received, your program must immediately exit normally (for example, by callingexit(0)), otherwise, the testing system may issue an arbitrary verdict.If the number of requests is exceeded, the verdictwrong answerwill be displayed.Your solution may get the verdictIdleness limit exceededif you don't print anything or forget to flush the output buffer.To flush the output buffer, you need to do the following immediately after the query output and the end-of-line character:fflush(stdout)orcout.flush()in C ++;System.out.flush()in Java;flush(output)in Pascal;stdout.flush()in Python;see the documentation for other languages.HacksUse the following format for hacks:On the first line print the string $$$s$$$ ($$$1 \\\\le |s| \\\\le 2 \\\\cdot 10^5$$$), consisting of zeros and ones, and an integer $$$t$$$ ($$$1 \\\\le t \\\\le \\\\min(|s|, 10^4)$$$) — hidden array and number of requests, respectively. In the next $$$t$$$ lines output the number $$$k$$$ ($$$1 \\\\le k \\\\le |s|$$$).The hacked solution will not have direct access to the hidden array.ExampleInput6 2  2  2  1  1  0  1  0Output? 4 6  ? 1 1  ? 1 2  ? 5 5  ! 5  ? 2 2  ! 2NoteIn the first test, the array $$$[1, 0, 1, 1, 0, 1]$$$ is hidden. After answering the query $$$k=2$$$, the array changed to $$$[1, 0, 1, 1, 1, 1]$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "6ede4e9a", "template_md5": "35d339e4", "result": "You are given an array of 0s and 1s. You need to find the positions of the $k$-th zero in the array $t$ times. \n\nYou can make at most $6 \\cdot 10^4$ queries of the following type:\n\n* ? $l$ $r$ : Find the sum of elements in the array from index $l$ to $r$ (inclusive).\n\nAfter each correct guess, the zero at that position turns into a 1, and the game continues on the modified array.\n\n**Input:**\n\n* $n$: the length of the array\n* $t$: the number of times you need to find the $k$-th zero\n\nThen, $t$ lines follow, each containing an integer $k$ (the position of the $k$-th zero you need to find).\n\n**Output:**\n\nFor each $k$, output ! $x$ where $x$ is the position of the $k$-th zero.\n\n**Constraints:**\n\n* $1 \\le n \\le 2 \\cdot 10^5$\n* $1 \\le t \\le \\min(n, 10^4)$\n* The total number of queries must be at most $6 \\cdot 10^4$.\n\n\n\n**Note:**\n\n* The array and queries do not change during the game.\n* If you make an incorrect query, the program will exit.\n* If you exceed the query limit, the program will receive a \"wrong answer\" verdict."}, {"prompt_md5": "22fad30a", "template_md5": "465699a0", "result": "You are given a hidden array of 0s and 1s. You need to find the positions of the k-th zero in the array t times. You can make queries to find the sum of elements in a given range of the array.  Each time you find a zero, it changes to a 1. You have a limited number of queries."}]}