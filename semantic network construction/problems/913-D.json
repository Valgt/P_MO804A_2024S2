{"uid": "913-D", "url": "https://codeforces.com/contest/913/problem/D", "tags": ["binary search", " brute force", " data structures", " greedy", " sortings"], "title": "913-D", "statement": "D. Too Easy Problemstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are preparing for an exam on scheduling theory. The exam will last for exactlyTmilliseconds and will consist ofnproblems. You can either solve problemiin exactlytimilliseconds or ignore it and spend no time. You don't need time to rest after solving a problem, either.Unfortunately, your teacher considers some of the problems too easy for you. Thus, he assigned an integeraito every problemimeaning that the problemican bring you a point to the final score only in case you have solved no more thanaiproblems overall (including problemi).Formally, suppose you solve problemsp1,p2, ...,pkduring the exam. Then, your final scoreswill be equal to the number of values ofjbetween 1 andksuch thatk≤apj.You have guessed that the real first problem of the exam is already in front of you. Therefore, you want to choose a set of problems to solve during the exam maximizing your final score in advance. Don't forget that the exam is limited in time, and you must have enough time to solve all chosen problems. If there exist different sets of problems leading to the maximum final score, any of them will do.InputThe first line contains two integersnandT(1 ≤n≤ 2·105;1 ≤T≤ 109) — the number of problems in the exam and the length of the exam in milliseconds, respectively.Each of the nextnlines contains two integersaiandti(1 ≤ai≤n;1 ≤ti≤ 104). The problems are numbered from 1 ton.OutputIn the first line, output a single integers— your maximum possible final score.In the second line, output a single integerk(0 ≤k≤n) — the number of problems you should solve.In the third line, outputkdistinct integersp1,p2, ...,pk(1 ≤pi≤n) — the indexes of problems you should solve, in any order.If there are several optimal sets of problems, you may output any of them.ExamplesInput5 3003 1004 1504 802 902 300Output233 1 4Input2 1001 7872 788Output00Input2 1002 422 58Output221 2NoteIn the first example, you should solve problems 3, 1, and 4. In this case you'll spend80 + 100 + 90 = 270milliseconds, falling within the length of the exam, 300 milliseconds (and even leaving yourself 30 milliseconds to have a rest). Problems 3 and 1 will bring you a point each, while problem 4 won't. You'll score two points.In the second example, the length of the exam is catastrophically not enough to solve even a single problem.In the third example, you have just enough time to solve both problems in42 + 58 = 100milliseconds and hand your solutions to the teacher with a smile.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "a5265d7b", "template_md5": "35d339e4", "result": "You have an exam with $n$ problems. Each problem takes $t_i$ milliseconds to solve and is worth $a_i$ points.  You have $T$ milliseconds to complete the exam.  \n\nHowever, a problem is only worth a point if you have solved no more than $a_i$ problems in total.\n\nFind the maximum number of points you can earn and list the indices of the problems you should solve to achieve this."}, {"prompt_md5": "d784eb19", "template_md5": "465699a0", "result": "You have a set of tasks, each taking a certain amount of time. You have a limited amount of time to complete as many tasks as possible.  Each task is worth a point, but you only get a point for a task if you haven't completed too many tasks in total. Find the maximum number of points you can get and the set of tasks to complete."}]}