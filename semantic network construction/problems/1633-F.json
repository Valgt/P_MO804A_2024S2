{"uid": "1633-F", "url": "https://codeforces.com/contest/1633/problem/F", "tags": ["data structures", " divide and conquer", " interactive", " trees"], "title": "1633-F", "statement": "F. Perfect Matchingtime limit per test12 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou are given a tree consisting of $$$n$$$ vertices (numbered from $$$1$$$ to $$$n$$$) and $$$n-1$$$ edges (numbered from $$$1$$$ to $$$n-1$$$). Initially, all vertices except vertex $$$1$$$ are inactive.You have to process queries of three types:$$$1$$$ $$$v$$$ — activate the vertex $$$v$$$. It is guaranteed that the vertex $$$v$$$ is inactive before this query, and one of its neighbors is active. After activating the vertex, you have to choose a subset of edges of the tree such that eachactivevertex is incident toexactly onechosen edge, and eachinactivevertex is not incident to any of the chosen edges — in other words, this subset should represent a perfect matching on the active part of the tree. If any such subset of edges exists, print the sum of indices of edges in it; otherwise, print $$$0$$$.$$$2$$$ — queries of this type will be asked only right after a query of type $$$1$$$, and there will beat most $$$10$$$such queries. If your answer to the previous query was $$$0$$$, simply print $$$0$$$; otherwise, print the subset of edges for the previous query as follows: first, print the number of edges in the subset, then print the indices of the chosen edgesin ascending order. The sum of indices should be equal to your answer to the previous query.$$$3$$$ — terminate the program.Note that you should solve the problem inonlinemode. It means that you can't read the whole input at once. You can read each query only after writing the answer for the last query. Use functionsfflushinC++andBufferedWriter.flushinJavalanguages after each writing in your program.InputThe first line contains one integer $$$n$$$ ($$$2 \\\\le n \\\\le 2 \\\\cdot 10^5$$$) — the number of vertices of the tree.Then $$$n-1$$$ lines follow. The $$$i$$$-th line contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \\\\le u_i, v_i \\\\le n$$$; $$$u_i \\\\ne v_i$$$) — the endpoints of the $$$i$$$-th edge. These edges form a tree.Then the queries follow in the format described in the statement, one line per query. There will be at least $$$2$$$ and at most $$$n+10$$$ queries. The last query (and only the last one) will be of type $$$3$$$. Note that you can read the $$$i$$$-th query only if you have already given the answer for the query $$$i-1$$$ (except for $$$i = 1$$$).If your answer for one of the queries is incorrect and the judging program recognizes it, instead of the next query, you may receive the integer $$$0$$$ on a separate line. After receiving it, your program should terminate gracefully, and you will receive \"Wrong Answer\" verdict. If your program doesn't terminate, your solution may receive some other verdict, like \"Time Limit Exceeded\", \"Idleness Limit Exceeded\", etc. Note that the fact that your solution doesn't receive the integer $$$0$$$, itdoes not mean that all your answers are correct, some of them will be checked only after your program is terminated.OutputFor each query of type $$$1$$$ or $$$2$$$, print the answer on a separate line as described in the statement. Don't forget to flush the output.ExampleInput6 1 4 6 1 3 2 1 2 5 1 1 4 2 1 2 2 1 3 2 1 5 1 6 2 3Output1 1 1 0 0 4 2 1 3 0 0 0", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "5499311a", "template_md5": "35d339e4", "result": "You are given a tree with $n$ vertices (numbered 1 to $n$) and $n-1$ edges (numbered 1 to $n-1$). Initially, all vertices except vertex 1 are inactive.\n\nYou will receive queries of three types:\n\n* **Type 1:**  Activate vertex $v$.  Vertex $v$ must be inactive before this query, and one of its neighbors must be active. After activating vertex $v$, you need to find a subset of edges in the tree that satisfies these conditions:\n    * Each active vertex is connected to exactly one edge in the subset.\n    * Each inactive vertex is not connected to any edge in the subset.\n    * If such a subset exists, print the sum of the indices of the edges in the subset. Otherwise, print 0.\n\n* **Type 2:** This query is only asked immediately after a Type 1 query, and there will be at most 10 such queries. If your answer to the previous Type 1 query was 0, simply print 0. Otherwise, print the subset of edges from the previous Type 1 query as follows:\n    * First, print the number of edges in the subset.\n    * Then, print the indices of the chosen edges in ascending order.\n    * The sum of the indices should be equal to your answer from the previous Type 1 query.\n\n* **Type 3:** Terminate the program.\n\n**Important Notes:**\n\n* You must solve this problem online. This means you can only read each query after writing the answer to the previous query.\n* Use `fflush` in C++ and `BufferedWriter.flush` in Java to ensure your output is immediately written after each print statement.\n\n\n\nLet me know if you have any other questions."}, {"prompt_md5": "450e6e3e", "template_md5": "465699a0", "result": "You are given a tree with nodes and edges.  You can activate nodes one by one.  After activating a node, you need to find a set of edges that connect only the activated nodes, without connecting any inactive nodes.  \n\nYou will be given queries to activate nodes and requests to find the set of edges that satisfy the condition."}]}