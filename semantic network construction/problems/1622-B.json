{"uid": "1622-B", "url": "https://codeforces.com/contest/1622/problem/B", "tags": ["data structures", " greedy", " math", " sortings"], "title": "1622-B", "statement": "B. Berland Musictime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputBerland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.So imagine Monocarp got recommended $$$n$$$ songs, numbered from $$$1$$$ to $$$n$$$. The $$$i$$$-th song had its predicted rating equal to $$$p_i$$$, where $$$1 \\\\le p_i \\\\le n$$$ and every integer from $$$1$$$ to $$$n$$$ appears exactly once. In other words, $$$p$$$ is a permutation.After listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string $$$s$$$, such that $$$s_i=0$$$ means that he disliked the $$$i$$$-th song, and $$$s_i=1$$$ means that he liked it.Now the service has to re-evaluate the song ratings in such a way that:the new ratings $$$q_1, q_2, \\\\dots, q_n$$$ still form a permutation ($$$1 \\\\le q_i \\\\le n$$$; each integer from $$$1$$$ to $$$n$$$ appears exactly once);every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all $$$i, j$$$ such that $$$s_i=1$$$ and $$$s_j=0$$$, $$$q_i>q_j$$$ should hold).Among all valid permutations $$$q$$$ find the one that has the smallest value of $$$\\\\sum\\\\limits_{i=1}^n |p_i-q_i|$$$, where $$$|x|$$$ is an absolute value of $$$x$$$.Print the permutation $$$q_1, q_2, \\\\dots, q_n$$$. If there are multiple answers, you can print any of them.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of testcases.The first line of each testcase contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 2 \\\\cdot 10^5$$$) — the number of songs.The second line of each testcase contains $$$n$$$ integers $$$p_1, p_2, \\\\dots, p_n$$$ ($$$1 \\\\le p_i \\\\le n$$$) — the permutation of the predicted ratings.The third line contains a single string $$$s$$$, consisting of $$$n$$$ characters. Each character is either a $$$0$$$ or a $$$1$$$. $$$0$$$ means that Monocarp disliked the song, and $$$1$$$ means that he liked it.The sum of $$$n$$$ over all testcases doesn't exceed $$$2 \\\\cdot 10^5$$$.OutputFor each testcase, print a permutation $$$q$$$ — the re-evaluated ratings of the songs. If there are multiple answers such that $$$\\\\sum\\\\limits_{i=1}^n |p_i-q_i|$$$ is minimum possible, you can print any of them.ExampleInput3 2 1 2 10 3 3 1 2 111 8 2 3 1 8 5 4 7 6 01110001Output2 1 3 1 2 1 6 5 8 3 2 4 7NoteIn the first testcase, there exists only one permutation $$$q$$$ such that each liked song is rating higher than each disliked song: song $$$1$$$ gets rating $$$2$$$ and song $$$2$$$ gets rating $$$1$$$. $$$\\\\sum\\\\limits_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2$$$.In the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to $$$p$$$. Its cost is $$$0$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "1b13e3cc", "template_md5": "35d339e4", "result": "You are given a list of $n$ songs, each with a predicted rating $p_i$ from 1 to $n$.  You are also given a list of $n$ bits, where a 0 means the song was disliked and a 1 means the song was liked.\n\nYou need to create a new list of ratings $q_i$ for the songs, following these rules:\n\n* The new ratings must be a permutation of the numbers 1 to $n$.\n* Every song that was liked must have a higher rating than every song that was disliked.\n\nFind the permutation $q$ that minimizes the sum of the absolute differences between the original predicted ratings ($p_i$) and the new ratings ($q_i$). \n\nPrint the resulting permutation $q$. If there are multiple solutions with the same minimum sum, you can print any one of them."}, {"prompt_md5": "eedc3c69", "template_md5": "465699a0", "result": "You are given a list of numbers representing song ratings and a list of 0s and 1s representing whether a song was liked or disliked.  Rearrange the ratings so that liked songs have higher ratings than disliked songs. Find the arrangement that results in the smallest total difference between the original and new ratings."}]}