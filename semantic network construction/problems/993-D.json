{"uid": "993-D", "url": "https://codeforces.com/contest/993/problem/D", "tags": ["binary search", " dp", " greedy"], "title": "993-D", "statement": "D. Compute Powertime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou need to execute several tasks, each associated with number of processors it needs, and the compute power it will consume.You have sufficient number of analog computers, each with enough processors for any task. Each computer can execute up to one task at a time, and no more than two tasks total. The first task can be any, the second task on each computer must use strictly less power than the first. You will assign between 1 and 2 tasks to each computer. You will then first execute the first task on each computer, wait for all of them to complete, and then execute the second task on each computer that has two tasks assigned.If the average compute power per utilized processor (the sum of all consumed powers for all tasks presently running divided by the number of utilized processors) across all computers exceeds some unknown threshold during the execution of the first tasks, the entire system will blow up. There is no restriction on the second tasks execution. Find the lowest threshold for which it is possible.Due to the specifics of the task, you need to print the answer multiplied by 1000 and rounded up.InputThe first line contains a single integern(1 ≤n≤ 50) — the number of tasks.The second line containsnintegersa1,a2, ...,an(1 ≤ai≤ 108), whereairepresents the amount of power required for thei-th task.The third line containsnintegersb1,b2, ...,bn(1 ≤bi≤ 100), wherebiis the number of processors thati-th task will utilize.OutputPrint a single integer value — the lowest threshold for which it is possible to assign all tasks in such a way that the system will not blow up after the first round of computation, multiplied by 1000 and rounded up.ExamplesInput68 10 9 9 8 101 1 1 1 1 1Output9000Input68 10 9 9 8 101 10 5 5 1 10Output1160NoteIn the first example the best strategy is to run each task on a separate computer, getting average compute per processor during the first round equal to 9.In the second task it is best to run tasks with compute 10 and 9 on one computer, tasks with compute 10 and 8 on another, and tasks with compute 9 and 8 on the last, averaging (10 + 10 + 9) / (10 + 10 + 5) = 1.16 compute power per processor during the first round.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "22e93d8b", "template_md5": "35d339e4", "result": "You have a system with multiple computers. Each computer can run one or two tasks at a time. The first task on each computer must use more power than the second task.  \n\nYou are given a list of tasks, each with a power requirement and the number of processors it needs.  \n\nThe system has a safety threshold. If the average power used per processor across all running tasks exceeds this threshold during the first round of computation, the system will fail.\n\nYour goal is to find the lowest possible safety threshold that allows you to run all the tasks without causing the system to fail.\n\n**Input:**\n\n* The first line contains the number of tasks, *n*.\n* The second line contains *n* integers, where each integer represents the power requirement of a task.\n* The third line contains *n* integers, where each integer represents the number of processors a task needs.\n\n**Output:**\n\n* Print a single integer representing the lowest safety threshold multiplied by 1000 and rounded up."}, {"prompt_md5": "d881b414", "template_md5": "465699a0", "result": "You have a number of tasks, each requiring a certain amount of power and using a certain number of processors. You have enough computers, each capable of running one or two tasks at a time. The first task on each computer must use more power than the second task.  \n\nYou need to figure out the lowest power limit that will prevent the system from overloading when all the first tasks are running simultaneously."}]}