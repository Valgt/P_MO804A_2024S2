{"uid": "2009-G2", "url": "https://codeforces.com/contest/2009/problem/G2", "tags": ["binary search", " data structures", " dp"], "title": "2009-G2", "statement": "G2. Yunli's Subarray Queries (hard version)time limit per test3 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputThis is the hard version of the problem. In this version, it is guaranteed that $$$r \\\\geq l+k-1$$$ for all queries.For an arbitrary array $$$b$$$, Yunli can perform the following operation any number of times:Select an index $$$i$$$. Set $$$b_i = x$$$ where $$$x$$$ is any integer she desires ($$$x$$$ is not limited to the interval $$$[1,n]$$$).Denote $$$f(b)$$$ as the minimum number of operations she needs to perform until there exists a consecutive subarray$$$^{\\\\text{∗}}$$$ of length at least $$$k$$$ in $$$b$$$.Yunli is given an array $$$a$$$ of size $$$n$$$ and asks you $$$q$$$ queries. In each query, you must output $$$\\\\sum_{j=l+k-1}^{r} f([a_l, a_{l+1}, \\\\ldots, a_j])$$$.$$$^{\\\\text{∗}}$$$If there exists a consecutive subarray of length $$$k$$$ that starts at index $$$i$$$ ($$$1 \\\\leq i \\\\leq |b|-k+1$$$), then $$$b_j = b_{j-1} + 1$$$ for all $$$i < j \\\\leq i+k-1$$$.InputThe first line contains $$$t$$$ ($$$1 \\\\leq t \\\\leq 10^4$$$) — the number of test cases.The first line of each test case contains three integers $$$n$$$, $$$k$$$, and $$$q$$$ ($$$1 \\\\leq k \\\\leq n \\\\leq 2 \\\\cdot 10^5$$$, $$$1 \\\\leq q \\\\leq 2 \\\\cdot 10^5$$$) — the length of the array, the length of the consecutive subarray, and the number of queries.The following line contains $$$n$$$ integers $$$a_1, a_2, ..., a_n$$$ ($$$1 \\\\leq a_i \\\\leq n$$$).The following $$$q$$$ lines contain two integers $$$l$$$ and $$$r$$$ ($$$1 \\\\leq l \\\\leq r \\\\leq n$$$, $$$r \\\\geq l+k-1$$$) — the bounds of the query.It is guaranteed the sum of $$$n$$$ over all test cases does not exceed $$$2 \\\\cdot 10^5$$$ and the sum of $$$q$$$ over all test cases does not exceed $$$2 \\\\cdot 10^5$$$.OutputOutput $$$\\\\sum_{j=l+k-1}^{r} f([a_l, a_{l+1}, \\\\ldots, a_j])$$$ for each query on a new line.ExampleInput37 5 31 2 3 2 1 2 31 72 73 78 4 24 3 1 1 2 4 3 23 61 55 4 24 5 1 2 31 41 5Output6 5 2 2 5 2 3NoteIn the second query of the first testcase, we calculate the following function values:$$$f([2,3,2,1,2])=3$$$ because Yunli can set $$$b_3=4$$$, $$$b_4=5$$$, and $$$b_5=6$$$, making a consecutive subarray of size $$$5$$$ in $$$3$$$ moves.$$$f([2,3,2,1,2,3])=2$$$ because we can set $$$b_3=0$$$ and $$$b_2=-1$$$, making a consecutive subarray of size $$$5$$$ in $$$2$$$ moves (starting at position $$$2$$$)The answer to this query is $$$3+2=5$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "7d9c7c8f", "template_md5": "35d339e4", "result": "You are given an array of integers  $a$ of length $n$ and $q$ queries. Each query is defined by two integers $l$ and $r$ ($1 \\leq l \\leq r \\leq n$, $r \\geq l+k-1$).\n\nFor each query, you need to calculate the sum of a function $f$ over the subarray $a[l...r]$.\n\nThe function $f(b)$ is defined as the minimum number of operations needed to make a consecutive subarray of length at least $k$ in the array $b$.  \n\nAn operation consists of choosing an index $i$ and setting $b_i$ to any integer.\n\n**Input:**\n\n* $t$ (number of test cases)\n* For each test case:\n    * $n$ (length of the array)\n    * $k$ (length of the consecutive subarray)\n    * $q$ (number of queries)\n    * $a_1, a_2, ..., a_n$ (the array)\n    * $q$ lines, each containing $l$ and $r$ (the bounds of a query)\n\n**Output:**\n\n* For each query, output the sum of $f$ over the subarray $a[l...r]$."}, {"prompt_md5": "30ddbb82", "template_md5": "465699a0", "result": "You are given an array of numbers and need to answer multiple queries. Each query has a starting and ending position. For each query, you need to find the minimum number of operations needed to create a subarray of a given length within that range.  In each operation, you can change any number in the array to any integer."}]}