{"uid": "747-C", "url": "https://codeforces.com/contest/747/problem/C", "tags": ["implementation"], "title": "747-C", "statement": "C. Serverstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere arenservers in a laboratory, each of them can perform tasks. Each server has a unique id — integer from1ton.It is known that during the dayqtasks will come, thei-th of them is characterized with three integers:ti— the moment in seconds in which the task will come,ki— the number of servers needed to perform it, anddi— the time needed to perform this task in seconds. Alltiare distinct.To perform thei-th task you needkiservers which are unoccupied in the secondti. After the servers begin to perform the task, each of them will be busy over the nextdiseconds. Thus, they will be busy in secondsti,ti+ 1, ...,ti+di- 1. For performing the task,kiservers with the smallest ids will be chosen from all the unoccupied servers. If in the secondtithere are not enough unoccupied servers, the task is ignored.Write the program that determines which tasks will be performed and which will be ignored.InputThe first line contains two positive integersnandq(1 ≤n≤ 100,1 ≤q≤ 105) — the number of servers and the number of tasks.Nextqlines contains three integers each, thei-th line contains integersti,kianddi(1 ≤ti≤ 106,1 ≤ki≤n,1 ≤di≤ 1000) — the moment in seconds in which thei-th task will come, the number of servers needed to perform it, and the time needed to perform this task in seconds. The tasks are given in a chronological order and they will come in distinct seconds.OutputPrintqlines. If thei-th task will be performed by the servers, print in thei-th line the sum of servers' ids on which this task will be performed. Otherwise, print-1.ExamplesInput4 31 3 22 2 13 4 3Output6-110Input3 23 2 35 1 2Output33Input8 61 3 204 2 16 5 510 1 115 3 621 8 8Output6930-11536NoteIn the first example in the second1the first task will come, it will be performed on the servers with ids1,2and3(the sum of the ids equals6) during two seconds. In the second2the second task will come, it will be ignored, because only the server4will be unoccupied at that second. In the second3the third task will come. By this time, servers with the ids1,2and3will be unoccupied again, so the third task will be done on all the servers with the ids1,2,3and4(the sum of the ids is10).In the second example in the second3the first task will come, it will be performed on the servers with ids1and2(the sum of the ids is3) during three seconds. In the second5the second task will come, it will be performed on the server3, because the first two servers will be busy performing the first task.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "bfae13d8", "template_md5": "35d339e4", "result": "There are $n$ servers. Each server has a unique ID from 1 to $n$. \n\n$q$ tasks will arrive, each with the following information:\n\n* $t_i$: The time in seconds when the $i$-th task arrives.\n* $k_i$: The number of servers needed to perform the $i$-th task.\n* $d_i$: The time in seconds it takes to perform the $i$-th task.\n\nAll $t_i$ values are distinct.\n\nTo perform a task, you need $k_i$ unoccupied servers with the smallest IDs. If there aren't enough unoccupied servers at time $t_i$, the task is ignored. Once a server starts a task, it remains busy for $d_i$ seconds.\n\n**Output:**\n\nFor each task, print:\n\n* The sum of the IDs of the servers that perform the task if it is performed.\n* -1 if the task is ignored."}, {"prompt_md5": "2649b183", "template_md5": "465699a0", "result": "You have a number of servers. Tasks arrive at specific times, each requiring a certain number of consecutive servers to be free.  If enough free servers with the lowest IDs are available when a task arrives, it is performed. Otherwise, the task is ignored. Determine which tasks are performed and which are ignored."}]}