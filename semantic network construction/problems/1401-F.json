{"uid": "1401-F", "url": "https://codeforces.com/contest/1401/problem/F", "tags": ["binary search", " bitmasks", " data structures"], "title": "1401-F", "statement": "F. Reverse and Swaptime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an array $$$a$$$ of length $$$2^n$$$. You should process $$$q$$$ queries on it. Each query has one of the following $$$4$$$ types:$$$Replace(x, k)$$$ — change $$$a_x$$$ to $$$k$$$;$$$Reverse(k)$$$ — reverse each subarray $$$[(i-1) \\\\cdot 2^k+1, i \\\\cdot 2^k]$$$ for all $$$i$$$ ($$$i \\\\ge 1$$$);$$$Swap(k)$$$ — swap subarrays $$$[(2i-2) \\\\cdot 2^k+1, (2i-1) \\\\cdot 2^k]$$$ and $$$[(2i-1) \\\\cdot 2^k+1, 2i \\\\cdot 2^k]$$$ for all $$$i$$$ ($$$i \\\\ge 1$$$);$$$Sum(l, r)$$$ — print the sum of the elements of subarray $$$[l, r]$$$.Write a program that can quickly process given queries.InputThe first line contains two integers $$$n$$$, $$$q$$$ ($$$0 \\\\le n \\\\le 18$$$; $$$1 \\\\le q \\\\le 10^5$$$) — the length of array $$$a$$$ and the number of queries.The second line contains $$$2^n$$$ integers $$$a_1, a_2, \\\\ldots, a_{2^n}$$$ ($$$0 \\\\le a_i \\\\le 10^9$$$).Next $$$q$$$ lines contains queries — one per line. Each query has one of $$$4$$$ types:\"$$$1$$$ $$$x$$$ $$$k$$$\" ($$$1 \\\\le x \\\\le 2^n$$$; $$$0 \\\\le k \\\\le 10^9$$$) — $$$Replace(x, k)$$$;\"$$$2$$$ $$$k$$$\" ($$$0 \\\\le k \\\\le n$$$) — $$$Reverse(k)$$$;\"$$$3$$$ $$$k$$$\" ($$$0 \\\\le k < n$$$) — $$$Swap(k)$$$;\"$$$4$$$ $$$l$$$ $$$r$$$\" ($$$1 \\\\le l \\\\le r \\\\le 2^n$$$) — $$$Sum(l, r)$$$.It is guaranteed that there is at least one $$$Sum$$$ query.OutputPrint the answer for each $$$Sum$$$ query.ExamplesInput2 3 7 4 9 9 1 2 8 3 1 4 2 4Output24Input3 8 7 0 8 8 7 1 5 2 4 3 7 2 1 3 2 4 1 6 2 3 1 5 16 4 8 8 3 0Output29 22 1NoteIn the first sample, initially, the array $$$a$$$ is equal to $$$\\\\{7,4,9,9\\\\}$$$.After processing the first query. the array $$$a$$$ becomes $$$\\\\{7,8,9,9\\\\}$$$.After processing the second query, the array $$$a_i$$$ becomes $$$\\\\{9,9,7,8\\\\}$$$Therefore, the answer to the third query is $$$9+7+8=24$$$.In the second sample, initially, the array $$$a$$$ is equal to $$$\\\\{7,0,8,8,7,1,5,2\\\\}$$$. What happens next is:$$$Sum(3, 7)$$$ $$$\\\\to$$$ $$$8 + 8 + 7 + 1 + 5 = 29$$$;$$$Reverse(1)$$$ $$$\\\\to$$$ $$$\\\\{0,7,8,8,1,7,2,5\\\\}$$$;$$$Swap(2)$$$ $$$\\\\to$$$ $$$\\\\{1,7,2,5,0,7,8,8\\\\}$$$;$$$Sum(1, 6)$$$ $$$\\\\to$$$ $$$1 + 7 + 2 + 5 + 0 + 7 = 22$$$;$$$Reverse(3)$$$ $$$\\\\to$$$ $$$\\\\{8,8,7,0,5,2,7,1\\\\}$$$;$$$Replace(5, 16)$$$ $$$\\\\to$$$ $$$\\\\{8,8,7,0,16,2,7,1\\\\}$$$;$$$Sum(8, 8)$$$ $$$\\\\to$$$ $$$1$$$;$$$Swap(0)$$$ $$$\\\\to$$$ $$$\\\\{8,8,0,7,2,16,1,7\\\\}$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "173f5ee1", "template_md5": "35d339e4", "result": "You are given an array  $a$ of length $2^n$. You need to process $q$ queries on this array. Each query can be one of four types:\n\n* **Replace(x, k):** Change the element at index $x$ to $k$.\n* **Reverse(k):** Reverse each subarray of length $2^k$ within the array.\n* **Swap(k):** Swap the two subarrays of length $2^k$ within the array.\n* **Sum(l, r):** Calculate the sum of elements in the subarray from index $l$ to $r$.\n\nWrite a program that can efficiently process these queries.\n\n**Input:**\n\n* The first line contains two integers $n$ and $q$ ($0 \\le n \\le 18$; $1 \\le q \\le 10^5$) representing the length of the array and the number of queries.\n* The second line contains $2^n$ integers $a_1, a_2, ..., a_{2^n}$ ($0 \\le a_i \\le 10^9$) representing the initial elements of the array.\n* The next $q$ lines each contain a query in one of the four formats described above.\n\n**Output:**\n\n* For each **Sum(l, r)** query, print the sum of the elements in the subarray from index $l$ to $r$."}, {"prompt_md5": "8c91c910", "template_md5": "465699a0", "result": "You are given a list of numbers. You need to perform several operations on the list:\n\n* **Replace:** Change a specific number in the list.\n* **Reverse:** Reverse a section of the list.\n* **Swap:** Swap two sections of the list.\n* **Sum:** Calculate the sum of a section of the list.\n\nAfter each operation, you need to be able to quickly calculate the sum of a given section of the list."}]}