{"uid": "2021-C1", "url": "https://codeforces.com/contest/2021/problem/C1", "tags": ["constructive algorithms", " greedy"], "title": "2021-C1", "statement": "C1. Adjust The Presentation (Easy Version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the easy version of the problem. In the two versions, the constraints on $$$q$$$ and the time limit are different. In this version, $$$q=0$$$. You can make hacks only if all the versions of the problem are solved.A team consisting of $$$n$$$ members, numbered from $$$1$$$ to $$$n$$$, is set to present a slide show at a large meeting. The slide show contains $$$m$$$ slides.There is an array $$$a$$$ of length $$$n$$$. Initially, the members are standing in a line in the order of $$$a_1, a_2, \\\\ldots, a_n$$$ from front to back. The slide show will be presented in order from slide $$$1$$$ to slide $$$m$$$. Each section will be presented by the member at the front of the line. After each slide is presented, you can move the member at the front of the line to any position in the lineup (without changing the order of the rest of the members). For example, suppose the line of members is $$$[\\\\color{red}{3},1,2,4]$$$. After member $$$3$$$ presents the current slide, you can change the line of members into either $$$[\\\\color{red}{3},1,2,4]$$$, $$$[1,\\\\color{red}{3},2,4]$$$, $$$[1,2,\\\\color{red}{3},4]$$$ or $$$[1,2,4,\\\\color{red}{3}]$$$.There is also an array $$$b$$$ of length $$$m$$$. The slide show is consideredgoodif it is possible to make member $$$b_i$$$ present slide $$$i$$$ for all $$$i$$$ from $$$1$$$ to $$$m$$$ under these constraints.However, your annoying boss wants to make $$$q$$$ updates to the array $$$b$$$. In the $$$i$$$-th update, he will choose a slide $$$s_i$$$ and a member $$$t_i$$$ and set $$$b_{s_i} := t_i$$$. Note that these updates arepersistent, that is changes made to the array $$$b$$$ will apply when processing future updates.For each of the $$$q+1$$$ states of array $$$b$$$, the initial state and after each of the $$$q$$$ updates, determine if the slideshow is good.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$). The description of the test cases follows.The first line of each test case contains three integers $$$n$$$, $$$m$$$ and $$$q$$$ ($$$1 \\\\le n, m \\\\le 2 \\\\cdot 10^5$$$; $$$q=0$$$) — the number of members, the number of sections and the number of updates.The second line of each test case contains $$$n$$$ integers $$$a_1,a_2,\\\\ldots,a_n$$$ ($$$1 \\\\le a_i \\\\le n$$$) — the initial order of the members from front to back. It is guaranteed that each integer from $$$1$$$ to $$$n$$$ appears exactly once in $$$a$$$.The third line of each test case contains $$$m$$$ integers $$$b_1, b_2, \\\\ldots, b_m$$$ ($$$1 \\\\le b_i \\\\le n$$$) — the members who should present each section.It is guaranteed that the sum of $$$n$$$ and the sum of $$$m$$$ over all test cases do not exceed $$$2 \\\\cdot 10^5$$$ respectively.OutputFor each test case, output $$$q+1$$$ lines corresponding to the $$$q+1$$$ states of the array $$$b$$$. Output \"YA\" if the slide show is good, and \"TIDAK\" otherwise.You can output the answer in any case (upper or lower). For example, the strings \"yA\", \"Ya\", \"ya\", and \"YA\" will be recognized as positive responses.ExampleInput34 2 01 2 3 41 13 6 01 2 31 1 2 3 3 24 6 03 1 4 23 1 1 2 3 4OutputYA YA TIDAKNoteFor the first test case, you do not need to move the members as both slides are presented by member $$$1$$$, who is already at the front of the line.For the second test case, the following is a possible way to move members so that the presentation is good:$$$[1,2,3]$$$, do not move member $$$1$$$.$$$[1,2,3]$$$, move member $$$1$$$ after member $$$3$$$.$$$[2,3,1]$$$, move member $$$2$$$ after member $$$3$$$.$$$[3,2,1]$$$, do not move member $$$3$$$.$$$[3,2,1]$$$, move member $$$3$$$ after member $$$1$$$.$$$[2,1,3]$$$, do not move member $$$2$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "0005f8c8", "template_md5": "35d339e4", "result": "You are given an array of $n$ members, initially arranged in a line according to the order in array $a$. There are $m$ slides to be presented, and each slide should be presented by a specific member, as indicated in array $b$.\n\nAfter each slide is presented, you can move the member at the front of the line to any position in the lineup.\n\nThe goal is to determine if it is possible to arrange the members such that member $b_i$ presents slide $i$ for all $i$ from 1 to $m$.\n\nThere are $q$ updates to the array $b$. In each update, you will be given a slide number $s_i$ and a member number $t_i$, and you must change $b_{s_i}$ to $t_i$.\n\nFor each state of the array $b$ (the initial state and after each update), determine if the slideshow is \"good\" (meaning it is possible to arrange the members as described above).\n\nOutput \"YA\" if the slideshow is good, and \"TIDAK\" otherwise."}, {"prompt_md5": "89e95b6f", "template_md5": "465699a0", "result": "You have a line of people and a list of slides. Each slide must be presented by a specific person. After each slide, you can rearrange the line of people.  Determine if it's possible to present all the slides according to the list, given that the line of people can be rearranged after each slide."}]}