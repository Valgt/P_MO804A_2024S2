{"uid": "346-D", "url": "https://codeforces.com/contest/346/problem/D", "tags": ["dp", " graphs", " shortest paths"], "title": "346-D", "statement": "D. Robot Controltime limit per test6 secondsmemory limit per test256 megabytesinputstdinoutputstdoutThe boss of the Company of Robot is a cruel man. His motto is \"Move forward Or Die!\". And that is exactly what his company's product do. Look at the behavior of the company's robot when it is walking in the directed graph. This behavior has been called \"Three Laws of Robotics\":Law 1. The Robot will destroy itself when it visits a vertex of the graph which it has already visited.Law 2. The Robot will destroy itself when it has no way to go (that is when it reaches a vertex whose out-degree is zero).Law 3. The Robot will move randomly when it has multiple ways to move (that is when it reach a vertex whose out-degree is more than one). Of course, the robot can move only along the directed edges of the graph.Can you imagine a robot behaving like that? That's why they are sold at a very low price, just for those who are short of money, including mzry1992, of course. mzry1992 has such a robot, and she wants to move it from vertexsto vertextin a directed graph safely without self-destruction. Luckily, she can send her robot special orders at each vertex. A special order shows the robot which way to move, if it has multiple ways to move (to prevent random moving of the robot according to Law 3). When the robot reaches vertext, mzry1992 takes it off the graph immediately. So you can see that, as long as there exists a path fromstot, she can always find a way to reach the goal (whatever the vertexthas the outdegree of zero or not).Sample 2However, sending orders is expensive, so your task is to find the minimum number of orders mzry1992 needs to send in the worst case. Please note that mzry1992 can give orders to the robotwhile it is walkingon the graph. Look at the first sample to clarify that part of the problem.InputThe first line contains two integersn(1 ≤n≤ 106) — the number of vertices of the graph, andm(1 ≤m≤ 106) — the number of edges. Thenmlines follow, each with two integersuiandvi(1 ≤ui,vi≤n;vi≠ui), these integers denote that there is a directed edge from vertexuito vertexvi. The last line contains two integerssandt(1 ≤s,t≤n).It is guaranteed that there are no multiple edges and self-loops.OutputIf there is a way to reach a goal, print the required minimum number of orders in the worst case. Otherwise, print -1.ExamplesInput4 61 22 11 33 12 43 41 4Output1Input4 51 22 11 32 43 41 4Output1NoteConsider the first test sample. Initially the robot is on vertex 1. So, on the first step the robot can go to vertex 2 or 3. No matter what vertex the robot chooses, mzry1992 must give an order to the robot. This order is to go to vertex 4. If mzry1992 doesn't give an order to the robot at vertex 2 or 3, the robot can choose the \"bad\" outgoing edge (return to vertex 1) according Law 3. So, the answer is one.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "d9936027", "template_md5": "35d339e4", "result": "You are given a directed graph with $n$ vertices and $m$ edges.  The robot starts at vertex $s$ and needs to reach vertex $t$. The robot follows these rules:\n\n1. If the robot visits a vertex it has already visited, it self-destructs.\n2. If the robot reaches a vertex with no outgoing edges, it self-destructs.\n3. If the robot reaches a vertex with multiple outgoing edges, it chooses a random edge to follow.\n\nYou can send the robot orders at each vertex to tell it which edge to take.  \n\nFind the minimum number of orders you need to send to ensure the robot reaches vertex $t$ without self-destructing. If it's impossible to reach $t$ safely, output -1."}, {"prompt_md5": "74b98d81", "template_md5": "465699a0", "result": "You are given a directed graph with a starting vertex and a target vertex. A robot moves through the graph following these rules:\n\n1. If it visits a vertex it has already been to, it self-destructs.\n2. If it reaches a vertex with no outgoing edges, it self-destructs.\n3. If it reaches a vertex with multiple outgoing edges, it chooses a random edge to follow.\n\nYou can give the robot instructions at each vertex to tell it which edge to take.  Find the minimum number of instructions needed to get the robot from the starting vertex to the target vertex without it self-destructing. If it's impossible, return -1."}]}