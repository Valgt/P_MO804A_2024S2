{"uid": "1685-C", "url": "https://codeforces.com/contest/1685/problem/C", "tags": ["brute force", " constructive algorithms", " greedy"], "title": "1685-C", "statement": "C. Bring Balancetime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputAlina has a bracket sequence $$$s$$$ of length $$$2n$$$, consisting of $$$n$$$ opening brackets'('and $$$n$$$ closing brackets')'. As she likes balance, she wants to turn this bracket sequence into a balanced bracket sequence.In one operation, she can reverse any substring of $$$s$$$.What's the smallest number of operations that she needs to turn $$$s$$$ into a balanced bracket sequence? It can be shown that it's always possible in at most $$$n$$$ operations.As a reminder, a sequence of brackets is called balanced if one can turn it into a valid math expression by adding characters+and1. For example, sequences(())(),(), and(()(()))are balanced, while)(,((), and(()))(are not.InputThe first line of the input contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 2 \\\\cdot 10^4$$$)  — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 10^5$$$).The second line of each test case contains a string $$$s$$$ of length $$$2n$$$, consisting of $$$n$$$ opening and $$$n$$$ closing brackets.The sum of $$$n$$$ over all test cases doesn't exceed $$$2\\\\cdot 10^5$$$.OutputFor each test case, in the first line output a single integer $$$k$$$ $$$(0 \\\\le k \\\\le n)$$$  — the smallest number of operations required.The $$$i$$$-th of the next $$$k$$$ lines should contain two integers $$$l_i, r_i$$$ ($$$1 \\\\le l_i \\\\le r_i \\\\le 2n$$$), indicating that in the $$$i$$$-th operation, Alina will reverse the substring $$$s_ls_{l+1} \\\\ldots s_{r-1}s_r$$$. Here the numeration starts from $$$1$$$.If there are multiple sequences of operations with the smallest length which transform the sequence into a balanced one, you can output any of them.ExampleInput32(())5())((()))(6())((()))(()Output0 2 3 4 9 10 1 2 11NoteIn the first test case, the string is already balanced.In the second test case, the string will be transformed as follows:())((()))($$$\\\\to$$$()()(()))($$$\\\\to$$$()()(())(), where the last string is balanced.In the third test case, the string will be transformed to((()))((())), which is balanced.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "c2ca20e6", "template_md5": "35d339e4", "result": "You are given a string of $2n$ characters consisting of $n$ opening brackets '(' and $n$ closing brackets ')'.  You can reverse any substring of the string in one operation. What is the minimum number of operations needed to make the string a balanced bracket sequence?\n\nA balanced bracket sequence can be turned into a valid mathematical expression by adding '+' and '1' characters. For example, \"((()))\" and \"()\" are balanced, while \")((\" is not.\n\n\nInput:\n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le 2 \\cdot 10^4$).\nEach test case has two lines:\n* The first line contains an integer $n$ ($1 \\le n \\le 10^5$) representing the length of the bracket sequence.\n* The second line contains the bracket sequence of length $2n$.\n\nOutput:\n\nFor each test case, output:\n* The minimum number of operations $k$ ($0 \\le k \\le n$).\n* $k$ lines, each containing two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le 2n$), representing the substring reversed in the $i$-th operation."}, {"prompt_md5": "3ca853db", "template_md5": "465699a0", "result": "You are given a string of parentheses. You can reverse any substring of the string in one operation. What is the minimum number of operations needed to make the string of parentheses balanced?"}]}