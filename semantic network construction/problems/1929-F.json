{"uid": "1929-F", "url": "https://codeforces.com/contest/1929/problem/F", "tags": ["brute force", " combinatorics", " data structures", " dfs and similar", " math", " trees"], "title": "1929-F", "statement": "F. Sasha and the Wedding Binary Search Treetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputHaving overcome all the difficulties and hardships, Sasha finally decided to marry his girlfriend. To do this, he needs to give her an engagement ring. However, his girlfriend does not like such romantic gestures, but she does like binary search trees$$$^{\\\\dagger}$$$. So Sasha decided to give her such a tree.After spending a lot of time on wedding websites for programmers, he found the perfect binary search tree with the root at vertex $$$1$$$. In this tree, the value at vertex $$$v$$$ is equal to $$$val_v$$$.But after some time, he forgot the values in some vertices. Trying to remember the found tree, Sasha wondered — how many binary search trees could he have found on the website, if it is known that the values in all vertices are integers in the segment $$$[1, C]$$$. Since this number can be very large, output it modulo $$$998\\\\,244\\\\,353$$$.$$$^{\\\\dagger}$$$A binary search tree is a rooted binary tree in which for any vertex $$$x$$$, the following property holds: the values of all vertices in the left subtree of vertex $$$x$$$ (if it exists) are less than or equal to the value at vertex $$$x$$$, and the values of all vertices in the right subtree of vertex $$$x$$$ (if it exists) are greater than or equal to the value at vertex $$$x$$$.InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^5$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$C$$$ ($$$2 \\\\leq n \\\\leq 5 \\\\cdot 10^5$$$, $$$1 \\\\leq C \\\\leq 10^9$$$) — the number of vertices in the tree and the maximum allowed value at the vertex.The next $$$n$$$ lines describe the vertices of the tree. The $$$i$$$-th line contains three integers $$$L_i, R_i$$$ and $$$val_i$$$ ($$$-1 \\\\le L_i, R_i \\\\le n$$$, $$$-1 \\\\le val_i \\\\le C$$$, $$$L_i, R_i, val_i \\\\ne 0$$$) — the number of the left child, the number of the right child, and the value at the $$$i$$$-th vertex, respectively. If $$$L_i = -1$$$, then the $$$i$$$-th vertex has no left son. If $$$R_i = -1$$$, then the $$$i$$$-th vertex has no right son. If $$$val_i = -1$$$, then the value at the $$$i$$$-th vertex is unknown.It is guaranteed that at least one suitable binary search tree exists.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5 \\\\cdot 10^5$$$.OutputFor each test case, output a single integer — the number of suitable binary search trees modulo $$$998\\\\,244\\\\,353$$$.ExampleInput35 52 3 -1-1 -1 24 -1 3-1 5 -1-1 -1 -13 692 3 47-1 -1 13-1 -1 693 32 3 -1-1 -1 -1-1 -1 -1Output4 1 10NoteIn the first test case, the binary search tree has the following form:Then the possible values at the vertices are: $$$[2, 2, 3, 2, 2]$$$, $$$[2, 2, 3, 2, 3]$$$, $$$[2, 2, 3, 3, 3]$$$, and $$$[3, 2, 3, 3, 3]$$$.In the second test case, the values at all vertices are known, so there is only one suitable binary search tree.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "58117d47", "template_md5": "35d339e4", "result": "You are given a binary search tree with $n$ vertices, where each vertex has a value between 1 and $C$. Some of the values are unknown.  \n\nYou need to find the number of different binary search trees that could have been the original tree, given the known values and the constraint that all values are between 1 and $C$.  \n\nOutput the answer modulo $998244353$.\n\n**Input:**\n\n* The first line contains the number of test cases, $t$.\n* For each test case:\n    * The first line contains two integers, $n$ (the number of vertices) and $C$ (the maximum allowed value).\n    * The next $n$ lines describe the tree. Each line contains three integers:\n        * $L_i$: The index of the left child of vertex $i$ (-1 if there is no left child).\n        * $R_i$: The index of the right child of vertex $i$ (-1 if there is no right child).\n        * $val_i$: The value of vertex $i$ (-1 if the value is unknown).\n\n**Output:**\n\n* For each test case, output the number of possible binary search trees modulo $998244353$."}, {"prompt_md5": "aad37251", "template_md5": "465699a0", "result": "You are given a tree with a specific structure. Some of the values in the tree are missing. You need to find out how many different sets of values can be placed in the missing spots so that the tree remains a valid binary search tree, where each node's value is greater than all values in its left subtree and less than all values in its right subtree. The values must be integers within a given range.  The answer should be the count of possible trees modulo 998244353."}]}