{"uid": "1856-A", "url": "https://codeforces.com/contest/1856/problem/A", "tags": ["implementation"], "title": "1856-A", "statement": "A. Tales of a Sorttime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputAlphen has an array of positive integers $$$a$$$ of length $$$n$$$.Alphen can perform the following operation:Forall$$$i$$$ from $$$1$$$ to $$$n$$$, replace $$$a_i$$$ with $$$\\\\max(0, a_i - 1)$$$.Alphen will perform the above operation until $$$a$$$ is sorted, that is $$$a$$$ satisfies $$$a_1 \\\\leq a_2 \\\\leq \\\\ldots \\\\leq a_n$$$. How many operations will Alphen perform? Under the constraints of the problem, it can be proven that Alphen will perform a finite number of operations.InputEach test contains multiple test cases. The first line of input contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 500$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$2 \\\\le n \\\\le 50$$$) — the length of the array $$$a$$$.The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\\\dots, a_n$$$ ($$$1 \\\\le a_i \\\\le 10 ^ 9$$$) — the elements of the array $$$a$$$.OutputFor each test case, output a single integer — the number of operations that Alphen will perform.ExampleInput731 2 352 1 2 1 243 1 5 427 754 1 3 2 552 3 1 4 531000000000 1 2Output0 2 5 0 4 3 1000000000NoteIn the first test case, we have $$$a=[1,2,3]$$$. Since $$$a$$$ is already sorted, Alphen will not need to perform any operations. So, the answer is $$$0$$$.In the second test case, we have $$$a=[2,1,2,1,2]$$$. Since $$$a$$$ is not initially sorted, Alphen will perform one operation to make $$$a=[1,0,1,0,1]$$$. After performing one operation, $$$a$$$ is still not sorted, so Alphen will perform another operation to make $$$a=[0,0,0,0,0]$$$. Since $$$a$$$ is sorted, Alphen will not perform any other operations. Since Alphen has performed two operations in total, the answer is $$$2$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "c08f3b69", "template_md5": "465699a0", "result": "You are given a list of numbers. You can repeatedly decrease each number by 1, but you can't make a number negative. What is the fewest times you need to do this to make the list of numbers sorted in increasing order?"}, {"prompt_md5": "ea47f4f2", "template_md5": "35d339e4", "result": "You are given an array of positive integers $a$ of length $n$. You can perform the following operation on the array: for all $i$ from 1 to $n$, replace $a_i$ with $\\max(0, a_i - 1)$.  \n\nYou can perform this operation repeatedly until the array is sorted in non-decreasing order ($a_1 \\le a_2 \\le ... \\le a_n$).\n\nFor each test case, find the minimum number of operations required to sort the array."}]}