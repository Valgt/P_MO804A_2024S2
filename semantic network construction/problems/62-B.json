{"uid": "62-B", "url": "https://codeforces.com/contest/62/problem/B", "tags": ["binary search", " implementation"], "title": "62-B", "statement": "B. Tyndex.Brometime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutTyndex is again well ahead of the rivals! The reaction to the release of Zoozle Chrome browser was the release of a new browser Tyndex.Brome!The popularity of the new browser is growing daily. And the secret is not even the Tyndex.Bar installed (the Tyndex.Bar automatically fills the glass with the finest 1664 cognac after you buy Tyndex.Bottles and insert in into a USB port). It is highly popular due to the well-thought interaction with the user.Let us take, for example, the system of automatic address correction. Have you enteredcodehorsesinstead ofcodeforces? The gloomy Zoozle Chrome will sadly say that the address does not exist. Tyndex.Brome at the same time will automatically find the closest address and sent you there. That's brilliant!How does this splendid function work? That's simple! For each potential address a function of theFerror is calculated by the following rules:for every lettercifrom the potential addresscthe closest positionjof the letterciin the address (s) entered by the user is found. The absolute difference|i-j|of these positions is added toF. So for everyi(1 ≤i≤ |c|) the positionjis chosen such, thatci=sj, and|i-j|is minimal possible.if no such letterciexists in the address entered by the user, then the length of the potential address|c|is added toF.After the values of the error function have been calculated for all the potential addresses the most suitable one is found.To understand the special features of the above described method better, it is recommended to realize the algorithm of calculating theFfunction for an address given by the user and some set of potential addresses. Good luck!InputThe first line contains two integersnandk(1 ≤n≤ 105, 1 ≤k≤ 105). They are the number of potential addresses and the length of the address entered by the user. The next line containsklowercase Latin letters. They are the address entered by the user (s). Each nexti-th (1 ≤i≤n) line contains a non-empty sequence of lowercase Latin letters. They are the potential address. It is guaranteed that the total length of all the lines does not exceed2·105.OutputOn eachnline of the output file print a single number: the value of the error function when the current potential address is chosen.Please, do not use%lldspecificator to read or write 64-bit integers in C++. It is preffered to usecout(also you may use%I64d).ExamplesInput2 10codeforcescodeforcescodehorsesOutput012Input9 9vkontaktevcontactevkontraktevkollapsevkrokodilevtopkevkapustevpechkevkvcodeforceseOutput18143647142930084", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "e0483a52", "template_md5": "35d339e4", "result": "You are given a user-entered address of length $n$ and $k$ potential addresses.  For each potential address, calculate the \"error function\" $F$ as follows:\n\n1. For each letter $c_i$ in the potential address, find the closest position $j$ in the user-entered address where $c_i$ appears. \n2. Add the absolute difference $|i-j|$ to $F$.\n3. If a letter $c_i$ from the potential address does not appear in the user-entered address, add the length of the potential address to $F$.\n\nOutput the error function $F$ for each potential address. \n\n\n\nLet me know if you'd like help with the code implementation as well!"}, {"prompt_md5": "28551836", "template_md5": "465699a0", "result": "You are given a target string and a list of candidate strings. For each candidate string, calculate the \"error\" by finding the closest matching letter in the target string for each letter in the candidate string. The error is the sum of the distances between these matching letters. If a letter in the candidate string doesn't have a match in the target string, add the length of the candidate string to the error. Output the error for each candidate string."}]}