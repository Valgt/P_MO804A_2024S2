{"uid": "311-A", "url": "https://codeforces.com/contest/311/problem/A", "tags": ["constructive algorithms", " implementation"], "title": "311-A", "statement": "A. The Closest Pairtime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutCurrently Tiny is learning Computational Geometry. When trying to solve a problem called \"The Closest Pair Of Points In The Plane\", he found that a code which gave a wrong time complexity got Accepted instead of Time Limit Exceeded.The problem is the follows. Givennpoints in the plane, find a pair of points between which the distance is minimized. Distance between(x1,y1)and(x2,y2)is.The pseudo code of the unexpected code is as follows:input nfor i from 1 to ninput the i-th point's coordinates into p[i]sort array p[] by increasing of x coordinate first and increasing of y coordinate secondd=INF        //here INF is a number big enoughtot=0for i from 1 to nfor j from (i+1) to n++totif (p[j].x-p[i].x>=d) then break    //notice that \"break\" is only to be//out of the loop \"for j\"d=min(d,distance(p[i],p[j]))output dHere,totcan be regarded as the running time of the code. Due to the fact that a computer can only run a limited number of operations per second,totshould not be more thankin order not to get Time Limit Exceeded.You are a great hacker. Would you please help Tiny generate a test data and let the code get Time Limit Exceeded?InputA single line which contains two space-separated integersnandk(2 ≤n≤ 2000,1 ≤k≤ 109).OutputIf there doesn't exist such a data which let the given code get TLE, print \"no solution\" (without quotes); else printnlines, and thei-th line contains two integersxi,yi(|xi|, |yi| ≤ 109)representing the coordinates of thei-th point.The conditions below must be held:All the points must be distinct.|xi|, |yi| ≤ 109.After running the given code, the value oftotshould be larger thank.ExamplesInput4 3Output0 00 11 01 1Input2 100Outputno solution", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "daa84ba9", "template_md5": "35d339e4", "result": "You are given a program that finds the closest pair of points in a set of points in a 2D plane. The program has a time complexity that is not optimal. \n\n**Input:**\n\n*  The first line contains two integers, *n* and *k*, where *n* is the number of points and *k* is a time limit.\n\n**Output:**\n\n* If it is possible to create a set of *n* points that will cause the program to exceed the time limit *k*, output *n* lines, each containing two integers *x* and *y*, representing the coordinates of a point. \n* If it is not possible to create such a set of points, output \"no solution\".\n\n**Constraints:**\n\n* $2 \\le n \\le 2000$\n* $1 \\le k \\le 10^9$\n* All points must be distinct.\n*  $|x|, |y| \\le 10^9$\n\n\n\n**Program Description:**\n\nThe program works as follows:\n\n1.  It takes *n* points as input.\n2.  It sorts the points first by their x-coordinate and then by their y-coordinate.\n3.  It initializes a variable *d* to a very large number (representing infinity) and a counter *tot* to 0.\n4.  It iterates through each point *p[i]*.\n5.  For each point *p[i]*, it iterates through all subsequent points *p[j]*.\n6.  If the difference in x-coordinates between *p[j]* and *p[i]* is greater than or equal to *d*, it breaks out of the inner loop.\n7.  It calculates the distance between *p[i]* and *p[j]*.\n8.  If this distance is less than *d*, it updates *d* to this new distance.\n9.  The counter *tot* is incremented in each iteration of the nested loops.\n10. Finally, it outputs the value of *d*.\n\n\n\n**Challenge:**\n\nYour task is to find a set of *n* points that will cause the program to take more than *k* time units to execute."}, {"prompt_md5": "726774ac", "template_md5": "465699a0", "result": "Given a list of points in a plane, find the two points that are closest to each other.  \n\nYou are given a program that attempts to solve this problem.  Find a set of points that will cause the program to take too long to run."}]}