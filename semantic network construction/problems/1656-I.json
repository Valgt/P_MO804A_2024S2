{"uid": "1656-I", "url": "https://codeforces.com/contest/1656/problem/I", "tags": ["constructive algorithms", " graphs"], "title": "1656-I", "statement": "I. Neighbour Orderingtime limit per test5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputGiven an undirected graph $$$G$$$, we say that aneighbour orderingis an ordered list of all the neighbours of a vertex for each of the vertices of $$$G$$$. Consider a given neighbour ordering of $$$G$$$ and three vertices $$$u$$$, $$$v$$$ and $$$w$$$, such that $$$v$$$ is a neighbor of $$$u$$$ and $$$w$$$. We write $$$u <_{v} w$$$ if $$$u$$$ comes after $$$w$$$ in $$$v$$$'s neighbor list.A neighbour ordering is said to begoodif, for each simple cycle $$$v_1, v_2, \\\\ldots, v_c$$$ of the graph, one of the following is satisfied:$$$v_1 <_{v_2} v_3, v_2 <_{v_3} v_4, \\\\ldots, v_{c-2} <_{v_{c-1}} v_c, v_{c-1} <_{v_c} v_1, v_c <_{v_1} v_2$$$.$$$v_1 >_{v_2} v_3, v_2 >_{v_3} v_4, \\\\ldots, v_{c-2} >_{v_{c-1}} v_c, v_{c-1} >_{v_c} v_1, v_c >_{v_1} v_2$$$.Given a graph $$$G$$$, determine whether there exists a good neighbour ordering for it and construct one if it does.InputThe input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\\\leq t \\\\leq 10^4$$$) â€” the number of test cases. Description of the test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\\\leq n \\\\leq 3 \\\\cdot 10^5$$$, $$$1 \\\\leq m \\\\leq 3 \\\\cdot 10^5$$$), the number of vertices and the number of edges of the graph.The next $$$m$$$ lines each contain two integers $$$u, v$$$ ($$$0 \\\\leq u, v < n$$$), denoting that there is an edge connecting vertices $$$u$$$ and $$$v$$$. It is guaranteed that the graph is connected and there are no loops or multiple edges between the same vertices.The sum of $$$n$$$ and the sum of $$$m$$$ for all test cases are at most $$$3 \\\\cdot 10^5$$$.OutputFor each test case, output one line withYESif there is a good neighbour ordering, otherwise output one line withNO. You can print each letter in any case (upper or lower).If the answer isYES, additionally output $$$n$$$ lines describing a good neighbour ordering. In the $$$i$$$-th line, output the neighbours of vertex $$$i$$$ in order.If there are multiple good neigbour orderings, print any.ExampleInput35 60 10 21 22 33 44 12 10 16 100 12 00 30 41 21 42 32 53 54 5OutputYES 1 2  4 2 0  0 1 3  2 4  3 1  YES 1  0  NO", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "979e7dd4", "template_md5": "35d339e4", "result": "You are given a connected graph with $n$ vertices and $m$ edges.  \n\nA \"neighbor ordering\" is a way to list the neighbors of each vertex in the graph.  \n\nA neighbor ordering is \"good\" if for every cycle in the graph, the following condition holds:\n\n* For each vertex $v_i$ in the cycle, the vertex $v_{i+1}$ (where the indices wrap around) comes either before or after $v_{i-1}$ in the neighbor list of $v_i$.\n\nDetermine if there exists a good neighbor ordering for the given graph. If so, provide one example of a good neighbor ordering."}, {"prompt_md5": "79b8c90a", "template_md5": "465699a0", "result": "You are given a connected graph.  A \"good\" ordering of the neighbors of each vertex must be found so that for every cycle in the graph, the order of vertices in the cycle follows a specific pattern when looking at the neighbor lists. Determine if such a good ordering exists and, if so, provide one."}]}