{"uid": "1918-E", "url": "https://codeforces.com/contest/1918/problem/E", "tags": ["constructive algorithms", " divide and conquer", " implementation", " interactive", " probabilities", " sortings"], "title": "1918-E", "statement": "E. ace5 and Task Ordertime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an interactive problem!In the new round, there were $$$n$$$ tasks with difficulties from $$$1$$$ to $$$n$$$. The coordinator, who decided to have the first round with tasks in unsorted order of difficulty, rearranged the tasks, resulting in a permutation of difficulties from $$$1$$$ to $$$n$$$. After that, the coordinator challenged ace5 to guess the permutation in the following way.Initially, the coordinator chooses a number $$$x$$$ from $$$1$$$ to $$$n$$$.ace5 can make queries of the form: $$$?\\\\ i$$$. The answer will be:$$$>$$$, if $$$a_i > x$$$, after which $$$x$$$ increases by $$$1$$$.$$$<$$$, if $$$a_i < x$$$, after which $$$x$$$ decreases by $$$1$$$.$$$=$$$, if $$$a_i = x$$$, after which $$$x$$$ remains unchanged.The task for ace5 is to guess the permutation in no more than $$$40n$$$ queries. Since ace5 is too busy writing the announcement, he has entrusted this task to you.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\leq t \\\\leq 1000$$$) — the number of test cases.InteractionThe interaction between your program and the jury's program begins with reading a positive integer $$$n$$$ ($$$1 \\\\leq n \\\\leq 2000$$$) — the length of the hidden permutation.To make a query, output a line in the format \"? i\", where $$$1 \\\\leq i \\\\leq n$$$.As an answer, you will receive:\">\", if $$$a_i$$$ > $$$x$$$, after which $$$x$$$ will increase by $$$1$$$.\"<\", if $$$a_i$$$ < $$$x$$$, after which $$$x$$$ will decrease by $$$1$$$.\"=\", if $$$a_i$$$ = $$$x$$$, after which $$$x$$$ will remain unchanged.You can make no more than $$$40n$$$ queries. To output the answer, you need to print \"! a_1 a_2 ... a_n\", where $$$1 \\\\leq a_i \\\\leq n$$$, and all of them are distinct. Outputting the answerdoes not countas a query.If your program makes more than $$$40n$$$ queries for one test case, or makes an invalid query, then theresponse to the query will be-1. After receiving such a response, your program should immediately terminate to receive the verdictWrong Answer. Otherwise, it may receive any other verdict.After outputting a query, do not forget to print a newline and flush the output buffer. Otherwise, you will receive the verdictPresentation Error. To flush the buffer, use:fflush(stdout)orcout.flush()in C++;System.out.flush()in Java;flush(output)in Pascal;stdout.flush()in Python;see the documentation for other languages.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2000$$$.The interactor in this problem isnot adaptive.Hacks:To make a hack, use the following format:The first line contains a single integer $$$t$$$ — the number of test cases.The description of each test case should consist of two lines. The first line contains the numbers $$$n$$$ and $$$x$$$ ($$$1 \\\\leq x \\\\leq n \\\\leq 2000$$$) — the length of the hidden permutation and the initial value of the number $$$x$$$. The second line contains $$$n$$$ distinct numbers $$$a_1, a_2, \\\\ldots, a_n$$$ ($$$1 \\\\leq a_i \\\\leq n$$$) — the permutation that the jury should choose in this test case.Sum of $$$n$$$ over all test cases should not exceed $$$2000$$$.ExampleInput2 5  >  =  <  =  <  <  2  >Output? 4  ? 2  ? 1  ? 5  ? 1  ? 3  ! 2 4 1 5 3  ? 1  ! 2 1NoteIn the first test, the hidden permutation is $$$a$$$ = [$$$2,4,1,5,3$$$], and the initial value of $$$x$$$ is $$$3$$$.In the second test, the hidden permutation is $$$a$$$ = [$$$2,1$$$], and the initial value of $$$x$$$ is $$$1$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "d7b61447", "template_md5": "35d339e4", "result": "You are given a permutation of numbers from 1 to $n$. You need to find this permutation using a special query system.\n\nHere's how the query system works:\n\n1. You start with a number $x$.\n2. You can ask a question \"? i\" where $i$ is a number from 1 to $n$.\n3. The answer to the question will be:\n    * \">\", if the $i$-th element in the permutation is greater than $x$. After this, $x$ increases by 1.\n    * \"<\", if the $i$-th element in the permutation is less than $x$. After this, $x$ decreases by 1.\n    * \"=\", if the $i$-th element in the permutation is equal to $x$. After this, $x$ remains the same.\n\nYou can ask a maximum of $40n$ questions to find the permutation.\n\nTo give your answer, you need to output \"! a_1 a_2 ... a_n\" where $a_i$ is the $i$-th element in the permutation.\n\n**Example:**\n\nLet's say the hidden permutation is [2, 4, 1, 5, 3] and the initial value of $x$ is 3.\n\nYou could ask the following questions:\n\n* ? 4  (Answer: \">\") -> $x$ becomes 4\n* ? 2  (Answer: \"<\") -> $x$ becomes 3\n* ? 1  (Answer: \"<\") -> $x$ becomes 2\n* ? 5  (Answer: \">\") -> $x$ becomes 6\n* ? 1  (Answer: \"<\") -> $x$ becomes 5\n* ? 3  (Answer: \"<\") -> $x$ becomes 4\n\nNow you know the permutation is [2, 4, 1, 5, 3] and you can output \"! 2 4 1 5 3\"."}, {"prompt_md5": "aeccc95f", "template_md5": "465699a0", "result": "You need to guess a list of numbers in order. You can ask questions about the numbers in the list, but you only get a limited number of questions.  Each question tells you if a specific number in the list is higher, lower, or equal to a target number. The target number changes based on your previous questions.  You need to guess the entire list correctly within the allowed number of questions."}]}