{"uid": "1115-U1", "url": "https://codeforces.com/contest/1115/problem/U1", "tags": ["*special"], "title": "1115-U1", "statement": "U1. Anti-diagonal unitarytime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputImplement a unitary operation on $$$N$$$ qubits which is represented by an anti-diagonal matrix (a square matrix of size $$$2^N$$$ which has non-zero elements on the diagonal that runs from the top right corner to the bottom left corner and zero elements everywhere else).For example, for $$$N = 2$$$ the matrix of the operation should have the following shape:...X..X..X..X...HereXdenotes a \"non-zero\" element of the matrix (a complex number which has the square of the absolute value greater than or equal to $$$10^{-5}$$$), and.denotes a \"zero\" element of the matrix (a complex number which has the square of the absolute value less than $$$10^{-5}$$$).The row and column indices of the matrix follow little endian format: the least significant bit of the index is stored first in the qubit array. Thus, the first column of the matrix gives you the coefficients of the basis states you'll get if you apply the unitary to the $$$|00..0\\\\rangle$$$ basis state, the second column - to the $$$|10..0\\\\rangle$$$ basis state etc. You can use theDumpUnitary toolto get the coefficients of the matrix your unitary implements (up to relative phases between columns) and the corresponding pattern ofXs and.s.You have to implement an operation which takes an array of $$$N$$$ ($$$2 \\\\le N \\\\le 5$$$) qubits as an input and applies the unitary transformation with the matrix of the described shape to it. If there are multiple unitaries which satisfy the requirements, you can implement any of them. The \"output\" of your operation is the pattern of the matrix coefficients implemented by it; you can see the testing harness in theUnitaryPatternskata.Your code should have the following signature:namespace Solution {open Microsoft.Quantum.Primitive;open Microsoft.Quantum.Canon;operation Solve (qs : Qubit[]) : Unit {// your code here}}", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "0046f5f9", "template_md5": "35d339e4", "result": "You are given a number $N$ ($2 \\le N \\le 5$).  You need to write a program that performs a specific operation on $N$ qubits. This operation is represented by a square matrix of size $2^N$. The matrix has special properties:\n\n*  Non-zero elements are only on the anti-diagonal (from top right to bottom left).\n*  All other elements are very close to zero.\n\nThe program should take an array of $N$ qubits as input and apply this matrix operation to them.  \n\nThe output of your program is the pattern of the matrix elements.  \n\n\nYou can use a tool called \"DumpUnitary\" to help you understand the matrix structure and the pattern of non-zero elements."}, {"prompt_md5": "397779de", "template_md5": "465699a0", "result": "You are given a number of qubits.  You need to write a program that applies a specific type of transformation to these qubits. This transformation is defined by a pattern of \"on\" and \"off\" values in a matrix. The matrix has a special diagonal pattern. Your program should output the pattern of \"on\" and \"off\" values that it uses."}]}