{"uid": "1896-G", "url": "https://codeforces.com/contest/1896/problem/G", "tags": ["constructive algorithms", " implementation", " interactive", " sortings"], "title": "1896-G", "statement": "G. Pepe Racingtime limit per test5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an interactive problem.There are $$$n^2$$$ pepes labeled $$$1, 2, \\\\ldots, n^2$$$ withpairwise distinctspeeds. You would like to set up some races to find out the relative speed of these pepes.In one race, you can choose exactly $$$n$$$ distinct pepes and make them race against each other. After each race, you will only know thefastestpepe of these $$$n$$$ pepes.Can you order the $$$n^2-n+1$$$ fastest pepes inat most$$$2n^2 - 2n + 1$$$ races? Note that the slowest $$$n - 1$$$ pepes are indistinguishable from each other.Note that the interactor isadaptive. That is, the relative speeds of the pepes are not fixed in the beginning and may depend on your queries. But it is guaranteed that at any moment there is at least one initial configuration of pepes such that all the answers to the queries are consistent.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$). The description of the test cases follows.The only line of each test case contains a single integer $$$n$$$ ($$$2 \\\\le n \\\\le 20$$$) — the number of pepes in one race.After reading the integer $$$n$$$ for each test case, you should begin the interaction.It is guaranteed that the sum of $$$n^3$$$ over all test cases does not exceed $$$3 \\\\cdot 10^5$$$.InteractionTo set up a race, print a line with the following format:$$$\\\\mathtt{?}\\\\,x_1\\\\,x_2 \\\\ldots x_n$$$ ($$$1 \\\\le x_i \\\\le n^2$$$, $$$x_i$$$ are pairwise distinct) — the labels of the pepes in the race.After each race, you should read a line containing a single integer $$$p$$$ ($$$1\\\\le p\\\\le n^2$$$) — the label of the fastest pepe in the race.When you know the $$$n^2-n+1$$$ fastest pepes, print one line in the following format:$$$\\\\mathtt{!}\\\\,p_1\\\\,p_2 \\\\ldots p_{n^2 - n + 1}$$$ ($$$1 \\\\le p_i \\\\le n^2$$$, $$$p_i$$$ are pairwise distinct)where $$$p$$$ is the sequence of these pepe's labels in descending order of speed.After that, move on to the next test case, or terminate the program if no more test cases are remaining.If your program performs more than $$$2n^2 - 2n + 1$$$ races for one test case or makes an invalid race, you may receive a Wrong Answer verdict.After printing a query do not forget to output the end of the line and flush the output. Otherwise, you will getIdleness limit exceeded. To do this, use:fflush(stdout)orcout.flush()in C++;System.out.flush()in Java;flush(output)in Pascal;stdout.flush()in Python;see the documentation for other languages.Hack formatFor hacks, use the following format.The first line should contain $$$t$$$ — the number of test cases.The first line of each test case should contain an integer $$$n$$$ followed by the stringmanual.The second line of each test case should contain a permutation $$$a_1,a_2,\\\\ldots,a_{n^2}$$$ of the integers from $$$1$$$ to $$$n^2$$$. $$$a_i > a_j$$$ if and only if pepe $$$i$$$ has a faster speed than pepe $$$j$$$.As an example, the hack format for the example input is: $$$\\\\mathtt{1}\\\\\\\\\\\\mathtt{2}~\\\\mathtt{manual}\\\\\\\\\\\\mathtt{1}~\\\\mathtt{2}~\\\\mathtt{3}~\\\\mathtt{4}$$$ExampleInput1 2  2  4  4  3  2Output? 1 2  ? 3 4  ? 2 4  ? 2 3  ? 2 1  ! 4 3 2", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "c9f52067", "template_md5": "35d339e4", "result": "You are given $n^2$ objects, each with a unique speed. You can conduct races with $n$ objects at a time. After each race, you only learn the label of the fastest object in that race. \n\nYour goal is to determine the labels of the $n^2 - n + 1$ fastest objects using as few races as possible.  \n\n**Constraints:**\n\n* $2 \\le n \\le 20$\n* The total number of $n^3$ across all test cases does not exceed $3 \\cdot 10^5$.\n\n**Input:**\n\n* The first line contains the number of test cases, $t$.\n* For each test case, the first line contains the value of $n$.\n\n**Interaction:**\n\nTo start a race, print a line with the format \"? $x_1$ $x_2$ ... $x_n$\", where $x_i$ are the labels of the $n$ objects racing.\n\nAfter each race, the program will output a single integer, $p$, representing the label of the fastest object in that race.\n\nWhen you have determined the labels of the $n^2 - n + 1$ fastest objects, print a line with the format \"! $p_1$ $p_2$ ... $p_{n^2 - n + 1}$\", where $p_i$ are the labels of the fastest objects in descending order of speed.\n\n**Output:**\n\n* The program will output the labels of the fastest objects in descending order of speed.\n\n\n\nLet me know if you have any other questions."}, {"prompt_md5": "18737db1", "template_md5": "465699a0", "result": "You need to determine the fastest $n^2-n+1$ items out of $n^2$ items. You can compare groups of $n$ items at a time and only learn the fastest item in each group. What is the minimum number of comparisons needed to find the fastest $n^2-n+1$ items?"}]}