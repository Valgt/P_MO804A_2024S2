{"uid": "411-B", "url": "https://codeforces.com/contest/411/problem/B", "tags": ["implementation"], "title": "411-B", "statement": "B. Multi-core Processortime limit per test1 secondmemory limit per test256 megabytesinputstdinoutputstdoutThe research center Q has developed a new multi-core processor. The processor consists ofncores and haskcells of cache memory. Consider the work of this processor.At each cycle each core of the processor gets one instruction: either do nothing, or the number of the memory cell (the core will write an information to the cell). After receiving the command, the core executes it immediately. Sometimes it happens that at one cycle, multiple cores try to write the information into a single cell. Unfortunately, the developers did not foresee the possibility of resolving conflicts between cores, so in this case there is adeadlock: all these cores and the corresponding memory cell are locked forever. Each of the locked cores ignores all further commands, and no core in the future will be able to record an information into the locked cell. If any of the cores tries to write an information into some locked cell, it is immediately locked.The development team wants to explore the deadlock situation. Therefore, they need a program that will simulate the processor for a given set of instructions for each core withinmcycles . You're lucky, this interesting work is entrusted to you. According to the instructions, during themcycles define for each core the number of the cycle, during which it will become locked. It is believed that initially all cores and all memory cells are not locked.InputThe first line contains three integersn,m,k(1 ≤n,m,k≤ 100). Then follownlines describing instructions. Thei-th line containsmintegers:xi1,xi2, ...,xim(0 ≤xij≤k), wherexijis the instruction that must be executed by thei-th core at thej-th cycle. Ifxijequals 0, then the corresponding instruction is «do nothing». But ifxijis a number from 1 tok, then the corresponding instruction is «write information to the memory cell numberxij».We assume that the cores are numbered from 1 ton, the work cycles are numbered from 1 tomand the memory cells are numbered from 1 tok.OutputPrintnlines. In thei-th line print integerti. This number should be equal to 0 if thei-th core won't be locked, or it should be equal to the number of the cycle when this core will be locked.ExamplesInput4 3 51 0 01 0 22 3 13 2 0Output1130Input3 2 21 21 22 2Output110Input1 1 10Output0", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "916c4df5", "template_md5": "35d339e4", "result": "You are given a processor with $n$ cores and $k$ memory cells.  Each core can perform one of two actions in each cycle: do nothing or write to a specific memory cell.  \n\nIf multiple cores try to write to the same memory cell in the same cycle, all of those cores and the memory cell become locked forever. A locked core cannot perform any further actions.\n\nGiven a sequence of instructions for each core over $m$ cycles, determine the cycle number in which each core becomes locked, or 0 if the core never becomes locked.\n\n**Input:**\n\n* The first line contains three integers: $n$, $m$, and $k$.\n* The following $n$ lines describe the instructions for each core. The $i$-th line contains $m$ integers, where the $j$-th integer represents the instruction for the $i$-th core in the $j$-th cycle. An integer of 0 means \"do nothing\", and an integer from 1 to $k$ means \"write to memory cell number $x$\".\n\n**Output:**\n\nPrint $n$ lines, where the $i$-th line contains an integer representing the cycle number in which the $i$-th core becomes locked, or 0 if it never becomes locked."}, {"prompt_md5": "606c5834", "template_md5": "465699a0", "result": "You have a processor with multiple cores and a limited amount of memory. Each core can either do nothing or write data to a memory cell in each time step. If multiple cores try to write to the same cell at the same time, they all get stuck forever.  \n\nYour task is to determine, for each core, the time step in which it will get stuck, or 0 if it never gets stuck."}]}