{"uid": "225-D", "url": "https://codeforces.com/contest/225/problem/D", "tags": ["bitmasks", " dfs and similar", " graphs", " implementation"], "title": "225-D", "statement": "D. Snaketime limit per test4 secondsmemory limit per test256 megabytesinputstdinoutputstdoutLet us remind you the rules of a very popular game called \"Snake\" (or sometimes \"Boa\", \"Python\" or \"Worm\").The game field is represented by ann×mrectangular table. Some squares of the field are considered impassable (walls), all other squares of the fields are passable.You control a snake, the snake consists of segments. Each segment takes up exactly one passable square of the field, but any passable square contains at most one segment. All segments are indexed by integers from1tok, wherekis the snake's length. The1-th segment is the head and thek-th segment is the tail. For anyi(1 ≤i<k), segments with indexesiandi+ 1are located in the adjacent squares of the field, that is, these squares share a common side.One of the passable field squares contains an apple. The snake's aim is to reach the apple and eat it (that is, to position its head in the square with the apple).The snake moves throughout the game. During one move the snake can move its head to an adjacent field square. All other segments follow the head. That is, each segment numberi(1 <i≤k)moves to the square that has just had segment numberi- 1. Consider that all segments including the head move simultaneously (see the second test sample). If the snake's head moves to an unpassable square or to the square, occupied by its other segment, the snake dies. That's why we will consider such moves unvalid.Your task is to determine the minimum number of valid moves that the snake needs to reach the apple.InputThe first line contains two space-separated integersnandm(1 ≤n,m≤ 15) — the number of rows and columns of the game field.Nextnlines describe the game field. Each of these lines containsmcharacters. Character \"#\" represents a wall, \".\" is a passable square, \"@\" is an apple. The snake's first segment is represented by character \"1\", the second one segment — by character \"2\" and so on.The game field description doesn't contain any characters besides \"#', \".\", \"@\" and digits (except 0). It is guaranteed that the described field is correct. It is guaranteed that the described field contains exactly one apple and exactly one snake, the snake's length is at least 3 and at most 9.OutputPrint a single integer to the output — the minimum number of moves needed to reach the apple. If the snake can't reach the apple, print-1.ExamplesInput4 5##.....1#@432#....#.Output4Input4 4#78#.612.543..@.Output6Input3 23@2#1#Output-1", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "c3d0ac82", "template_md5": "465699a0", "result": "You are given a grid with walls and open spaces. There is a snake on the grid and an apple. The snake can move one space at a time to an adjacent open space. The goal is to find the fewest moves the snake needs to take to reach the apple. If the snake cannot reach the apple, output -1."}, {"prompt_md5": "67bf07c5", "template_md5": "35d339e4", "result": "You are given a rectangular grid of size $n \\times m$. Some cells are walls (\"#\") and some are empty (\".\"). There is one apple (\"@\") and a snake consisting of $k$ segments (labeled 1 to $k$) on the grid. The snake's head is segment 1 and its tail is segment $k$.  \n\nThe snake can move one cell at a time. In each move, the head moves to an adjacent empty cell, and all other segments follow the head.  \n\nThe goal is to find the minimum number of moves the snake needs to make to reach the apple. If the snake cannot reach the apple, output -1."}]}