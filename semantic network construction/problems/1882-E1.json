{"uid": "1882-E1", "url": "https://codeforces.com/contest/1882/problem/E1", "tags": ["brute force", " constructive algorithms", " greedy", " number theory"], "title": "1882-E1", "statement": "E1. Two Permutations (Easy Version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the easy version of the problem. The difference between the two versions is that you do not have to minimize the number of operations in this version. You can make hacks only if both versions of the problem are solved.You have two permutations$$$^{\\\\dagger}$$$ $$$p_{1}, p_{2}, \\\\ldots, p_{n}$$$ (of integers $$$1$$$ to $$$n$$$) and $$$q_{1}, q_{2}, \\\\ldots, q_{m}$$$ (of integers $$$1$$$ to $$$m$$$). Initially $$$p_{i}=a_{i}$$$ for $$$i=1, 2, \\\\ldots, n$$$, and $$$q_{j} = b_{j}$$$ for $$$j = 1, 2, \\\\ldots, m$$$. You can apply the following operation on the permutations several (possibly, zero) times.In one operation, $$$p$$$ and $$$q$$$ will change according to the following three steps:You choose integers $$$i$$$, $$$j$$$ which satisfy $$$1 \\\\le i \\\\le n$$$ and $$$1 \\\\le j \\\\le m$$$.Permutation $$$p$$$ is partitioned into three parts using $$$p_i$$$ as a pivot: the left part is formed by elements $$$p_1, p_2, \\\\ldots, p_{i-1}$$$ (this part may be empty), the middle part is the single element $$$p_i$$$, and the right part is $$$p_{i+1}, p_{i+2}, \\\\ldots, p_n$$$ (this part may be empty). To proceed, swap the left and the right parts of this partition. Formally, after this step, $$$p$$$ will become $$$p_{i+1}, p_{i+2}, \\\\ldots, p_{n}, p_{i}, p_{1}, p_{2}, \\\\ldots, p_{i-1}$$$. The elements of the newly formed $$$p$$$ will be reindexed starting from $$$1$$$.Perform the same transformation on $$$q$$$ with index $$$j$$$. Formally, after this step, $$$q$$$ will become $$$q_{j+1}, q_{j+2}, \\\\ldots, q_{m}, q_{j}, q_{1}, q_{2}, \\\\ldots, q_{j-1}$$$. The elements of the newly formed $$$q$$$ will be reindexed starting from $$$1$$$.Your goal is to simultaneously make $$$p_{i}=i$$$ for $$$i=1, 2, \\\\ldots, n$$$, and $$$q_{j} = j$$$ for $$$j = 1, 2, \\\\ldots, m$$$.Find any valid way to achieve the goal using at most $$$10\\\\,000$$$ operations, or say that none exists. Please note that youdo not have tominimize the number of operations.It can be proved that if it is possible to achieve the goal, then there exists a way to do so using at most $$$10\\\\,000$$$ operations.$$$^{\\\\dagger}$$$ A permutation of length $$$k$$$ is an array consisting of $$$k$$$ distinct integers from $$$1$$$ to $$$k$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array), and $$$[1,3,4]$$$ is also not a permutation ($$$k=3$$$ but there is $$$4$$$ in the array).InputThe first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\\\le n, m \\\\le 2500$$$).The second line contains $$$n$$$ integers $$$a_1, a_2, \\\\ldots, a_n$$$ ($$$1 \\\\le a_i \\\\le n$$$).The third line contains $$$m$$$ integers $$$b_1, b_2, \\\\ldots, b_m$$$ ($$$1 \\\\le b_i \\\\le m$$$).It is guaranteed that $$$a$$$ and $$$b$$$ are permutations.OutputIf there is no solution, print a single integer $$$-1$$$.Otherwise, print an integer $$$k$$$ ($$$0 \\\\le k \\\\le 10\\\\,000$$$) — the number of operations to perform, followed by $$$k$$$ lines, each containing two integers $$$i$$$ and $$$j$$$ ($$$1 \\\\le i \\\\le n$$$, $$$1 \\\\le j \\\\le m$$$) — the integers chosen for the operation.If there are multiple solutions, print any of them.Please note that youdo not have tominimize the number of operations.ExamplesInput3 5 2 1 3 5 2 1 4 3Output2 3 4 2 4Input4 4 3 4 2 1 2 4 1 3Output5 4 2 3 3 1 4 3 2 4 1Input2 2 1 2 2 1Output-1NoteIn the first example, we can achieve the goal within $$$2$$$ operations:In the first operation, choose $$$i = 3$$$, $$$j = 4$$$. After this, $$$p$$$ becomes $$$[3, 2, 1]$$$ and $$$q$$$ becomes $$$[3, 4, 5, 2, 1]$$$.In the second operation, choose $$$i = 2$$$, $$$j = 4$$$. After this, $$$p$$$ becomes $$$[1, 2, 3]$$$ and $$$q$$$ becomes $$$[1, 2, 3, 4, 5]$$$.In the third example, it is impossible to achieve the goal.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "adcddca6", "template_md5": "35d339e4", "result": "You are given two permutations,  $p$ of length $n$ and $q$ of length $m$.  \n\n* $p = (p_1, p_2, ..., p_n)$ where $p_i$ is an integer from 1 to $n$.\n* $q = (q_1, q_2, ..., q_m)$ where $q_i$ is an integer from 1 to $m$.\n\nYou can perform the following operation repeatedly:\n\n1. Choose integers $i$ and $j$ where $1 \\le i \\le n$ and $1 \\le j \\le m$.\n2.  Partition $p$ into three parts: elements before $p_i$, $p_i$ itself, and elements after $p_i$. Swap the parts before and after $p_i$.\n3. Do the same partitioning and swapping for $q$ using index $j$.\n\nYour goal is to transform $p$ and $q$ so that:\n\n* $p_i = i$ for all $i$ from 1 to $n$\n* $q_j = j$ for all $j$ from 1 to $m$\n\nFind any way to achieve this goal using at most 10,000 operations. If it's impossible, say so."}, {"prompt_md5": "b7f35ec4", "template_md5": "465699a0", "result": "You have two lists of numbers. Each number in a list must be between 1 and the length of that list. You can swap the order of the numbers in each list by choosing two positions in each list and swapping the parts of the lists before and after those positions.  Find a way to rearrange the numbers in both lists so that each number in each list is in the same position as its value. If this is impossible, say so. You don't need to find the fewest swaps possible."}]}