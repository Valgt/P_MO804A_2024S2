{"uid": "1970-A3", "url": "https://codeforces.com/contest/1970/problem/A3", "tags": ["constructive algorithms", " trees"], "title": "1970-A3", "statement": "A3. Balanced Unshuffle (Hard)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe only difference with the medium version is the maximum length of the input.Aparentheses sequenceis a string consisting of characters \"(\" and \")\", for example \"(()((\".Abalanced parentheses sequenceis a parentheses sequence which can become a valid mathematical expression after inserting numbers and operations into it, for example \"(()(()))\".Thebalanceof a parentheses sequence is defined as the number of opening parentheses \"(\" minus the number of closing parentheses \")\". For example, the balance of the sequence \"(()((\" is 3.A balanced parentheses sequence can also be defined as a parentheses sequence with balance 0 such that each of its prefixes has a non-negative balance.We define thebalanced shuffleoperation that takes a parentheses sequence and returns a parentheses sequence as follows: first, for every character of the input sequence, we compute the balance of the prefix of the sequencebeforethat character and write those down in a table together with the positions of the characters in the input sequence, for example:Prefix balance01212321Position12345678Character(()(()))Then, we sort the columns of this table inincreasingorder of prefix balance, breaking ties indecreasingorder of position. In the above example, we get:Prefix balance01112223Position18427536Character()(()())The last row of this table forms another parentheses sequence, in this case \"()(()())\". This sequence is called the result of applying the balanced shuffle operation to the input sequence, or in short just the balanced shuffle of the input sequence.Surprisingly, it turns out that the balanced shuffle of any balanced parentheses sequence is always another balanced parentheses sequence (we will omit the proof for brevity). Even more surprisingly, the balanced shuffles of two different balanced parentheses sequences are always different, therefore the balanced shuffle operation is a bijection on the set of balanced parentheses sequences of any given length (we will omit this proof, too).You are given a balanced parentheses sequence. Find its preimage: the balanced parentheses sequence the balanced shuffle of which is equal to the given sequence.InputThe only line of input contains a string $$$s$$$ consisting only of characters \"(\" and \")\". This string is guaranteed to be a non-empty balanced parentheses sequence with itslength not exceeding $$$500\\\\,000$$$.OutputPrint the balanced parentheses sequence $$$t$$$ such that the balanced shuffle of $$$t$$$ is equal to $$$s$$$. It is guaranteed that the answer always exists and is unique.ExampleInput()(()())Output(()(()))", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "510be550", "template_md5": "35d339e4", "result": "You are given a balanced parentheses sequence $s$.  Find the unique balanced parentheses sequence $t$ such that the balanced shuffle of $t$ is equal to $s$.\n\n**Balanced Shuffle Operation:**\n\n1. For each character in the sequence, calculate the balance of the prefix of the sequence before that character.\n2. Create a table with columns for \"Prefix Balance\" and \"Position\".\n3. Sort the table by \"Prefix Balance\" in increasing order, and break ties by decreasing order of \"Position\".\n4. The last row of the table forms the balanced shuffle of the original sequence.\n\n\n**Note:**\n\n* A balanced parentheses sequence is a sequence where each prefix has a non-negative balance.\n* The balance of a sequence is the number of opening parentheses \"(\" minus the number of closing parentheses \")\". \n\n\n\nLet me know if you'd like me to elaborate on any part of the balanced shuffle operation."}, {"prompt_md5": "83f6eeeb", "template_md5": "465699a0", "result": "You are given a string of parentheses. Find the original string that, when sorted in a specific way based on the balance of parentheses at each position, produces the given string."}]}