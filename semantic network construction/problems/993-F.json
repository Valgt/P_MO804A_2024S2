{"uid": "993-F", "url": "https://codeforces.com/contest/993/problem/F", "tags": [], "title": "993-F", "statement": "F. The Moral Dilemmatime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputHibiki and Dita are in love with each other, but belong to communities that are in a long lasting conflict. Hibiki is deeply concerned with the state of affairs, and wants to figure out if his relationship with Dita is an act of love or an act of treason.Hibiki prepared several binary features his decision will depend on, and built a three layer logical circuit on top of them, each layer consisting of one or morelogic gates. Each gate in the circuit is either \"or\", \"and\", \"nor\" (not or) or \"nand\" (not and). Each gate in the first layer is connected to exactly two features. Each gate in the second layer is connected to exactly two gates in the first layer. The third layer has only one \"or\" gate, which is connected to all the gates in the second layer (in other words, the entire circuit produces 1 if and only if at least one gate in the second layer produces 1).The problem is, Hibiki knows very well that when the person is in love, his ability to think logically degrades drastically. In particular, it is well known that when a person in love evaluates a logical circuit in his mind, every gate evaluates to a value that is the opposite of what it was supposed to evaluate to. For example, \"or\" gates return 1 if and only if both inputs are zero, \"t{nand}\" gates produce 1 if and only if both inputs are one etc.In particular, the \"or\" gate in the last layer also produces opposite results, and as such if Hibiki is in love, the entire circuit produces 1 if and only if all the gates on the second layer produced 0.Hibiki can’t allow love to affect his decision. He wants to know what is the smallest number of gates that needs to be removed from the second layer so that the output of the circuit for all possible inputs doesn't depend on whether Hibiki is in love or not.InputThe first line contains three integers $$$n$$$, $$$m$$$, $$$k$$$ ($$$2 \\\\le n, m \\\\le 50$$$; $$$1 \\\\le k \\\\le 50$$$) — the number of input features, the number of gates in the first layer, and the number of gates in the second layer correspondingly.The second line contains $$$m$$$ pairs of strings separated by spaces describing the first layer. The first string in each pair describes the gate (\"and\", \"or\", \"nand\" or \"nor\"), and the second string describes the two input features the gate is connected two as a string consisting of exactly $$$n$$$ characters, with exactly two characters (that correspond to the input features the gate is connected to) equal to 'x' and the remaining characters equal to \".'.The third line contains $$$k$$$ pairs of strings separated by spaces describing the second layer in the same format, where the strings that describe the input parameters have length $$$m$$$ and correspond to the gates of the first layer.OutputPrint the number of gates that need to be removed from the second layer so that the output of the remaining circuit doesn't depend on whether Hibiki is in love or not.If no matter how many gates are removed the output of the circuit continues to depend on Hibiki's feelings, print $$$-1$$$.ExamplesInput2 2 2and xx nand xxand xx or xxOutput1Input3 2 2and xx. nor .xxand xx nor xxOutput-1Input4 4 5nor x..x and ..xx and xx.. nand xx..nand ..xx nor ..xx and xx.. nor ..xx or ..xxOutput2NoteIn the first example the two gates in the first layer are connected to the same inputs, but first computes \"and\" while second computes \"nand\", and as such their output is always different no matter what the input is and whether Hibiki is in love or not. The second layer has \"or\" and \"and\" gates both connected to the two gates in the first layer. If Hibiki is not in love, the \"and\" gate will produce 0 and the \"or\" gate will produce 1 no matter what input features are equal to, with the final \"or\" gate in the third layer always producing the final answer of 1. If Hibiki is in love, \"and\" gate in the second layer will produce 1 and \"or\" gate will produce 0 no matter what the input is, with the final \"or\" gate in the third layer producing the final answer of 0. Thus, if both gates in the second layer are kept, the output of the circuit does depend on whether Hibiki is in love. If any of the two gates in the second layer is dropped, the output of the circuit will no longer depend on whether Hibiki is in love or not, and hence the answer is 1.In the second example no matter what gates are left in the second layer, the output of the circuit will depend on whether Hibiki is in love or not.In the third example if Hibiki keeps second, third and fourth gates in the second layer, the circuit will not depend on whether Hibiki is in love or not. Alternatively, he can keep the first and the last gates. The former requires removing two gates, the latter requires removing three gates, so the former is better, and the answer is 2.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "6491f8ce", "template_md5": "35d339e4", "result": "You are given a logical circuit with three layers. \n\n* The first layer has $n$ input features and $m$ gates. Each gate is either AND, OR, NAND, or NOR. Each gate in the first layer takes two input features.\n* The second layer has $k$ gates. Each gate in the second layer takes two inputs from the first layer.\n* The third layer has a single OR gate that takes all the outputs from the second layer.\n\nThe circuit outputs 1 if and only if the final OR gate in the third layer outputs 1.\n\nHowever, when evaluating the circuit, the output of each gate is the opposite of its intended output. For example, an AND gate will output 1 if both inputs are 0, and 0 otherwise.\n\nYour task is to find the minimum number of gates that need to be removed from the second layer so that the circuit's output is the same regardless of whether the gates are evaluated normally or in the \"opposite\" way. If it's impossible to make the circuit independent of this \"opposite\" evaluation, output -1."}, {"prompt_md5": "ec8c7302", "template_md5": "465699a0", "result": "You are given a logical circuit with three layers. The first layer has gates connected to input features. The second layer has gates connected to the outputs of the first layer. The third layer has a single gate connected to the outputs of the second layer.  \n\nThe problem is to determine the minimum number of gates that need to be removed from the second layer so that the circuit's output is the same regardless of whether a special condition is met."}]}