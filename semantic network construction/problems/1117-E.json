{"uid": "1117-E", "url": "https://codeforces.com/contest/1117/problem/E", "tags": ["bitmasks", " chinese remainder theorem", " constructive algorithms", " interactive", " math"], "title": "1117-E", "statement": "E. Decypher the Stringtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an interactive problem. Remember to flush your output while communicating with the testing program.You may usefflush(stdout)in C++,system.out.flush()in Java,stdout.flush()in Python orflush(output)in Pascal to flush the output. If you use some other programming language, consult its documentation. You may also refer to the guide on interactive problems:https://codeforces.com/blog/entry/45307.You are given a string $$$t$$$ consisting of $$$n$$$ lowercase Latin letters. This string was cyphered as follows: initially, the jury had a string $$$s$$$ consisting of $$$n$$$ lowercase Latin letters. Then they applied a sequence of no more than $$$n$$$ (possibly zero) operations. $$$i$$$-th operation is denoted by two integers $$$a_i$$$ and $$$b_i$$$ ($$$1 \\\\le a_i, b_i \\\\le n$$$), and means swapping two elements of the string with indices $$$a_i$$$ and $$$b_i$$$. All operations were done in the order they were placed in the sequence. For example, if $$$s$$$ isxyzand $$$2$$$ following operations are performed: $$$a_1 = 1, b_1 = 2$$$; $$$a_2 = 2, b_2 = 3$$$, then after the first operation the current string isyxz, and after the second operation the current string isyzx, so $$$t$$$ isyzx.You are asked to restore the original string $$$s$$$. Unfortunately, you have no information about the operations used in the algorithm (you don't even know if there were any operations in the sequence). But you may run the same sequence of operations on any string you want, provided that it contains only lowercase Latin letters and its length is $$$n$$$, and get the resulting string after those operations.Can you guess the original string $$$s$$$ asking the testing system to run the sequence of swaps no more than $$$3$$$ times?The string $$$s$$$ and the sequence of swaps are fixed in each test; the interactor doesn't try to adapt the test to your solution.InputInitially the testing system sends one string $$$t$$$, consisting of lowercase Latin letters ($$$1 \\\\le |t| = n \\\\le 10^4$$$).OutputTo give the answer, your program should print one line $$$!$$$ $$$s$$$with a line break in the end. After that, it should flush the output and terminate gracefully.InteractionBefore giving the answer, you may submit no more than $$$3$$$ queries. To ask a query, print one line in the following format: $$$?$$$ $$$s'$$$, where $$$s'$$$ should be a string consisting of exaclty $$$n$$$ lowercase Latin letters.The line should be ended with a line break character. After submitting a query, flush the output and read the answer to your query — a string $$$t'$$$ consisting of $$$n$$$ lowercase Latin letters, which is the result of applying the sequence of swaps to string $$$s'$$$. This string will be given on a separate line ended by a line break character.If you submit an incorrect query (or ask more than $$$3$$$ queries), the answer to it will be one string0. After receiving such an answer, your program should terminate immediately — otherwise you may receive verdict \"Runtime error\", \"Time limit exceeded\" or some other verdict instead of \"Wrong answer\".ExampleInputyzx aab baa abaOutput? baa ? aba ? aab ! xyzNoteIn the sample, the testcase described in the statement is used. The participant asks the first query with stringbaa, which is transformed toaab. The second query contains stringaba, which is transformed tobaa. The third query contains stringaab, which is transformed toaba. The participant can deduce that the initial string $$$s$$$ wasxyz.Note for hacking phase:To submit a test in hacking phase, you should provide it in the following format:The first line should contain the string $$$s$$$ you guess, consisting of $$$n \\\\in [1, 10000]$$$ lowercase Latin letters.The second line should contain $$$k$$$ ($$$0 \\\\le k \\\\le n$$$) — the number of swap operations in the sequence.Then $$$k$$$ lines should follow, $$$i$$$-th of them should denote $$$i$$$-th operation with two integers $$$a_i$$$ and $$$b_i$$$ ($$$1 \\\\le a_i, b_i \\\\le n$$$).For example, the sample test would look like that:xyz21 22 3", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "9ead2105", "template_md5": "35d339e4", "result": "You are given a string $t$ of length $n$. This string was created by applying a sequence of swaps to another string $s$ of the same length. You don't know the original string $s$ or the sequence of swaps.\n\nYou can ask the system to apply the same sequence of swaps to any string of length $n$ that you provide. You have 3 queries to figure out the original string $s$.\n\n**To ask a query:**\n\n1. Provide a string $s'$ of length $n$.\n2. The system will return the string $t'$ which is the result of applying the swaps to $s'$.\n\n**To give your answer:**\n\n1. Print \"! $s$\" where $s$ is your guess for the original string.\n\n**Example:**\n\nIf $t$ is \"yzx\", you might ask the following queries:\n\n1. ? \"baa\"\n2. ? \"aba\"\n3. ? \"aab\"\n\nThe system will return the results of applying the swaps to each of these strings. By analyzing the results, you can deduce the original string $s$."}, {"prompt_md5": "4ec2e3d7", "template_md5": "465699a0", "result": "You are given a scrambled string. You can apply a limited number of swaps to any string of the same length and get the scrambled string back.  Your goal is to figure out the original unscrambled string by making a limited number of swaps."}]}