{"uid": "161-C", "url": "https://codeforces.com/contest/161/problem/C", "tags": ["divide and conquer"], "title": "161-C", "statement": "C. Abracadabratime limit per test1 secondmemory limit per test256 megabytesinputstdinoutputstdoutPolycarpus analyzes a string calledabracadabra. This string is constructed using the following algorithm:On the first step the string consists of a single character \"a\".On thek-th step Polycarpus concatenates two copies of the string obtained on the(k- 1)-th step, while inserting thek-th character of the alphabet between them. Polycarpus uses the alphabet that consists of lowercase Latin letters and digits (a total of 36 characters). The alphabet characters are numbered like this: the 1-st character is \"a\", the 2-nd — \"b\", ..., the 26-th — \"z\", the 27-th — \"0\", the 28-th — \"1\", ..., the 36-th — \"9\".Let's have a closer look at the algorithm. On the second step Polycarpus will concatenate two strings \"a\" and insert the character \"b\" between them, resulting in \"aba\" string. The third step will transform it into \"abacaba\", and the fourth one - into \"abacabadabacaba\". Thus, the string constructed on thek-th step will consist of2k- 1characters.Polycarpus wrote down the string he got after 30 steps of the given algorithm and chose two non-empty substrings of it. Your task is to find the length of the longest common substring of the two substrings selected by Polycarpus.A substrings[i...j](1 ≤i≤j≤ |s|) of strings=s1s2...s|s|is a stringsisi+ 1...sj. For example, substrings[2...4]of strings= \"abacaba\" equals \"bac\". The string is its own substring.The longest common substring of two stringssandtis the longest string that is a substring of bothsandt. For example, the longest common substring of \"contest\" and \"systemtesting\" is string \"test\". There can be several common substrings of maximum length.InputThe input consists of a single line containing four integersl1,r1,l2,r2(1 ≤li≤ri≤ 109,i= 1, 2). The numbers are separated by single spaces.liandrigive the indices of the first and the last characters of thei-th chosen substring, correspondingly (i= 1, 2). The characters of stringabracadabraare numbered starting from1.OutputPrint a single number — the length of the longest common substring of the given strings. If there are no common substrings, print 0.ExamplesInput3 6 1 4Output2Input1 1 4 4Output0NoteIn the first sample the first substring is \"acab\", the second one is \"abac\". These two substrings have two longest common substrings \"ac\" and \"ab\", but we are only interested in their length — 2.In the second sample the first substring is \"a\", the second one is \"c\". These two substrings don't have any common characters, so the length of their longest common substring is 0.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "70c0bbf4", "template_md5": "35d339e4", "result": "A string is generated using the following rule:\n\n* **Step 1:** The string starts with \"a\".\n* **Step k:**  Take the string from the previous step, copy it twice, and insert the k-th character of the alphabet between the copies.\n\nFor example:\n\n* Step 1: \"a\"\n* Step 2: \"aba\"\n* Step 3: \"abacaba\"\n* Step 4: \"abacabadabacaba\"\n\nYou are given two non-empty substrings from this string generated after 30 steps.  Find the length of the longest common substring between these two substrings.\n\n**Input:**\n\nFour integers: $l_1$, $r_1$, $l_2$, $r_2$\n\n* $l_1$ and $r_1$ define the start and end indices of the first substring.\n* $l_2$ and $r_2$ define the start and end indices of the second substring.\n\n**Output:**\n\nA single integer representing the length of the longest common substring. If there are no common substrings, output 0."}, {"prompt_md5": "46859aa3", "template_md5": "465699a0", "result": "Given a long string built by repeatedly doubling and inserting characters, find the length of the longest common substring between two substrings chosen from the string."}]}