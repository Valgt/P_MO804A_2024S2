{"uid": "1909-H", "url": "https://codeforces.com/contest/1909/problem/H", "tags": ["constructive algorithms", " data structures"], "title": "1909-H", "statement": "H. Parallel Swaps Sorttime limit per test7 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputDubmood - Keygen 8⠀You are given a permutation $$$p_1, p_2, \\\\dots, p_n$$$ of $$$[1, 2, \\\\dots, n]$$$. You can perform the following operation some (possibly $$$0$$$) times:choose a subarray $$$[l, r]$$$ of even length;swap $$$a_l$$$, $$$a_{l+1}$$$;swap $$$a_{l+2}$$$, $$$a_{l+3}$$$ (if $$$l+3 \\\\leq r$$$);$$$\\\\dots$$$swap $$$a_{r-1}$$$, $$$a_r$$$.Sort the permutation in at most $$$10^6$$$ operations. You do not need to minimize the number of operations.InputThe first line contains a single integer $$$n$$$ ($$$2 \\\\le n \\\\le 3 \\\\cdot 10^5$$$) — the length of the permutation.The second line contains $$$n$$$ integers $$$p_1, p_2, \\\\ldots, p_n$$$ ($$$1 \\\\le p_i \\\\le n$$$, the $$$p_i$$$ are distinct) — the permutation before performing the operations.OutputOutput your operations in the following format.The first line should contain an integer $$$k$$$ ($$$0 \\\\le k \\\\le 10^6$$$) — the number of operations.The next $$$k$$$ lines represent the $$$k$$$ operations in order. Each of these $$$k$$$ lines should contain two integers $$$l$$$ and $$$r$$$ ($$$1 \\\\leq l < r \\\\leq n$$$, $$$r-l+1$$$ must be even) — the corresponding operation consists in choosing the subarray $$$[l, r]$$$ and swapping its elements according to the problem statement.After all the operations, $$$a_i = i$$$ must be true for each $$$i$$$ ($$$1 \\\\leq i \\\\leq n$$$).ExamplesInput52 5 4 1 3Output5 1 4 1 2 2 5 1 4 4 5Input91 2 3 4 5 6 7 8 9Output0Input106 4 2 3 8 10 9 1 5 7Output15 1 8 6 9 1 8 3 10 1 10 1 10 1 6 6 9 6 9 2 7 9 10 5 10 1 6 2 9 1 10NoteIn the first test:At the beginning, $$$p = [2, 5, 4, 1, 3]$$$.In the first operation, you can choose $$$[l, r] = [1, 4]$$$. Then, $$$(a_1, a_2)$$$ are swapped and $$$(a_3, a_4)$$$ are swapped. The new permutation is $$$p = [5, 2, 1, 4, 3]$$$.In the second operation, you can choose $$$[l, r] = [1, 2]$$$. Then, $$$(a_1, a_2)$$$ are swapped. The new permutation is $$$p = [2, 5, 1, 4, 3]$$$.In the third operation, you can choose $$$[l, r] = [2, 5]$$$. Then, $$$(a_2, a_3)$$$ are swapped and $$$(a_4, a_5)$$$ are swapped. The new permutation is $$$p = [2, 1, 5, 3, 4]$$$.In the fourth operation, you can choose $$$[l, r] = [1, 4]$$$. Then, $$$(a_1, a_2)$$$ are swapped and $$$(a_3, a_4)$$$ are swapped. The new permutation is $$$p = [1, 2, 3, 5, 4]$$$.In the fifth operation, you can choose $$$[l, r] = [4, 5]$$$. Then, $$$(a_4, a_5)$$$ are swapped. The new permutation is $$$p = [1, 2, 3, 4, 5]$$$, which is sorted.In the second test, the permutation is already sorted, so you do not need to perform any operation.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "5eebec85", "template_md5": "35d339e4", "result": "You are given a list of numbers  $p_1, p_2, ..., p_n$  that are all distinct and range from 1 to $n$.  You can perform the following operation any number of times:\n\n1. Choose a section of the list with an even number of elements, for example,  $p_l, p_{l+1}, ..., p_r$.\n2. Swap the first two elements, then the second and third, and so on until you reach the end of the section.\n\nYour goal is to sort the list in ascending order using these operations. You don't need to find the fewest operations possible, just a way to sort the list. \n\n**Input:**\n\n* The first line contains an integer $n$ (2 ≤ $n$ ≤ 3 * 10⁵) which is the length of the list.\n* The second line contains $n$ integers $p_1, p_2, ..., p_n$ (1 ≤ $p_i$ ≤ $n$) which are the numbers in the list.\n\n**Output:**\n\n* The first line contains an integer $k$ (0 ≤ $k$ ≤ 10⁶) which is the number of operations you performed.\n* The next $k$ lines each contain two integers $l$ and $r$ (1 ≤ $l$ < $r$ ≤ $n$, $r-l+1$ is even) which specify the section of the list you swapped in that operation."}, {"prompt_md5": "021577c9", "template_md5": "465699a0", "result": "You are given a list of numbers that are not in order. You can swap pairs of numbers within the list, but only if the pair is part of an even-length section of the list.  Find the fewest swaps needed to sort the list."}]}