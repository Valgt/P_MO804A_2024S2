{"uid": "1684-C", "url": "https://codeforces.com/contest/1684/problem/C", "tags": ["brute force", " constructive algorithms", " greedy", " implementation", " sortings"], "title": "1684-C", "statement": "C. Column Swappingtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a grid with $$$n$$$ rows and $$$m$$$ columns, where each cell has a positive integer written on it. Let's call a gridgood, if in each row the sequence of numbers is sorted in a non-decreasing order. It means, that for each $$$1 \\\\le i \\\\le n$$$ and $$$2 \\\\le j \\\\le m$$$ the following holds: $$$a_{i,j} \\\\ge a_{i, j-1}$$$.You have to to do the following operation exactly once: choose two columns with indexes $$$i$$$ and $$$j$$$ (not necessarily different), $$$1 \\\\le i, j \\\\le m$$$, and swap them.You are asked to determine whether it is possible to make the grid good after the swap and, if it is, find the columns that need to be swapped.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 100$$$). Description of the test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\\\le n, m \\\\le 2 \\\\cdot 10^5$$$) — the number of rows and columns respectively.Each of the next $$$n$$$ rows contains $$$m$$$ integers, $$$j$$$-th element of $$$i$$$-th row is $$$a_{i,j}$$$ ($$$1 \\\\le a_{i,j} \\\\le 10^9$$$) — the number written in the $$$j$$$-th cell of the $$$i$$$-th row.It's guaranteed that the sum of $$$n \\\\cdot m$$$ over all test cases does not exceed $$$2 \\\\cdot 10^5$$$.OutputIf after the swap it is impossible to get a good grid, output $$$-1$$$.In the other case output $$$2$$$ integers — the indices of the columns that should be swapped to get a good grid.If there are multiple solutions, print any.ExampleInput52 31 2 31 1 12 24 12 32 22 11 12 36 2 15 4 32 112Output1 1 -1 1 2 1 3 1 1NoteIn the first test case the grid is initially good, so we can, for example, swap the first column with itself.In the second test case it is impossible to make the grid good.In the third test case it is needed to swap the first and the second column, then the grid becomes good.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "afde232b", "template_md5": "465699a0", "result": "You are given a grid of numbers.  You can swap any two columns of the grid once.  Determine if it is possible to make the grid so that each row is in non-decreasing order after the swap. If possible, output the indices of the columns to swap. If not possible, output -1."}, {"prompt_md5": "0322cc27", "template_md5": "35d339e4", "result": "You are given a grid of numbers. Each row in the grid must be in non-decreasing order. You can swap any two columns of the grid exactly once.  Determine if it is possible to make the grid so that every row is in non-decreasing order after the swap. If it is possible, output the indices of the two columns to swap. If it is not possible, output -1. \n\n**Input:**\n\n* The first line contains the number of test cases, *t*.\n* For each test case:\n    * The first line contains two integers, *n* and *m*, representing the number of rows and columns in the grid.\n    * The next *n* lines each contain *m* integers, representing the numbers in each cell of the grid.\n\n**Output:**\n\n* For each test case, output:\n    * -1 if it is not possible to make the grid good after a single column swap.\n    * Two integers, *i* and *j*, representing the indices of the columns to swap to make the grid good."}]}