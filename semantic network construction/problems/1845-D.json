{"uid": "1845-D", "url": "https://codeforces.com/contest/1845/problem/D", "tags": ["binary search", " brute force", " data structures", " dp", " dsu", " greedy", " math", " two pointers"], "title": "1845-D", "statement": "D. Rating Systemtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are developing a rating system for an online game. Every time a player participates in a match, the player's rating changes depending on the results.Initially, the player's rating is $$$0$$$. There are $$$n$$$ matches; after the $$$i$$$-th match, the rating change is equal to $$$a_i$$$ (the rating increases by $$$a_i$$$ if $$$a_i$$$ is positive, or decreases by $$$|a_i|$$$ if it's negative. There are no zeros in the sequence $$$a$$$).The system has an additional rule: for a fixed integer $$$k$$$, if a player's rating has reached the value $$$k$$$, it will never fall below it. Formally, if a player's rating at least $$$k$$$, and a rating change would make it less than $$$k$$$, then the rating will decreaseto exactly $$$k$$$.Your task is to determine the value $$$k$$$ in such a way that the player's rating after all $$$n$$$ matches is the maximum possible (among all integer values of $$$k$$$). If there are multiple possible answers, you can print any of them.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 3 \\\\cdot 10^5$$$) — the number of matches.The second line contains $$$n$$$ integer $$$a_1, a_2, \\\\dots, a_n$$$ ($$$-10^9 \\\\le a_i \\\\le 10^9$$$; $$$a_i \\\\ne 0$$$) — the rating change after the $$$i$$$-th match.The sum of $$$n$$$ over all test cases doesn't exceed $$$3 \\\\cdot 10^5$$$.OutputFor each test case, print one integer $$$m$$$ ($$$-10^{18} \\\\le m \\\\le 10^{18}$$$) — the value of $$$k$$$ such that the rating of the player will be the maximum possible when using this value. It can be shown that at least one of the optimal answers meets the constraint $$$-10^{18} \\\\le m \\\\le 10^{18}$$$.ExampleInput443 -2 1 23-1 -2 -124 275 1 -3 2 -1 -2 2Output3 0 25 6NoteIn the first example, if $$$k=3$$$, then the rating changes as follows: $$$0 \\\\rightarrow 3 \\\\rightarrow 3 \\\\rightarrow 4 \\\\rightarrow 6$$$.In the second example, if $$$k=0$$$, then the rating changes as follows: $$$0 \\\\rightarrow 0 \\\\rightarrow 0 \\\\rightarrow 0$$$.In the third example, if $$$k=25$$$, then the rating changes as follows: $$$0 \\\\rightarrow 4 \\\\rightarrow 6$$$.In the fourth example, if $$$k=6$$$, then the rating changes as follows: $$$0 \\\\rightarrow 5 \\\\rightarrow 6 \\\\rightarrow 6 \\\\rightarrow 8 \\\\rightarrow 7 \\\\rightarrow 6 \\\\rightarrow 8$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "7ef288c7", "template_md5": "35d339e4", "result": "You are designing a rating system for a game.  A player starts with a rating of 0.  They play a series of matches, and after each match, their rating changes by a certain amount.  \n\n* If the change is positive, their rating increases by that amount.\n* If the change is negative, their rating decreases by the absolute value of that change.\n\nThere is a special rule: once a player's rating reaches a certain value  *k*, it can never go below *k* again.  \n\nGiven a list of rating changes for a series of matches, find the value of *k* that will result in the highest possible final rating. \n\n**Input:**\n\n* The first line contains the number of test cases *t*.\n* For each test case:\n    * The first line contains the number of matches *n*.\n    * The second line contains *n* integers, where each integer represents the rating change for a single match.\n\n**Output:**\n\nFor each test case, print the value of *k* that maximizes the final rating."}, {"prompt_md5": "3314c66a", "template_md5": "465699a0", "result": "You are given a list of numbers representing changes in a player's rating after each match.  Find the smallest number that, if the player's rating ever reaches it, will prevent it from going below that number.  The goal is to find the smallest such number that results in the highest possible final rating."}]}