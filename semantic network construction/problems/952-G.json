{"uid": "952-G", "url": "https://codeforces.com/contest/952/problem/G", "tags": ["constructive algorithms"], "title": "952-G", "statement": "G. Puzzling Languagetime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputIn this problem you will write a simple code generator for a 2D programming language derived fromBrainfuck.The code in this language is a rectangular grid of characters '.' and 'X'. The code is converted to a Brainfuck program as follows: the characters are read in the usual order (top to bottom, left to right), and each 'X' character is converted a Brainfuck instruction to be executed. The instruction is defined by the left, top and right neighbors of the 'X' character using the following conversion table:You are given a string. Output a program in the described language which prints this string.You can download the language interpreter used for judging here:https://assets.codeforces.com/rounds/952/puzzling-interpreter.cpp(use C++11 to compile the code). Note several implementation details:The first step of the language interpretation is conversion to a Brainfuck program, which is then executed.The code must be rectangular, with all lines of the same length. It can have at most 10,000 lines and 10,000 columns, and can have at most 500,000 'X' characters.The code has toroidal topology, i.e. the 'X' on the first line will have top neighbor in the last line.Brainfuck interpreter has 30000 memory cells which store integers from 0 to 255 with increment/decrement done modulo 256.Console input (,command) is allowed in Brainfuck code but has no effect when executed.InputThe input consists of a single string of characters with ASCII codes between 33 ('!') and 122 ('z'), inclusive. The length of the string is between 1 and 10 characters, inclusive.OutputOutput a program in the described language which, when executed, will print the given message.ExampleInput$$$Output.......X.............XXX...........XXXXX.........XXXXXXX.......XXXXXXXXX.....XXXXXXXXXXX...XXXXXXXXXXXXX................X.............XX..............X..............X..............NoteThe example corresponds to the following Brainfuck program:->+<>+++<>+++++<>+++++++<>+++++++++<>+++++++++++<<             >...The triangular block decrements the first memory cell and sets the value of the second memory cell to 36 - the ASCII code of '$' character. The next line after the triangular block moves the memory pointer to the second memory cell, and the next three lines print the '$' character three times.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "1aaadc74", "template_md5": "35d339e4", "result": "You are given a string of characters.  You need to create a 2D grid of characters, where:\n\n* The grid is rectangular and all rows have the same number of columns.\n* The grid can have at most 10,000 rows and 10,000 columns.\n* The grid can have at most 500,000 'X' characters.\n* Each 'X' character in the grid represents a Brainfuck instruction.\n\nThe Brainfuck instruction for each 'X' is determined by its position in the grid (left, top, and right neighbors).  A table is provided that defines this conversion.\n\nWhen the grid is read as a sequence of characters (top to bottom, left to right), each 'X' is replaced with its corresponding Brainfuck instruction. The resulting Brainfuck program will print the original input string.\n\nYou need to output the 2D grid that will achieve this. \n\n\n\nLet me know if you'd like me to elaborate on any part of the Brainfuck instruction conversion or the Brainfuck language itself."}, {"prompt_md5": "3842b2c0", "template_md5": "465699a0", "result": "You are given a string. Create a grid of dots and X's that, when interpreted as a special programming language, will print the given string.  The grid follows specific rules for converting X's into programming instructions."}]}