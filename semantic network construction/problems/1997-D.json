{"uid": "1997-D", "url": "https://codeforces.com/contest/1997/problem/D", "tags": ["binary search", " dfs and similar", " dp", " greedy", " trees"], "title": "1997-D", "statement": "D. Maximize the Roottime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a rooted tree, consisting of $$$n$$$ vertices. The vertices in the tree are numbered from $$$1$$$ to $$$n$$$, and the root is the vertex $$$1$$$. The value $$$a_i$$$ is written at the $$$i$$$-th vertex.You can perform the following operation any number of times (possibly zero): choose a vertex $$$v$$$which has at least one child; increase $$$a_v$$$ by $$$1$$$; and decrease $$$a_u$$$ by $$$1$$$ for all vertices $$$u$$$ that are in the subtree of $$$v$$$ (except $$$v$$$ itself). However, after each operation, the values on all vertices should be non-negative.Your task is to calculate the maximum possible value written at the root using the aforementioned operation.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$2 \\\\le n \\\\le 2 \\\\cdot 10^5$$$) — the number of vertices in the tree.The second line contains $$$n$$$ integers $$$a_1, a_2, \\\\dots, a_n$$$ ($$$0 \\\\le a_i \\\\le 10^9$$$) — the initial values written at vertices.The third line contains $$$n-1$$$ integers $$$p_2, p_3, \\\\dots, p_n$$$ ($$$1 \\\\le p_i \\\\le n$$$), where $$$p_i$$$ is the parent of the $$$i$$$-th vertex in the tree. Vertex $$$1$$$ is the root.Additional constraint on the input: the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\\\cdot 10^5$$$.OutputFor each test case, print a single integer — the maximum possible value written at the root using the aforementioned operation.ExampleInput340 1 0 21 1 323 0152 5 3 9 63 1 5 2Output1 3 6NoteIn the first test case, the following sequence of operations is possible:perform the operation on $$$v=3$$$, then the values on the vertices will be $$$[0, 1, 1, 1]$$$;perform the operation on $$$v=1$$$, then the values on the vertices will be $$$[1, 0, 0, 0]$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "46688453", "template_md5": "35d339e4", "result": "You are given a tree with $n$ nodes, numbered from 1 to $n$. Each node has a value $a_i$ associated with it.\n\nYou can perform the following operation any number of times:\n\n1. Choose a node $v$ that has at least one child.\n2. Increase the value of $v$ by 1.\n3. Decrease the value of all nodes in the subtree of $v$ (excluding $v$ itself) by 1.\n\nThe values of all nodes must remain non-negative after each operation.\n\nFind the maximum possible value that can be achieved at the root node (node 1) after performing these operations.\n\n\n\nInput:\n\n* The first line contains the number of test cases, $t$.\n* For each test case:\n    * The first line contains the number of nodes, $n$.\n    * The second line contains the initial values of the nodes, $a_1, a_2, ..., a_n$.\n    * The third line contains the parent of each node, $p_2, p_3, ..., p_n$. Node 1 is the root.\n\nOutput:\n\nFor each test case, print the maximum possible value at the root node."}, {"prompt_md5": "44f23e38", "template_md5": "465699a0", "result": "You are given a tree-like structure with numbered nodes. Each node has a value. You can repeatedly choose a node with children, increase its value by 1, and decrease the values of all its child nodes by 1 (keeping all values non-negative).  Find the highest possible value you can achieve at the root node."}]}