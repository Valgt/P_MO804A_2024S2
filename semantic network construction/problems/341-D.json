{"uid": "341-D", "url": "https://codeforces.com/contest/341/problem/D", "tags": ["data structures"], "title": "341-D", "statement": "D. Iahub and Xorstime limit per test1 secondmemory limit per test256 megabytesinputstdinoutputstdoutIahub does not like background stories, so he'll tell you exactly what this problem asks you for.You are given a matrixawithnrows andncolumns. Initially, all values of the matrix are zeros. Both rows and columns are 1-based, that is rows are numbered 1, 2, ...,nand columns are numbered 1, 2, ...,n. Let's denote an element on thei-th row andj-th column asai,j.We will call a submatrix(x0,y0,x1,y1)such elementsai,jfor which two inequalities hold:x0≤i≤x1,y0≤j≤y1.Write a program to perform two following operations:Query(x0,y0,x1,y1): print the xor sum of the elements of the submatrix(x0,y0,x1,y1).Update(x0,y0,x1,y1,v): each element from submatrix(x0,y0,x1,y1)gets xor-ed by valuev.InputThe first line contains two integers:n(1 ≤n≤ 1000) andm(1 ≤m≤ 105). The numbermrepresents the number of operations you need to perform. Each of the nextmlines contains five or six integers, depending on operation type.If thei-th operation from the input is a query, the first number fromi-th line will be 1. It will be followed by four integersx0,y0,x1,y1. If thei-th operation is an update, the first number from thei-th line will be 2. It will be followed by five integersx0,y0,x1,y1,v.It is guaranteed that for each update operation, the following inequality holds:0 ≤v< 262. It is guaranteed that for each operation, the following inequalities hold:1 ≤x0≤x1≤n,1 ≤y0≤y1≤n.OutputFor each query operation, output on a new line the result.ExamplesInput3 52 1 1 2 2 12 1 3 2 3 22 3 1 3 3 31 2 2 3 31 2 2 3 2Output32NoteAfter the first3operations, the matrix will look like this:1 1 21 1 23 3 3The fourth operation asks us to compute 1 xor 2 xor 3 xor 3 = 3.The fifth operation asks us to compute 1 xor 3 = 2.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "8f40a707", "template_md5": "35d339e4", "result": "You are given a square matrix of size $n \\times n$. All elements in the matrix are initially 0. You need to perform two types of operations:\n\n**Query:** Given a submatrix defined by its top-left corner coordinates ($x_0$, $y_0$) and bottom-right corner coordinates ($x_1$, $y_1$), calculate the XOR sum of all elements in that submatrix.\n\n**Update:** Given a submatrix defined by its top-left corner coordinates ($x_0$, $y_0$) and bottom-right corner coordinates ($x_1$, $y_1$), XOR each element in that submatrix by a given value $v$.\n\nInput:\n\n* The first line contains two integers: $n$ (size of the matrix) and $m$ (number of operations).\n* Each of the next $m$ lines describes an operation:\n    * If the operation is a query, the line starts with 1 followed by four integers: $x_0$, $y_0$, $x_1$, $y_1$.\n    * If the operation is an update, the line starts with 2 followed by five integers: $x_0$, $y_0$, $x_1$, $y_1$, $v$.\n\nOutput:\n\n* For each query operation, print the result (XOR sum of the submatrix) on a new line."}, {"prompt_md5": "7e741b3b", "template_md5": "465699a0", "result": "You are given a square grid of numbers. Initially, all numbers are zero. You can perform two types of operations:\n\n1. **Query:** Calculate the sum of all numbers in a specified rectangular region of the grid using the XOR operation.\n2. **Update:** Change all numbers in a specified rectangular region of the grid by adding a given value to them using the XOR operation. \n\n\nYou will be given a number of operations to perform."}]}