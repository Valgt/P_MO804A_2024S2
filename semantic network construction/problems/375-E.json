{"uid": "375-E", "url": "https://codeforces.com/contest/375/problem/E", "tags": ["dp", " implementation", " math"], "title": "375-E", "statement": "E. Red and Black Treetime limit per test1 secondmemory limit per test256 megabytesinputstdinoutputstdoutYou have a weighted tree, consisting ofnvertices. Each vertex is either painted black or is painted red. A red and black tree is calledbeautiful, if for any its vertex we can find a black vertex at distance at mostx.The distance between two nodes is the shortest path between them.You have a red and black tree. Your task is to make it beautiful in the minimum number of color swap operations. In one color swap operation, you can choose two vertices of different colors and paint each of them the other color. In other words, if you choose a red vertexpand a black vertexq, then in one operation you are allowed to paintpblack and paintqred.Print the minimum number of required actions.InputThe first line contains two integersnandx(2 ≤n≤ 500; 1 ≤x≤ 109). The next line containsnintegers, each of them is either a zero or one. If thei-th number equals 1, then vertexiof the tree is black, otherwise vertexiis red. Nextn- 1lines contain the tree edges. Thej-th line contains integersujvjwj(1 ≤uj,vj≤n;uj≠vj; 1 ≤wj≤ 109)which means that the tree has an edge of weightwjbetween verticesvjanduj.Assume that the tree vertices are numbered from 1 ton.OutputPrint a single integer — the minimum number of required swap operations.If it is impossible to get a beautiful tree at any number of operations, print -1.ExamplesInput3 21 0 01 2 22 3 2Output1Input4 20 1 0 01 2 22 3 23 4 2Output-1", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "45461b68", "template_md5": "35d339e4", "result": "You are given a tree with $n$ vertices, where each vertex is either red or black.  A tree is considered \"beautiful\" if for every vertex, there is a black vertex within a distance of at most $x$ away. The distance between two vertices is the shortest path between them.\n\nYour task is to determine the minimum number of color swaps needed to make the tree beautiful. In one color swap, you can choose two vertices of different colors and swap their colors.\n\n**Input:**\n\n* The first line contains two integers, $n$ (the number of vertices) and $x$ (the maximum distance).\n* The second line contains $n$ integers, where each integer is either 0 or 1. A 0 represents a red vertex, and a 1 represents a black vertex.\n* The following $n-1$ lines describe the edges of the tree. Each line contains three integers: $u$, $v$, and $w$, representing an edge between vertices $u$ and $v$ with weight $w$.\n\n**Output:**\n\n* Print a single integer representing the minimum number of color swaps required to make the tree beautiful. If it's impossible to make the tree beautiful, print -1."}, {"prompt_md5": "cdd185b7", "template_md5": "465699a0", "result": "You have a tree-shaped structure with nodes that are either red or black.  You can swap the colors of any two different nodes.  The goal is to make the tree \"beautiful\" by ensuring that for every node, there is a black node within a certain distance.  Find the fewest swaps needed to achieve this. If it's impossible, say so."}]}