{"uid": "1305-B", "url": "https://codeforces.com/contest/1305/problem/B", "tags": ["constructive algorithms", " greedy", " strings", " two pointers"], "title": "1305-B", "statement": "B. Kuroni and Simple Stringstime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputNow that Kuroni has reached 10 years old, he is a big boy and doesn't like arrays of integers as presents anymore. This year he wants a Bracket sequence as a Birthday present. More specifically, he wants a bracket sequence so complex that no matter how hard he tries, he will not be able to remove a simple subsequence!We say that a string formed by $$$n$$$ characters'('or')'issimpleif its length $$$n$$$ is even and positive, its first $$$\\\\frac{n}{2}$$$ characters are'(', and its last $$$\\\\frac{n}{2}$$$ characters are')'. For example, the strings()and(())are simple, while the strings)(and()()are not simple.Kuroni will be given a string formed by characters'('and')'(the given string is not necessarily simple). An operation consists of choosing a subsequence of the characters of the string that forms a simple string and removing all the characters of this subsequence from the string.Note that this subsequence doesn't have to be continuous. For example, he can apply the operation to the string')()(()))', to choose a subsequence of bold characters, as it forms a simple string'(())', delete these bold characters from the string and to get'))()'.Kuroni has to perform the minimum possible number of operations on the string, in such a way that no more operations can be performed on the remaining string. The resulting stringdoes nothave to be empty.Since the given string is too large, Kuroni is unable to figure out how to minimize the number of operations. Can you help him do it instead?A sequence of characters $$$a$$$ is a subsequence of a string $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) characters.InputThe only line of input contains a string $$$s$$$ ($$$1 \\\\le |s| \\\\le 1000$$$) formed by characters'('and')', where $$$|s|$$$ is the length of $$$s$$$.OutputIn the first line, print an integer $$$k$$$  — the minimum number of operations you have to apply. Then, print $$$2k$$$ lines describing the operations in the following format:For each operation, print a line containing an integer $$$m$$$  — the number of characters in the subsequence you will remove.Then, print a line containing $$$m$$$ integers $$$1 \\\\le a_1 < a_2 < \\\\dots < a_m$$$  — the indices of the characters you will remove. All integers must be less than or equal to the length of the current string, and the corresponding subsequence must form a simple string.If there are multiple valid sequences of operations with the smallest $$$k$$$, you may print any of them.ExamplesInput(()((Output1 2 1 3Input)(Output0Input(()())Output1 4 1 2 5 6NoteIn the first sample, the string is '(()(('. The operation described corresponds to deleting the bolded subsequence. The resulting string is '(((', and no more operations can be performed on it. Another valid answer is choosing indices $$$2$$$ and $$$3$$$, which results in the same final string.In the second sample, it is already impossible to perform any operations.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "38a8852e", "template_md5": "35d339e4", "result": "You are given a string consisting only of '(' and ')' characters.  \n\nA \"simple string\" is a string of even length where the first half of the string is '(' and the second half is ')'.\n\nYou can remove any subsequence of the string that forms a simple string.  \n\nFind the minimum number of times you need to remove a simple string subsequence to make it impossible to remove any more simple string subsequences. \n\nOutput:\n\n1. The minimum number of removals.\n2. For each removal, output:\n    * The length of the removed subsequence.\n    * The indices of the characters in the removed subsequence."}, {"prompt_md5": "5f6dcc2a", "template_md5": "465699a0", "result": "You are given a string of parentheses.  You can remove any subsequence of parentheses that forms a balanced string (e.g., \"()\" or \"((()))\").  Find the minimum number of times you need to do this to make it impossible to remove any more balanced subsequences."}]}