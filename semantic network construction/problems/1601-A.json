{"uid": "1601-A", "url": "https://codeforces.com/contest/1601/problem/A", "tags": ["bitmasks", " greedy", " math", " number theory"], "title": "1601-A", "statement": "A. Array Eliminationtime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou are given array $$$a_1, a_2, \\\\ldots, a_n$$$, consisting of non-negative integers.Let's define operation of \"elimination\" with integer parameter $$$k$$$ ($$$1 \\\\leq k \\\\leq n$$$) as follows:Choose $$$k$$$ distinct array indices $$$1 \\\\leq i_1 < i_2 < \\\\ldots < i_k \\\\le n$$$.Calculate $$$x = a_{i_1} ~ \\\\& ~ a_{i_2} ~ \\\\& ~ \\\\ldots ~ \\\\& ~ a_{i_k}$$$, where $$$\\\\&$$$ denotes thebitwise AND operation(notes section contains formal definition).Subtract $$$x$$$ from each of $$$a_{i_1}, a_{i_2}, \\\\ldots, a_{i_k}$$$; all other elements remain untouched.Find all possible values of $$$k$$$, such that it's possible to make all elements of array $$$a$$$ equal to $$$0$$$ using a finite number of elimination operations with parameter $$$k$$$. It can be proven that exists at least one possible $$$k$$$ for any array $$$a$$$.Note that youfirstly choose $$$k$$$ and only after that perform elimination operations with value $$$k$$$ you've chosen initially.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\leq t \\\\leq 10^4$$$). Description of the test cases follows.The first line of each test case contains one integer $$$n$$$ ($$$1 \\\\leq n \\\\leq 200\\\\,000$$$) — the length of array $$$a$$$.The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\\\ldots, a_n$$$ ($$$0 \\\\leq a_i < 2^{30}$$$) — array $$$a$$$ itself.It's guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$200\\\\,000$$$.OutputFor each test case, print all values $$$k$$$, such that it's possible to make all elements of $$$a$$$ equal to $$$0$$$ in a finite number of elimination operations with the given parameter $$$k$$$.Print them in increasing order.ExampleInput5 4 4 4 4 4 4 13 7 25 19 6 3 5 3 1 7 1 1 1 5 0 0 0 0 0Output1 2 4 1 2 1 1 1 2 3 4 5NoteIn the first test case:If $$$k = 1$$$, we can make four elimination operations with sets of indices $$$\\\\{1\\\\}$$$, $$$\\\\{2\\\\}$$$, $$$\\\\{3\\\\}$$$, $$$\\\\{4\\\\}$$$. Since $$$\\\\&$$$ of one element is equal to the element itself, then for each operation $$$x = a_i$$$, so $$$a_i - x = a_i - a_i = 0$$$.If $$$k = 2$$$, we can make two elimination operations with, for example, sets of indices $$$\\\\{1, 3\\\\}$$$ and $$$\\\\{2, 4\\\\}$$$: $$$x = a_1 ~ \\\\& ~ a_3$$$ $$$=$$$ $$$a_2 ~ \\\\& ~ a_4$$$ $$$=$$$ $$$4 ~ \\\\& ~ 4 = 4$$$. For both operations $$$x = 4$$$, so after the first operation $$$a_1 - x = 0$$$ and $$$a_3 - x = 0$$$, and after the second operation — $$$a_2 - x = 0$$$ and $$$a_4 - x = 0$$$.If $$$k = 3$$$, it's impossible to make all $$$a_i$$$ equal to $$$0$$$. After performing the first operation, we'll get three elements equal to $$$0$$$ and one equal to $$$4$$$. After that, all elimination operations won't change anything, since at least one chosen element will always be equal to $$$0$$$.If $$$k = 4$$$, we can make one operation with set $$$\\\\{1, 2, 3, 4\\\\}$$$, because $$$x = a_1 ~ \\\\& ~ a_2 ~ \\\\& ~ a_3 ~ \\\\& ~ a_4$$$ $$$= 4$$$.In the second test case, if $$$k = 2$$$ then we can make the following elimination operations:Operation with indices $$$\\\\{1, 3\\\\}$$$: $$$x = a_1 ~ \\\\& ~ a_3$$$ $$$=$$$ $$$13 ~ \\\\& ~ 25 = 9$$$. $$$a_1 - x = 13 - 9 = 4$$$ and $$$a_3 - x = 25 - 9 = 16$$$. Array $$$a$$$ will become equal to $$$[4, 7, 16, 19]$$$.Operation with indices $$$\\\\{3, 4\\\\}$$$: $$$x = a_3 ~ \\\\& ~ a_4$$$ $$$=$$$ $$$16 ~ \\\\& ~ 19 = 16$$$. $$$a_3 - x = 16 - 16 = 0$$$ and $$$a_4 - x = 19 - 16 = 3$$$. Array $$$a$$$ will become equal to $$$[4, 7, 0, 3]$$$.Operation with indices $$$\\\\{2, 4\\\\}$$$: $$$x = a_2 ~ \\\\& ~ a_4$$$ $$$=$$$ $$$7 ~ \\\\& ~ 3 = 3$$$. $$$a_2 - x = 7 - 3 = 4$$$ and $$$a_4 - x = 3 - 3 = 0$$$. Array $$$a$$$ will become equal to $$$[4, 4, 0, 0]$$$.Operation with indices $$$\\\\{1, 2\\\\}$$$: $$$x = a_1 ~ \\\\& ~ a_2$$$ $$$=$$$ $$$4 ~ \\\\& ~ 4 = 4$$$. $$$a_1 - x = 4 - 4 = 0$$$ and $$$a_2 - x = 4 - 4 = 0$$$. Array $$$a$$$ will become equal to $$$[0, 0, 0, 0]$$$.Formal definition of bitwise AND:Let's define bitwise AND ($$$\\\\&$$$) as follows. Suppose we have two non-negative integers $$$x$$$ and $$$y$$$, let's look at their binary representations (possibly, with leading zeroes): $$$x_k \\\\dots x_2 x_1 x_0$$$ and $$$y_k \\\\dots y_2 y_1 y_0$$$. Here, $$$x_i$$$ is the $$$i$$$-th bit of number $$$x$$$, and $$$y_i$$$ is the $$$i$$$-th bit of number $$$y$$$. Let $$$r = x ~ \\\\& ~ y$$$ is a result of operation $$$\\\\&$$$ on number $$$x$$$ and $$$y$$$. Then binary representation of $$$r$$$ will be $$$r_k \\\\dots r_2 r_1 r_0$$$, where:$$$$$$ r_i = \\\\begin{cases} 1, ~ \\\\text{if} ~ x_i = 1 ~ \\\\text{and} ~ y_i = 1 \\\\\\\\ 0, ~ \\\\text{if} ~ x_i = 0 ~ \\\\text{or} ~ y_i = 0 \\\\end{cases} $$$$$$", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "943156d7", "template_md5": "35d339e4", "result": "You are given an array of non-negative integers. You can perform an operation called \"elimination\" with a parameter $k$ (where $1 \\le k \\le n$, and $n$ is the length of the array). \n\nHere's how elimination works:\n\n1. Choose $k$ distinct indices from the array.\n2. Calculate the bitwise AND of the elements at those indices.\n3. Subtract the result from each of the elements at those indices.\n4. All other elements in the array remain unchanged.\n\nFind all possible values of $k$ such that you can make all elements of the array equal to 0 using a finite number of elimination operations with the chosen $k$. \n\n**Input:**\n\n* Multiple test cases.\n* For each test case:\n    * The first line contains the length of the array $n$.\n    * The second line contains $n$ integers, representing the elements of the array.\n\n**Output:**\n\n* For each test case, print all possible values of $k$ that allow you to make all array elements 0, in increasing order.\n\n\n\nLet me know if you'd like me to elaborate on any part of the problem!"}, {"prompt_md5": "05f39ba4", "template_md5": "465699a0", "result": "You are given a list of non-negative integers.  You can repeatedly choose a group of distinct numbers from the list and perform an operation on them. This operation subtracts the bitwise AND of the chosen numbers from each of the chosen numbers.  Find all the group sizes that allow you to make all the numbers in the list equal to zero through this process."}]}