{"uid": "1790-F", "url": "https://codeforces.com/contest/1790/problem/F", "tags": ["brute force", " dfs and similar", " divide and conquer", " graphs", " greedy", " math", " shortest paths", " trees"], "title": "1790-F", "statement": "F. Timofey and Black-White Treetime limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputTimofey came to a famous summer school and found a tree on $$$n$$$ vertices. A tree is a connected undirected graph without cycles.Every vertex of this tree, except $$$c_0$$$, is coloredwhite. The vertex $$$c_0$$$ is coloredblack.Timofey wants to color all the vertices of this tree inblack. To do this, he performs $$$n - 1$$$ operations. During the $$$i$$$-th operation, he selects the vertex $$$c_i$$$, which is currentlywhite, and paints itblack.Let's call thepositivityof tree the minimum distance between all pairs of differentblackvertices in it. The distance between the vertices $$$v$$$ and $$$u$$$ is the number of edges on the path from $$$v$$$ to $$$u$$$.After each operation, Timofey wants to know thepositivityof the current tree.InputThe first line contains the integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of testcases.The first line of each testcase contains the integers $$$n, c_0$$$ ($$$2 \\\\le n \\\\le 2 \\\\cdot 10^5$$$, $$$1 \\\\le c_0 \\\\le n$$$) — the number of vertices in the tree and index of the initialblackvertex.The second line of each testcase contains $$$n - 1$$$ unique integers $$$c_1, c_2, \\\\dots, c_{n-1}$$$ ($$$1 \\\\le c_i \\\\le n$$$, $$$c_i \\\\ne c_0$$$), where $$$c_i$$$ is the vertex which is coloredblackduring the $$$i$$$-th operation.Each of the next $$$n - 1$$$ row of each testcase contains the integers $$$v_i, u_i$$$ ($$$1 \\\\le v_i, u_i \\\\le n$$$) — edges in the tree.It is guaranteed that the sum of $$$n$$$ for all testcases does not exceed $$$2 \\\\cdot 10^5$$$.OutputFor each testcase, print $$$n - 1$$$ integer on a separate line.The integer with index $$$i$$$ must be equal topositivityof the tree obtained by the first $$$i$$$ operations.ExampleInput66 64 1 3 5 22 46 55 33 41 34 24 1 33 12 31 410 310 7 6 5 2 9 8 1 41 21 34 54 36 48 79 810 81 87 37 5 1 2 4 61 23 24 53 46 57 69 79 3 1 4 2 6 8 54 18 94 82 67 32 43 55 410 21 8 5 10 6 9 4 3 710 77 83 69 77 64 21 67 59 2Output3 2 1 1 1  3 1 1  3 2 2 2 2 2 1 1 1  4 2 2 1 1 1  5 1 1 1 1 1 1 1  4 3 2 2 1 1 1 1 1NoteIn the first testcase, after the second operation, the tree looks like this:The distance between vertices $$$1$$$ and $$$6$$$ is $$$3$$$, the distance between vertices $$$4$$$ and $$$6$$$ is $$$3$$$, the distance between vertices $$$1$$$ and $$$4$$$ is $$$2$$$. Thepositivityof this tree is equal to the minimum of these distances. It equals $$$2$$$.In the third testcase, after the fourth operation, the tree looks like this:Thepositivityof this tree is $$$2$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "e388d74d", "template_md5": "465699a0", "result": "You are given a tree with one special node initially colored black. You can color other nodes black one by one. After each coloring, find the smallest distance between any two black nodes."}, {"prompt_md5": "25d450e5", "template_md5": "35d339e4", "result": "You are given a tree with $n$ vertices. One vertex is initially black, and the rest are white.  You perform $n-1$ operations, each time selecting a white vertex and coloring it black. After each operation, you need to find the minimum distance between any two black vertices in the tree. The distance between two vertices is the number of edges on the path connecting them.\n\nInput:\n\n* The first line contains the number of test cases, $t$.\n* For each test case:\n    * The first line contains two integers, $n$ (the number of vertices) and $c_0$ (the index of the initially black vertex).\n    * The second line contains $n-1$ integers, $c_1, c_2, ..., c_{n-1}$, representing the indices of the vertices that will be colored black in each operation.\n    * The next $n-1$ lines each contain two integers, $v_i$ and $u_i$, representing an edge between vertices $v_i$ and $u_i$.\n\nOutput:\n\nFor each test case, print $n-1$ integers, one for each operation. The $i$-th integer should be the positivity of the tree after the $i$-th operation."}]}