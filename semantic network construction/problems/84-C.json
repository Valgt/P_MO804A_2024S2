{"uid": "84-C", "url": "https://codeforces.com/contest/84/problem/C", "tags": ["binary search", " implementation"], "title": "84-C", "statement": "C. Biathlontime limit per test1 secondmemory limit per test256 megabytesinputstdinoutputstdoutPerhaps many have heard that the World Biathlon Championship has finished. Although our hero Valera was not present at this spectacular event himself and only watched it on TV, it excited him so much that he decided to enroll in a biathlon section.Of course, biathlon as any sport, proved very difficult in practice. It takes much time and effort. Workouts, workouts, and workouts, — that's what awaited Valera on his way to great achievements in biathlon.As for the workouts, you all probably know that every professional biathlete should ski fast and shoot precisely at the shooting range. Only in this case you can hope to be successful, because running and shooting are the two main components of biathlon. Valera has been diligent in his ski trainings, which is why he runs really fast, however, his shooting accuracy is nothing to write home about.On a biathlon base where Valera is preparing for the competition, there is a huge rifle range withntargets. Each target have shape of a circle, andthe center of each circle is located on theOxaxis. At the last training session Valera made the total ofmshots. To make monitoring of his own results easier for him, one rather well-known programmer (of course it is you) was commissioned to write a program that would reveal how many and which targets Valera hit. More specifically, for each target the program must print the number ofthe firstsuccessful shot (in the target), or \"-1\" if this was not hit.The target is considered hit if the shot is inside the circle or on its boundary.Valera is counting on you and perhaps, thanks to you he will one day win international competitions.InputThe first line of the input file contains the integern(1 ≤n≤ 104), which is the number of targets. The nextnlines contain descriptions of the targets. Each target is a circle whose center is located on theOxaxis. Each circle is given by its coordinate of the centerx(- 2·104≤x≤ 2·104) and its radiusr(1 ≤r≤ 1000).It is guaranteed that no two targets coincide, intersect or are nested into each other, but they can touch each other.The next line contains integerm(1 ≤m≤ 2·105), which is the number of shots. Nextmlines contain descriptions of the shots, which are points on the plane, given by their coordinatesxandy(- 2·104≤x,y≤ 2·104).All the numbers in the input are integers.Targets and shots are numbered starting from one in the order of the input.OutputPrint on the first line a single number, the number of targets hit by Valera. Print on the second line for each of the targets the number of its first hit or \"-1\" (without quotes) if this number does not exist. Separate numbers with spaces.ExamplesInput32 15 210 150 11 33 04 04 0Output23 3 -1Input33 27 111 242 16 06 411 2Output31 2 4", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "9ef7bf50", "template_md5": "35d339e4", "result": "There are $n$ targets on a number line. Each target is a circle with a center at a point $x$ on the number line and a radius $r$. \n\nThere are $m$ shots, each represented by a point $(x, y)$ on a 2D plane.\n\nDetermine the number of targets hit by the shots. For each target, output the number of the first shot that hit it, or -1 if it was not hit.\n\n**Input:**\n\n* The first line contains the number of targets, $n$.\n* The next $n$ lines each contain two integers, $x$ and $r$, representing the center and radius of a target.\n* The next line contains the number of shots, $m$.\n* The next $m$ lines each contain two integers, $x$ and $y$, representing a shot.\n\n**Output:**\n\n* The first line contains the number of targets hit.\n* The second line contains $n$ integers, where each integer is the number of the first shot that hit the corresponding target, or -1 if the target was not hit."}, {"prompt_md5": "3f914703", "template_md5": "465699a0", "result": "You are given a list of circles and a list of points. Determine how many circles are hit by the points, and for each circle, output the index of the first point that hits it. If no point hits a circle, output -1."}]}