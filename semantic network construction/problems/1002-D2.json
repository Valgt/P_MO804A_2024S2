{"uid": "1002-D2", "url": "https://codeforces.com/contest/1002/problem/D2", "tags": [], "title": "1002-D2", "statement": "D2. Oracle for f(x) = b * x + (1 - b) * (1 - x) mod 2time limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputImplement a quantum oracle onNqubits which implements the following function:Here(a vector ofNintegers, each of which can be 0 or 1), andis a vector ofN1s.For an explanation on how this type of quantum oracles works, seeIntroduction to quantum oracles.You have to implement an operation which takes the following inputs:an array ofNqubitsxin arbitrary state (input register),1 ≤N≤ 8,a qubityin arbitrary state (output qubit),an array ofNintegersb, representing the vector. Each element ofbwill be 0 or 1.The operation doesn't have an output; its \"output\" is the state in which it leaves the qubits.Your code should have the following signature:namespace Solution {open Microsoft.Quantum.Primitive;open Microsoft.Quantum.Canon;operation Solve (x : Qubit[], y : Qubit, b : Int[]) : (){body{// your code here}}}", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "d2d03333", "template_md5": "35d339e4", "result": "You are given a set of $N$ qubits ($N$ can be between 1 and 8) and a function $f(x)$ defined as:\n\n$$f(x) = b_1x_1 + (1 - b_1)(1 - x_1) \\mod 2$$\n\nwhere:\n\n* $x$ is a vector of $N$ integers, each either 0 or 1.\n* $b$ is a vector of $N$ integers, each either 0 or 1.\n\nYou need to write a quantum program that implements this function as a quantum oracle. \n\nThe oracle takes the following inputs:\n\n* An array of $N$ qubits in an arbitrary state (input register).\n* One qubit in an arbitrary state (output qubit).\n* A vector of $N$ integers $b$.\n\nThe oracle does not produce an output. Instead, it modifies the state of the qubits."}, {"prompt_md5": "44363e78", "template_md5": "465699a0", "result": "You need to write a program that takes a set of bits and a single bit as input. The program should modify the set of bits based on a given set of rules. The rules are defined by another set of bits. The program doesn't produce any output, but it changes the state of the input bits."}]}