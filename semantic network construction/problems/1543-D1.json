{"uid": "1543-D1", "url": "https://codeforces.com/contest/1543/problem/D1", "tags": ["bitmasks", " constructive algorithms", " interactive", " math"], "title": "1543-D1", "statement": "D1. RPD and Rap Sheet (Easy Version)time limit per test5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the easy version of the problem. The only difference is that here $$$k=2$$$. You can make hacks only if both the versions of the problem are solved.This is an interactive problem.Every decimal number has a base $$$k$$$ equivalent. The individual digits of a base $$$k$$$ number are called $$$k$$$-its. Let's define the $$$k$$$-itwise XOR of two $$$k$$$-its $$$a$$$ and $$$b$$$ as $$$(a + b)\\\\bmod k$$$.The $$$k$$$-itwise XOR of two base $$$k$$$ numbers is equal to the new number formed by taking the $$$k$$$-itwise XOR of their corresponding $$$k$$$-its. The $$$k$$$-itwise XOR of two decimal numbers $$$a$$$ and $$$b$$$ is denoted by $$$a\\\\oplus_{k} b$$$ and is equal to the decimal representation of the $$$k$$$-itwise XOR of the base $$$k$$$ representations of $$$a$$$ and $$$b$$$. All further numbers used in the statement below are in decimal unless specified. When $$$k = 2$$$ (it is always true in this version), the $$$k$$$-itwise XOR is the same as thebitwise XOR.You have hacked the criminal database of Rockport Police Department (RPD), also known as the Rap Sheet. But in order to access it, you require a password. You don't know it, but you are quite sure that it lies between $$$0$$$ and $$$n-1$$$ inclusive. So, you have decided to guess it. Luckily, you can try at most $$$n$$$ times without being blocked by the system. But the system is adaptive. Each time you make an incorrect guess, it changes the password. Specifically, if the password before the guess was $$$x$$$, and you guess a different number $$$y$$$, then the system changes the password to a number $$$z$$$ such that $$$x\\\\oplus_{k} z=y$$$. Guess the password and break into the system.InputThe first line of input contains a single integer $$$t$$$ ($$$1\\\\leq t\\\\leq 10\\\\,000$$$) denoting the number of test cases. $$$t$$$ test cases follow.The first line of each test case contains two integers $$$n$$$ ($$$1\\\\leq n\\\\leq 2\\\\cdot 10^5$$$) and $$$k$$$ ($$$k=2$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\\\cdot 10^5$$$.InteractionFor each test case, first read two integers $$$n$$$ and $$$k$$$. Then you may ask up to $$$n$$$ queries.For each query, print a single integer $$$y$$$ ($$$0\\\\leq y\\\\leq 2\\\\cdot 10^7$$$). Let the current password be $$$x$$$. After that, read an integer $$$r$$$.If $$$x=y$$$, you will read $$$r=1$$$ and the test case is solved. You must then continue solving the remaining test cases.Else, you will read $$$r=0$$$. At this moment the password is changed to a number $$$z$$$ such that $$$x\\\\oplus_{k} z=y$$$.After printing a query, do not forget to output the end of line and flush the output. Otherwise, you will get theIdleness limit exceededverdict.To do this, use:fflush(stdout)orcout.flush()in C++;System.out.flush()in Java;flush(output)in Pascal;stdout.flush()in Python;see documentation for other languages.If you ask an invalid query or exceed $$$n$$$ queries, you will read $$$r=-1$$$ and you will receive theWrong Answerverdict. Make sure to exit immediately to avoid unexpected verdicts.Note that the interactor isadaptive. That is, the original password is not fixed in the beginning and may depend on your queries. But it is guaranteed that at any moment there is at least one initial password such that all the answers to the queries are consistent.Hacks:To use hacks, use the following format of tests:The first line should contain a single integer $$$t$$$ ($$$1\\\\leq t\\\\leq 10\\\\,000$$$) â€” the number of test cases.The first and only line of each test case should contain two integers $$$n$$$ ($$$1\\\\leq n\\\\leq 2\\\\cdot 10^5$$$) and $$$k$$$ ($$$k=2$$$) denoting the number of queries and the base respectively. The optimal original password is automatically decided by the adaptive interactor.You must ensure that the sum of $$$n$$$ over all test cases does not exceed $$$2\\\\cdot 10^5$$$.ExampleInput1 5 2  0  0  1Output3  4  5NoteIn the example test case, the hidden password is $$$2$$$.The first query is $$$3$$$. It is not equal to the current password. So, $$$0$$$ is returned, and the password is changed to $$$1$$$ since $$$2\\\\oplus_2 1=3$$$.The second query is $$$4$$$. It is not equal to the current password. So, $$$0$$$ is returned, and the password is changed to $$$5$$$ since $$$1\\\\oplus_2 5=4$$$.The third query is $$$5$$$. It is equal to the current password. So, $$$1$$$ is returned, and the job is done.Note that this initial password is taken just for the sake of explanation. When you submit, the interactor might behave differently because it is adaptive.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "9ed4c64e", "template_md5": "35d339e4", "result": "You need to guess a secret number between 0 and $n-1$.  You are allowed to make at most $n$ guesses. \n\nHere's how it works:\n\n* You guess a number $y$.\n* If $y$ is the secret number, you win and the game ends.\n* If $y$ is not the secret number, the secret number is changed to a new number $z$ such that  $x \\oplus_2 z = y$, where $x$ is the previous secret number.  ($\\oplus_2$ means bitwise XOR).\n\nYou need to find the secret number. \n\n\n\nLet me know if you'd like me to elaborate on any part of the rules."}, {"prompt_md5": "e8eeee31", "template_md5": "465699a0", "result": "You need to guess a secret number between 0 and n-1.  You can make up to n guesses. After each guess, if it's wrong, the secret number changes based on your guess using a specific rule (XOR operation with base 2). If you guess correctly, you win."}]}