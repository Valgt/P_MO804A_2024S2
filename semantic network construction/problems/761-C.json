{"uid": "761-C", "url": "https://codeforces.com/contest/761/problem/C", "tags": ["brute force", " dp", " implementation"], "title": "761-C", "statement": "C. Dasha and Passwordtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputAfter overcoming the stairs Dasha came to classes. She needed to write a password to begin her classes. The password is a string of lengthnwhich satisfies the following requirements:There is at least one digit in the string,There is at least one lowercase (small) letter of the Latin alphabet in the string,There is at least one of three listed symbols in the string: '#', '*', '&'.Considering that these are programming classes it is not easy to write the password.For each character of the password we have a fixed string of lengthm, on each of thesenstrings there is a pointer on some character. Thei-th character displayed on the screen is the pointed character in thei-th string. Initially, all pointers are on characters with indexes1in the corresponding strings (all positions are numbered starting from one).During one operation Dasha can move a pointer in one string one character to the left or to the right. Strings are cyclic, it means that when we move the pointer which is on the character with index1to the left, it moves to the character with the indexm, and when we move it to the right from the positionmit moves to the position1.You need to determine the minimum number of operations necessary to make the string displayed on the screen a valid password.InputThe first line contains two integersn,m(3 ≤n≤ 50, 1 ≤m≤ 50)— the length of the password and the length of strings which are assigned to password symbols.Each of the nextnlines contains the string which is assigned to thei-th symbol of the password string. Its length ism, it consists of digits, lowercase English letters, and characters '#', '*' or '&'.You have such input data that you can always get a valid password.OutputPrint one integer — the minimum number of operations which is necessary to make the string, which is displayed on the screen, a valid password.ExamplesInput3 41**2a3*0c4**Output1Input5 5#*&#**a1c&&q2w*#a3c#*&#*&Output3NoteIn the first test it is necessary to move the pointer of the third string to one left to get the optimal answer.In the second test one of possible algorithms will be:to move the pointer of the second symbol once to the right.to move the pointer of the third symbol twice to the right.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "ee8f03e9", "template_md5": "35d339e4", "result": "You are given a password of length $n$ and $m$ strings, each of length $m$. Each string represents a possible character for the password. Initially, a pointer is placed on the first character of each string.\n\nYou can move each pointer one position to the left or right within its string. The strings are cyclic, meaning moving the pointer to the left from the first position moves it to the last position, and vice versa.\n\nThe goal is to find the minimum number of pointer movements required to form a valid password. A valid password must contain at least one digit, one lowercase letter, and one of the symbols '#', '*', or '&'. \n\nInput:\n\n* The first line contains two integers, $n$ and $m$.\n* The next $n$ lines each contain a string of length $m$, representing the possible characters for the password.\n\nOutput:\n\n* An integer representing the minimum number of pointer movements needed to form a valid password."}, {"prompt_md5": "cc81a1e8", "template_md5": "465699a0", "result": "You are given a set of strings, each representing a part of a password. You can move a pointer within each string to the left or right. The goal is to find the minimum number of pointer movements needed to form a password that contains at least one digit, one lowercase letter, and one of the symbols '#', '*', or '&'."}]}