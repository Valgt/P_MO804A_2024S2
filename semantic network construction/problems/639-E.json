{"uid": "639-E", "url": "https://codeforces.com/contest/639/problem/E", "tags": ["binary search", " greedy", " math", " sortings"], "title": "639-E", "statement": "E. Bear and Paradoxtime limit per test3.5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputLimak is a big polar bear. He preparednproblems for an algorithmic contest. Thei-th problem hasinitialscorepi. Also, testers said that it takestiminutes to solve thei-th problem. Problems aren't necessarily sorted by difficulty and maybe harder problems have smaller initial score but it's too late to change it — Limak has already announced initial scores for problems. Though it's still possible to adjust the speed of losing points, denoted bycin this statement.LetTdenote the total number of minutes needed to solve all problems (so,T=t1+t2+ ... +tn). The contest will last exactlyTminutes. So it's just enough to solve all problems.Points given for solving a problem decrease linearly. Solving thei-th problem afterxminutes gives exactlypoints, whereis some real constant that Limak must choose.Let's assume thatcis fixed. During a contest a participant chooses some order in which he or she solves problems. There aren!possible orders and each of them gives some total number of points, not necessarily integer. We say that an order isoptimalif it gives the maximum number of points. In other words, the total number of points given by this order is greater or equal than the number of points given by any other order. It's obvious that there is at least one optimal order. However, there may be more than one optimal order.Limak assumes that every participant will properly estimatetiat the very beginning and will choose some optimal order. He also assumes that testers correctly predicted time needed to solve each problem.For two distinct problemsiandjsuch thatpi<pjLimak wouldn't be happy to see a participant with strictly more points for problemithan for problemj. He calls such a situation aparadox.It's not hard to prove that there will be no paradox forc= 0. The situation may be worse for biggerc. What is the maximum real valuec(remember that) for which there is no paradox possible, that is, there will be no paradox forany optimal orderof solving problems?It can be proved that the answer (the maximumcas described) always exists.InputThe first line contains one integern(2 ≤n≤ 150 000) — the number of problems.The second line containsnintegersp1,p2, ...,pn(1 ≤pi≤ 108) — initial scores.The third line containsnintegerst1,t2, ...,tn(1 ≤ti≤ 108) wheretiis the number of minutes needed to solve thei-th problem.OutputPrint one real value on a single line — the maximum value ofcthatand there is no optimal order with a paradox. Your answer will be considered correct if its absolute or relative error does not exceed10- 6.Namely: let's assume that your answer isa, and the answer of the jury isb. The checker program will consider your answer correct if.ExamplesInput34 3 101 1 8Output0.62500000000Input47 20 15 107 20 15 10Output0.31901840491Input210 2010 1Output1.00000000000NoteIn the first sample, there are3problems. The first is(4, 1)(initial score is4and required time is1minute), the second problem is(3, 1)and the third one is(10, 8). The total time isT= 1 + 1 + 8 = 10.Let's show that there is a paradox forc= 0.7. Solving problems in order1,2,3turns out to give the best total score, equal to the sum of:solved1minute after the start:solved2minutes after the start:solved10minutes after the start:So, this order gives3.72 + 2.58 + 3 = 9.3points in total and this is the only optimal order (you can calculate total scores for other5possible orders too see that they are lower). You should check points for problems1and3to see a paradox. There is4 < 10but3.72 > 3. It turns out that there is no paradox forc= 0.625but there is a paradox for any biggerc.In the second sample, all24orders are optimal.In the third sample, even forc= 1there is no paradox.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "01f27ddd", "template_md5": "465699a0", "result": "You are given a list of tasks with initial scores and time requirements.  You need to find the maximum rate at which points decrease over time so that no matter how people choose to complete the tasks, a task with a lower initial score will never have a higher final score than a task with a higher initial score."}, {"prompt_md5": "363a90b4", "template_md5": "35d339e4", "result": "There are $n$ problems, each with an initial score $p_i$ and a time $t_i$ required to solve it.  The contest lasts for a total time $T = t_1 + t_2 + ... + t_n$.\n\nPoints for solving a problem decrease linearly over time.  Solving the $i$-th problem after $x$ minutes gives $p_i - cx$ points, where $c$ is a constant that needs to be determined.\n\nFind the maximum value of $c$ such that there is no \"paradox\" for any optimal order of solving the problems. A paradox occurs when a participant earns more points for a problem with a lower initial score than for a problem with a higher initial score. \n\n\n\nLet me know if you'd like me to elaborate on any part of the problem statement."}]}