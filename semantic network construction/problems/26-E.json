{"uid": "26-E", "url": "https://codeforces.com/contest/26/problem/E", "tags": ["constructive algorithms"], "title": "26-E", "statement": "E. Multithreadingtime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutYou are given the following concurrent program. There areNprocesses and thei-th process has the following pseudocode:repeatnitimesyi:=yy:=yi+ 1end repeatHereyis a shared variable. Everything else is local for the process. All actions on a given row are atomic, i.e. when the process starts executing a row it is never interrupted. Beyond that all interleavings are possible, i.e. every process that has yet work to do can be granted the rights to execute its next row. In the beginningy= 0. You will be given an integerWandni, fori= 1, ... ,N. Determine if it is possible that after all processes terminate,y=W, and if it is possible output an arbitrary schedule that will produce this final value.InputIn the first line of the input you will be given two space separated integersN(1 ≤N≤ 100) andW(- 109≤W≤ 109). In the second line there areNspace separated integersni(1 ≤ni≤ 1000).OutputOn the first line of the output writeYesif it is possible that at the endy=W, orNootherwise. If the answer isNothen there is no second line, but if the answer isYes, then on the second line output a space separated list of integers representing some schedule that leads to the desired result. For more information see note.ExamplesInput1 1011OutputNoInput2 34 4OutputYes1 1 2 1 2 2 2 2 2 1 2 1 1 1 1 2Input3 61 2 3OutputYes1 1 2 2 2 2 3 3 3 3 3 3NoteFor simplicity, assume that there is no repeat statement in the code of the processes, but the code from the loop is written the correct amount of times. The processes are numbered starting from 1. The list of integers represent which process works on its next instruction at a given step. For example, consider the schedule1 2 2 1 3. First process1executes its first instruction, then process2executes its first two instructions, after that process1executes its second instruction, and finally process3executes its first instruction. The list must consists of exactly2·Σi= 1...Nninumbers.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "0025f6f6", "template_md5": "35d339e4", "result": "You are given $N$ processes. Each process has a loop that runs $n_i$ times, where $n_i$ is the number of times the $i$-th process loops.  Inside the loop, each process increments a shared variable $y$ by 1.  \n\nYou are also given a target value $W$.  \n\nDetermine if it is possible for the value of $y$ to equal $W$ after all processes finish executing. If it is possible, provide a schedule that shows the order in which the processes execute their instructions to achieve this result. \n\n**Input:**\n\n* The first line contains two integers, $N$ and $W$ ($1 \\le N \\le 100$, $-10^9 \\le W \\le 10^9$).\n* The second line contains $N$ integers, $n_1, n_2, ..., n_N$ ($1 \\le n_i \\le 1000$).\n\n**Output:**\n\n* If it is possible to reach $W$, print \"Yes\" on the first line, followed by a space-separated list of integers representing a valid schedule on the second line. \n* If it is not possible to reach $W$, print only \"No\".\n\n\n\n**Note:**\n\n* A schedule is a sequence of integers, where each integer represents the index of the process that executes its next instruction. \n* The schedule must have a length of $2 \\cdot \\sum_{i=1}^{N} n_i$."}, {"prompt_md5": "046acefc", "template_md5": "465699a0", "result": "You have multiple workers. Each worker has a set number of tasks to complete. Each task increments a shared counter.  Determine if it's possible for the counter to reach a specific target value after all workers finish their tasks. If possible, provide a sequence showing the order in which workers complete their tasks to achieve the target."}]}