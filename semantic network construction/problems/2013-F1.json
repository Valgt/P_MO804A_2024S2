{"uid": "2013-F1", "url": "https://codeforces.com/contest/2013/problem/F1", "tags": ["binary search", " brute force", " data structures", " dp", " games", " greedy", " implementation", " trees"], "title": "2013-F1", "statement": "F1. Game in Tree (Easy Version)time limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the easy version of the problem. In this version, $$$\\\\mathbf{u = v}$$$. You can make hacks only if both versions of the problem are solved.Alice and Bob are playing a fun game on a tree. This game is played on a tree with $$$n$$$ vertices, numbered from $$$1$$$ to $$$n$$$. Recall that a tree with $$$n$$$ vertices is an undirected connected graph with $$$n - 1$$$ edges.Alice and Bob take turns, with Alice going first. Each player starts at some vertex.On their turn, a player must move from the current vertex to a neighboring vertex that has not yet been visited by anyone. The first player who cannot make a move loses.You are given two vertices $$$u$$$ and $$$v$$$. Represent the simple path from vertex $$$u$$$ to $$$v$$$ as an array $$$p_1, p_2, p_3, \\\\ldots, p_m$$$, where $$$p_1 = u$$$, $$$p_m = v$$$, and there is an edge between $$$p_i$$$ and $$$p_{i + 1}$$$ for all $$$i$$$ ($$$1 \\\\le i < m$$$).You need to determine the winner of the game if Alice starts at vertex $$$1$$$ and Bob starts at vertex $$$p_j$$$ for each $$$j$$$ (where $$$1 \\\\le j \\\\le m$$$).InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$). The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$2 \\\\le n \\\\le 2 \\\\cdot 10^5$$$) — the number of vertices in the tree.Each of the following $$$n - 1$$$ lines contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\\\le a, b \\\\le n$$$), denoting an undirected edge between vertices $$$a$$$ and $$$b$$$. It is guaranteed that these edges form a tree.The last line of each test case contains two integers $$$u$$$ and $$$v$$$ ($$$2 \\\\le u, v \\\\le n$$$, $$$\\\\mathbf{u = v}$$$).It is guaranteed that the path from $$$u$$$ to $$$v$$$ does not pass through vertex $$$1$$$.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\\\cdot 10^5$$$.OutputFor each test case, output $$$m$$$ lines.In the $$$i$$$-th line, print the winner of the game if Alice starts at vertex $$$1$$$ and Bob starts at vertex $$$p_i$$$. Print \"Alice\" (without quotes) if Alice wins, or \"Bob\" (without quotes) otherwise.ExampleInput331 22 32 231 22 33 361 21 32 42 51 64 4OutputBob Alice AliceNoteTree from the first and second examples.In the first test case, the path will be ($$$2,2$$$). Bob starts at vertex $$$2$$$, Alice will not be able to move anywhere on her first turn and will lose.In the second test case, the path will be ($$$3,3$$$). Bob starts at vertex $$$3$$$, Alice will move to vertex $$$2$$$, and Bob will have no remaining vertices to visit and will lose.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "9cd82aad", "template_md5": "35d339e4", "result": "You are given a tree with $n$ vertices, numbered from 1 to $n$.  \n\nTwo players take turns moving on the tree.  A player can move from their current vertex to any unvisited neighboring vertex. The first player who cannot make a move loses.\n\nFor each test case, you are given:\n\n* The number of vertices $n$\n* The edges of the tree (each edge is defined by two vertices)\n* Two vertices $u$ and $v$ ($u=v$)\n* A path $p_1, p_2, ..., p_m$ from vertex $u$ to $v$\n\nFor each vertex $p_i$ in the path, determine the winner of the game if Player 1 starts at vertex 1 and Player 2 starts at vertex $p_i$."}, {"prompt_md5": "8e9468a3", "template_md5": "465699a0", "result": "You are given a tree with numbered nodes. Two players take turns moving between connected nodes. The first player to be unable to make a move loses.  \n\nDetermine the winner for each starting position of the second player along a specific path from node 1 to another node."}]}