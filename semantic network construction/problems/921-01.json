{"uid": "921-01", "url": "https://codeforces.com/contest/921/problem/01", "tags": [], "title": "921-01", "statement": "01. Labyrinth-1time limit per test8 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou have a robot in a two-dimensional labyrinth which consists ofN×Mcells. Some pairs of cells adjacent by side are separated by a wall or a door. The labyrinth itself is separated from the outside with walls around it. Some labyrinth cells are the exits. In order to leave the labyrinth the robot should reach any exit. There are keys in some cells. Any key can open any door but after the door is opened the key stays in the lock. Thus every key can be used only once. There are no labyrinth cells that contain both a key and an exit. Also there can not be both a wall and a door between the pair of adjacent cells.Your need to write a program inabclanguage (see the language description below) that will lead the robot to one of the exits. Lets numerate the labyrinth rows from0toN- 1top to bottom and the columns – from0toM- 1left to right.Inabclanguage the following primary commands are available:move-DIR– move to the adjacent cell in thedirection.downincreases the number of the row by 1,rightincreases the number of the column by 1. In case there’s a wall or a closed door in this direction, nothing’s happening.open-DIR– open the door between the current cell and the adjacent one inDIRdirection. In case there isn’t any door in this direction or it’s already been opened or the robot doesn’t have a key, nothing’s happening.take– take the key in the current cell. In case there isn’t any key or the robot has already picked it up, nothing’s happening. The robot is able to carry any number of keys.terminate– terminate the program. This command is not obligatory to use. In case it’s absent the command is added at the end of the program automatically.Also, there are the following control commands inabclanguage:for-N OPS end– repeat the sequence of theOPScommandsNtimes,0 <N≤ 100000. Each loop counter check counts as a command fulfilled by the robot.if-ok  OPS1  else  OPS2  endif– carries out the sequence of theOPS1commands, if the previous command of moving, taking the key or opening the door was successful, otherwise the sequence of theOPS2commands is being carried out. Should there be no previous command run, the sequenceOPS1will be carried out. If-ok check counts as a command fulfilled by the robot.break– stops the currentforloop.continue– finishes the currentforloop iterations.Note that the control and the primary commands can be fit into each other arbitrarily.The robot will fulfill your commands sequentially until it exits the labyrinth, or it runs out of the commands, or theterminatecommand is run, or the quantity of the fulfilled commands exceeds the bound number5·106.Inabclanguage each command is a separate word and should be separated from other commands with at least one space symbol.You should write a program that prints the sequence of commands leading the robot out of the labyrinth. Of course, as you are a good programmer, you should optimize these sequence.The number of the non-space symbols in the sequence should not exceed107. If you succeed in finding the way out of the labyrinthiyou’ll be granted the number of points equal to:where:Wi– labyrinth’s weight, some fixed constant.Gi– number of robots moves.Oi– number of fulfilled commands. Note that this number includes commands liketakeexecuted in the cells with no key, as well as opening commands applied to the already opened doors.Li– sequence length in symbols, excluding space symbols and line breaks.Q= 10·N·M.In case your sequence doesn’t lead the robot to the exit you’ll be granted0points. Your programs result will be the sum of allSi. You should maximize this total sum.All labyrinths will be known and available to you. You can download the archive with labyrinths by any of the given links, password to extract files isaimtechiscool:https://drive.google.com/file/d/1dkIBfW_Gy6c3FJtXjMXZPMsGKRyn3pzphttps://www.dropbox.com/s/77jrplnjgmviiwt/aimmaze.zip?dl=0https://yadi.sk/d/JNXDLeH63RzaCiIn order to make local testing of your programs more convenient, the program calculating your results (checker) and the labyrinth visualizer will be available. This program is written inpython3programming language, that’s why you’re going to needpython3interpreter, as well aspillowlibrary, which you can install with the following commandpip3 install pillow.pip3is a utility program forpython3package (library) installation. It will be installed automatically with thepython3interpreter.Example command to run checker and visualizer:python3 aimmaze.py maze.in robot.abc --image maze.png. The checker can be run separately of visualization:python3 aimmaze.py maze.in robot.abc. Flag--output-logwill let you see the information of robots each step:python3 aimmaze.py maze.in robot.abc --output-log. Notepython3can be installed aspythonon your computer.To adjust image settings, you can edit constants at the beginning of the programaimmaze.py.InputThe first line contains integersi,W,N,M,x0,y0,C,D,K,E.1 ≤i≤ 14– labyrinth’s number, which is needed for a checking program.1 ≤W≤ 1018– labyrinth’s weight, which is needed for a checking program.2 ≤N,M≤ 1000– labyrinth’s height and width.0 ≤x0≤N- 1,  0 ≤y0≤M- 1– robot’s starting position(x0,y0).0 ≤C≤ 2·NM– number of walls.0 ≤D≤ 105– number of doors.0 ≤K≤ 105– number of keys.1 ≤E≤ 1000– number of exits.Thexcoordinate corresponds to the row number,y– to the column number.(0, 0)cell is located on the left-up corner, so thatdowndirection increases thexcoordinate, whilerightdirection increases theycoordinate.Each of the nextClines contains4integers eachx1,y1,x2,y2– the coordinates of cells with a wall between them in a zero based indexing. It is guaranteed that|x1-x2| + |y1-y2| = 1,  0 ≤x1,x2≤N- 1,  0 ≤y1,y2≤M- 1. Also there are always walls around the labyrinth’s borders, which are not given in the labyrinths description.Each of the nextDlines contains door description in the same format as walls description. It is guaranteed that doors and walls don’t overlap.Each of the nextKrows contains a pair of integer which are the key coordinates in a zero based indexing.Each of the nextErows contains a pair of integer which are the exit coordinates in a zero based indexing.It is guaranteed that the robots starting position as well as keys and exits are located in pairwise different cells.OutputPrint a program inabclanguage which passes the given labyrinth. Commands have to be separated by at least one space symbol. You can use arbitrary formatting for the program.ExampleInput1 1 30 30 1 1 1 1 1 11 1 1 22 2 2 31 49 0Outputfor-1111takeopen-upopen-leftopen-rightopen-downmove-leftif-okfor-11move-lefttakeopen-upopen-leftopen-rightopen-downendelsemove-rightif-okfor-11move-righttakeopen-upopen-leftopen-rightopen-downendelse endifendifmove-upif-okfor-11move-uptakeopen-upopen-leftopen-rightopen-downendelsemove-downif-okfor-11move-downtakeopen-upopen-leftopen-rightopen-downendelse endifendifend", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "d171b58e", "template_md5": "35d339e4", "result": "You are given a 2D grid representing a maze. The grid has walls, doors, keys, and exits. The robot starts at a specific cell and needs to reach an exit. \n\nHere's how the grid works:\n\n* **Walls:** Prevent movement.\n* **Doors:** Can be opened with a key.\n* **Keys:** Can be taken and used to open doors. Each key can only be used once.\n* **Exits:** The robot's goal.\n\nYou need to write a program that instructs the robot to navigate the maze and reach an exit.\n\n**Programming Language:**\n\nThe program must be written in a language called \"abcl\".  Here are the basic commands:\n\n* **move-DIR:** Moves the robot to an adjacent cell in the specified direction (up, down, left, right). If there's a wall or closed door, nothing happens.\n* **open-DIR:** Opens the door in the specified direction if it exists and is not already open.\n* **take:** Takes the key from the current cell if one exists.\n* **terminate:** Ends the program.\n\n**Control Commands:**\n\n* **for-N OPS end:** Repeats the sequence of commands \"OPS\" N times.\n* **if-ok OPS1 else OPS2 endif:** Executes \"OPS1\" if the previous move, take, or open command was successful. Otherwise, executes \"OPS2\".\n* **break:** Exits the current \"for\" loop.\n* **continue:** Skips to the next iteration of the current \"for\" loop.\n\n**Input:**\n\nThe input describes the maze, including the robot's starting position, walls, doors, keys, and exits.\n\n**Output:**\n\nYour program should output a sequence of \"abcl\" commands that lead the robot to an exit.\n\n**Scoring:**\n\nThe program's score is based on:\n\n* **Weight (W):** A constant value associated with the maze.\n* **Moves (G):** The number of moves the robot makes.\n* **Commands (O):** The total number of commands executed.\n* **Sequence Length (L):** The number of characters in the command sequence (excluding spaces and line breaks).\n\nThe goal is to maximize the score."}, {"prompt_md5": "28f17d59", "template_md5": "465699a0", "result": "You are given a maze with walls, doors, keys, and exits. You need to write a program that guides a robot through the maze to reach an exit. The robot can move up, down, left, or right. Doors can be opened with keys, and each key can only be used once.  The program must be written in a specific language with commands like \"move\", \"open\", \"take\", and control flow statements like \"if\" and \"for\". The goal is to find the shortest path to an exit while minimizing the number of commands used."}]}