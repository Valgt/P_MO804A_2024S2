{"uid": "827-D", "url": "https://codeforces.com/contest/827/problem/D", "tags": ["data structures", " dfs and similar", " graphs", " trees"], "title": "827-D", "statement": "D. Best Edge Weighttime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a connected weighted graph withnvertices andmedges. The graph doesn't contain loops nor multiple edges. Consider some edge with idi. Let's determine for this edge the maximum integer weight we can give to it so that it is contained in all minimum spanning trees of the graph if we don't change the other weights.You are to determine this maximum weight described above for each edge. You should calculate the answer for each edge independently, it means there can't be two edges with changed weights at the same time.InputThe first line contains two integersnandm(2 ≤n≤ 2·105,n- 1 ≤m≤ 2·105), wherenandmare the number of vertices and the number of edges in the graph, respectively.Each of the nextmlines contains three integersu,vandc(1 ≤v,u≤n,v≠u,1 ≤c≤ 109) meaning that there is an edge between verticesuandvwith weightc.OutputPrint the answer for each edge in the order the edges are given in the input. If an edge is contained in every minimum spanning tree with any weight, print-1as the answer.ExamplesInput4 41 2 22 3 23 4 24 1 3Output2 2 2 1Input4 31 2 22 3 23 4 2Output-1 -1 -1", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "88a6d71c", "template_md5": "35d339e4", "result": "You are given a connected graph with $n$ vertices and $m$ edges. Each edge has a weight.  \n\nFor each edge, find the largest weight you can give it so that the edge is still included in every possible minimum spanning tree of the graph.  \n\n**Input:**\n\n* The first line contains two integers, $n$ and $m$, representing the number of vertices and edges, respectively.\n* The next $m$ lines each contain three integers, $u$, $v$, and $c$, representing an edge between vertices $u$ and $v$ with weight $c$.\n\n**Output:**\n\n* Print the maximum weight for each edge, in the order they appear in the input. If an edge is already in every minimum spanning tree regardless of its weight, print -1."}, {"prompt_md5": "904eb498", "template_md5": "465699a0", "result": "You are given a network of connected points with weighted connections between them.  Find the maximum weight you can give to each connection so that it remains part of the shortest possible set of connections needed to link all the points together.  If a connection is already part of the shortest set regardless of its weight, output -1."}]}