{"uid": "938-G", "url": "https://codeforces.com/contest/938/problem/G", "tags": ["bitmasks", " data structures", " dsu", " graphs"], "title": "938-G", "statement": "G. Shortest Path Queriestime limit per test3.5 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou are given an undirected connected graph with weighted edges. The length of some path between two vertices is the bitwise xor of weights of all edges belonging to this path (if some edge is traversed more than once, then it is included in bitwise xor the same number of times).There are three types of queries you have to process:1xyd— add an edge connecting vertexxto vertexywith weightd. It is guaranteed that there is no edge connectingxtoybefore this query;2xy— remove an edge connecting vertexxto vertexy. It is guaranteed that there was such edge in the graph, and the graph stays connected after this query;3xy— calculate the length of the shortest path (possibly non-simple) from vertexxto vertexy.Print the answers for all queries of type3.InputThe first line contains two numbersnandm(1 ≤n,m≤ 200000) — the number of vertices and the number of edges in the graph, respectively.Thenmlines follow denoting the edges of the graph. Each line contains three integersx,yandd(1 ≤x<y≤n,0 ≤d≤ 230- 1). Each pair(x,y)is listed at most once. The initial graph is connected.Then one line follows, containing an integerq(1 ≤q≤ 200000) — the number of queries you have to process.Thenqlines follow, denoting queries in the following form:1xyd(1 ≤x<y≤n,0 ≤d≤ 230- 1) — add an edge connecting vertexxto vertexywith weightd. It is guaranteed that there is no edge connectingxtoybefore this query;2xy(1 ≤x<y≤n) — remove an edge connecting vertexxto vertexy. It is guaranteed that there was such edge in the graph, and the graph stays connected after this query;3xy(1 ≤x<y≤n) — calculate the length of the shortest path (possibly non-simple) from vertexxto vertexy.It is guaranteed that at least one query has type3.OutputPrint the answers for all queries of type3in the order they appear in input.ExampleInput5 51 2 32 3 43 4 54 5 61 5 153 1 51 1 3 13 1 52 1 53 1 5Output112", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "bc6771ba", "template_md5": "35d339e4", "result": "You are given a connected graph with weighted edges. The weight of a path between two vertices is the bitwise XOR of the weights of all edges in the path.  \n\nYou need to process three types of queries:\n\n1. **Add an edge:** Add an edge between two vertices with a given weight.\n2. **Remove an edge:** Remove an existing edge between two vertices.\n3. **Shortest path:** Calculate the shortest path (not necessarily simple) between two vertices and print its weight.\n\nInput:\n\n* The first line contains two integers, $n$ and $m$, representing the number of vertices and edges, respectively.\n* The next $m$ lines describe the initial edges, each with three integers: $x$, $y$, and $d$ (the vertices connected by the edge and the edge weight).\n* The next line contains an integer $q$, the number of queries.\n* The following $q$ lines describe the queries (add, remove, or shortest path).\n\nOutput:\n\n* Print the answers to all shortest path queries in the order they appear in the input."}, {"prompt_md5": "c583bc10", "template_md5": "465699a0", "result": "You are given a network of connected points. Each connection between points has a weight.  You need to find the shortest path between two points, where the path's length is calculated by taking the bitwise XOR of all the connection weights along the path.  You will be given operations to add and remove connections, and you need to calculate the shortest path length after each operation."}]}