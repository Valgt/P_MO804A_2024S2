{"uid": "1499-G", "url": "https://codeforces.com/contest/1499/problem/G", "tags": ["data structures", " graphs", " interactive"], "title": "1499-G", "statement": "G. Graph Coloringtime limit per test7 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputYou are given a bipartite graph consisting of $$$n_1$$$ vertices in the first part, $$$n_2$$$ vertices in the second part, and $$$m$$$ edges, numbered from $$$1$$$ to $$$m$$$. You have to color each edge into one of two colors, red and blue. You have to minimize the following value: $$$\\\\sum \\\\limits_{v \\\\in V} |r(v) - b(v)|$$$, where $$$V$$$ is the set of vertices of the graph, $$$r(v)$$$ is the number of red edges incident to $$$v$$$, and $$$b(v)$$$ is the number of blue edges incident to $$$v$$$.Sounds classical and easy, right? Well, you have to process $$$q$$$ queries of the following format:$$$1$$$ $$$v_1$$$ $$$v_2$$$ — add a new edge connecting the vertex $$$v_1$$$ of the first part with the vertex $$$v_2$$$ of the second part. This edge gets a new index as follows: the first added edge gets the index $$$m + 1$$$, the second — $$$m + 2$$$, and so on. After adding the edge, you have to print thehashof the current optimal coloring (if there are multiple optimal colorings, print thehashof any of them).Actually, this hash won't be verified, you may print any number as the answer to this query, but you may be asked to produce the coloring having this hash;$$$2$$$ — print the optimal coloring of the graph with the samehashyou printed while processing the previous query. The query of this type will only be asked after a query of type $$$1$$$, and there will be at most $$$10$$$ queries of this type. If there are multiple optimal colorings corresponding to thishash, print any of them.Note that if an edge was red or blue in some coloring, it may change its color in next colorings.Thehashof the coloring is calculated as follows: let $$$R$$$ be the set of indices of red edges, then thehashis $$$(\\\\sum \\\\limits_{i \\\\in R} 2^i) \\\\bmod 998244353$$$.Note that you should solve the problem inonlinemode. It means that you can't read the whole input at once. You can read each query only after writing the answer for the last query. Use functionsfflushinC++andBufferedWriter.flushinJavalanguages after each writing in your program.InputThe first line contains three integers $$$n_1$$$, $$$n_2$$$ and $$$m$$$ ($$$1 \\\\le n_1, n_2, m \\\\le 2 \\\\cdot 10^5$$$).Then $$$m$$$ lines follow, the $$$i$$$-th of them contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \\\\le x_i \\\\le n_1$$$; $$$1 \\\\le y_i \\\\le n_2$$$) meaning that the $$$i$$$-th edge connects the vertex $$$x_i$$$ from the first part and the vertex $$$y_i$$$ from the second part.The next line contains one integer $$$q$$$ ($$$1 \\\\le q \\\\le 2 \\\\cdot 10^5$$$) — the number of queries you have to process.The next $$$q$$$ lines contain the queries in the format introduced in the statement.Additional constraints on the input:at any moment, the graph won't contain any multiple edges;the queries of type $$$2$$$ are only asked if the previous query had type $$$1$$$;there are at most $$$10$$$ queries of type $$$2$$$.OutputTo answer a query of type $$$1$$$, print one integer — thehashof the optimal coloring.To answer a query of type $$$2$$$, print one line. It should begin with the integer $$$k$$$ — the number of red edges. Then, $$$k$$$distinctinteger should follow — the indices ofrededges in your coloring, in any order. Each index should correspond to an existing edge, and thehashof the coloring you produce should be equal to thehashyou printed as the answer to the previous query.If there are multiple answers to a query, you may print any of them.ExampleInput3 4 2 1 2 3 4 10 1 1 3 1 2 3 2 1 3 3 2 1 2 4 2 1 2 1 1 1 1 2Output8 8 1 3 40 2 3 5 104 3 5 6 3 104 360 4 5 6 3 8", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "7bd60691", "template_md5": "35d339e4", "result": "You are given a graph with two sets of vertices, one with $n_1$ vertices and the other with $n_2$ vertices. There are $m$ edges connecting these two sets. You need to color each edge either red or blue.\n\nYour goal is to minimize the following sum:\n\n$$\\sum_{v \\in V} |r(v) - b(v)|$$\n\nwhere:\n\n* $V$ is the set of all vertices in the graph.\n* $r(v)$ is the number of red edges connected to vertex $v$.\n* $b(v)$ is the number of blue edges connected to vertex $v$.\n\nYou will receive $q$ queries. Each query can be one of two types:\n\n* **Type 1:** Add a new edge between a vertex from the first set ($v_1$) and a vertex from the second set ($v_2$). After adding the edge, calculate and print the hash of the optimal coloring. The hash is calculated as:\n\n$$( \\sum_{i \\in R} 2^i) \\mod 998244353$$\n\nwhere $R$ is the set of indices of red edges.\n\n* **Type 2:** Print the actual coloring (which edges are red and which are blue) corresponding to the hash you printed in the previous Type 1 query.\n\n**Important Notes:**\n\n* You must process the queries online, meaning you can only read and process one query at a time.\n* There will be at most 10 Type 2 queries.\n* If there are multiple optimal colorings, you can print any of them.\n\n\n\nLet me know if you have any other questions."}, {"prompt_md5": "a378c7d1", "template_md5": "465699a0", "result": "You are given a graph with two sets of vertices. You need to color the edges of the graph red or blue. The goal is to minimize the difference between the number of red edges and blue edges connected to each vertex. \n\nYou will be given queries to add new edges to the graph. After each addition, you need to output a unique number representing the current best coloring. Later, you may be asked to provide the actual coloring corresponding to that number."}]}