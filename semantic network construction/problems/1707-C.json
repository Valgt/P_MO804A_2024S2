{"uid": "1707-C", "url": "https://codeforces.com/contest/1707/problem/C", "tags": ["dfs and similar", " dsu", " graphs", " greedy", " sortings", " trees"], "title": "1707-C", "statement": "C. DFS Treestime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a connected undirected graph consisting of $$$n$$$ vertices and $$$m$$$ edges. The weight of the $$$i$$$-th edge is $$$i$$$.Here is a wrong algorithm of finding aminimum spanning tree(MST) of a graph:vis := an array of length ns := a set of edgesfunction dfs(u):vis[u] := trueiterate through each edge (u, v) in the order from smallest to largest edge weightif vis[v] = falseadd edge (u, v) into the set (s)dfs(v)function findMST(u):reset all elements of (vis) to falsereset the edge set (s) to emptydfs(u)return the edge set (s)Each of the callsfindMST(1),findMST(2), ...,findMST(n)gives you a spanning tree of the graph. Determine which of these trees are minimum spanning trees.InputThe first line of the input contains two integers $$$n$$$, $$$m$$$ ($$$2\\\\le n\\\\le 10^5$$$, $$$n-1\\\\le m\\\\le 2\\\\cdot 10^5$$$) — the number of vertices and the number of edges in the graph.Each of the following $$$m$$$ lines contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1\\\\le u_i, v_i\\\\le n$$$, $$$u_i\\\\ne v_i$$$), describing an undirected edge $$$(u_i,v_i)$$$ in the graph. The $$$i$$$-th edge in the input has weight $$$i$$$.It is guaranteed that the graph is connected and there is at most one edge between any pair of vertices.OutputYou need to output a binary string $$$s$$$, where $$$s_i=1$$$ iffindMST(i)creates an MST, and $$$s_i = 0$$$ otherwise.ExamplesInput5 5 1 2 3 5 1 3 3 2 4 2Output01111Input10 11 1 2 2 5 3 4 4 2 8 1 4 5 10 5 9 5 8 2 5 7 4 6Output0011111011NoteHere is the graph given in the first example.There is only one minimum spanning tree in this graph. A minimum spanning tree is $$$(1,2),(3,5),(1,3),(2,4)$$$ which has weight $$$1+2+3+5=11$$$.Here is a part of the process of callingfindMST(1):reset the arrayvisand the edge sets;callingdfs(1);vis[1] := true;iterate through each edge $$$(1,2),(1,3)$$$;add edge $$$(1,2)$$$ into the edge sets, callingdfs(2):vis[2] := trueiterate through each edge $$$(2,1),(2,3),(2,4)$$$;becausevis[1] = true, ignore the edge $$$(2,1)$$$;add edge $$$(2,3)$$$ into the edge sets, callingdfs(3):...In the end, it will select edges $$$(1,2),(2,3),(3,5),(2,4)$$$ with total weight $$$1+4+2+5=12>11$$$, sofindMST(1)does not find a minimum spanning tree.It can be shown that the other trees are all MSTs, so the answer is01111.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "0a942953", "template_md5": "35d339e4", "result": "You are given a connected graph with $n$ vertices and $m$ edges. Each edge has a weight equal to its index (the first edge has weight 1, the second edge has weight 2, and so on).\n\nYou are given a function `findMST(u)` that takes a vertex $u$ as input and returns a spanning tree of the graph rooted at $u$. This function uses a Depth First Search (DFS) algorithm to find the spanning tree.\n\nDetermine which of the calls `findMST(1)`, `findMST(2)`, ..., `findMST(n)` return a minimum spanning tree (MST) of the graph. Output a binary string where the $i$-th bit is 1 if `findMST(i)` returns an MST, and 0 otherwise.\n\n**Input:**\n\n* The first line contains two integers $n$ and $m$ ($2 \\le n \\le 10^5$, $n-1 \\le m \\le 2 \\cdot 10^5$) representing the number of vertices and edges, respectively.\n* Each of the following $m$ lines contains two integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$, $u_i \\ne v_i$) representing an edge between vertices $u_i$ and $v_i$.\n\n**Output:**\n\n* A binary string of length $n$ where the $i$-th bit is 1 if `findMST(i)` returns an MST, and 0 otherwise."}, {"prompt_md5": "413b4d27", "template_md5": "465699a0", "result": "You are given a connected network of points with weighted connections between them.  You need to determine which of several possible ways to select a subset of connections that form a complete loop (a \"spanning tree\") results in the smallest total weight."}]}