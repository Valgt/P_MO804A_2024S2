{"uid": "1686-B", "url": "https://codeforces.com/contest/1686/problem/B", "tags": ["dp", " greedy"], "title": "1686-B", "statement": "B. Odd Subarraystime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputFor an array $$$[b_1, b_2, \\\\ldots, b_m]$$$ define its number of inversions as the number of pairs $$$(i, j)$$$ of integers such that $$$1 \\\\le i < j \\\\le m$$$ and $$$b_i>b_j$$$. Let's call array $$$b$$$oddif its number of inversions is odd.For example, array $$$[4, 2, 7]$$$ is odd, as its number of inversions is $$$1$$$, while array $$$[2, 1, 4, 3]$$$ isn't, as its number of inversions is $$$2$$$.You are given a permutation $$$[p_1, p_2, \\\\ldots, p_n]$$$ of integers from $$$1$$$ to $$$n$$$ (each of them appears exactly once in the permutation). You want to split it into several consecutive subarrays (maybe just one), so that the number of theoddsubarrays among them is as large as possible.What largest number of these subarrays may beodd?InputThe first line of the input contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^5$$$)  — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 10^5$$$)  — the size of the permutation.The second line of each test case contains $$$n$$$ integers $$$p_1, p_2, \\\\ldots, p_n$$$ ($$$1 \\\\le p_i \\\\le n$$$, all $$$p_i$$$ are distinct)  — the elements of the permutation.The sum of $$$n$$$ over all test cases doesn't exceed $$$2\\\\cdot 10^5$$$.OutputFor each test case output a single integer  — the largest possible number ofoddsubarrays that you can get after splitting the permutation into several consecutive subarrays.ExampleInput531 2 344 3 2 121 222 164 5 6 1 2 3Output0 2 0 1 1NoteIn the first and third test cases, no matter how we split our permutation, there won't be any odd subarrays.In the second test case, we can split our permutation into subarrays $$$[4, 3], [2, 1]$$$, both of which are odd since their numbers of inversions are $$$1$$$.In the fourth test case, we can split our permutation into a single subarray $$$[2, 1]$$$, which is odd.In the fifth test case, we can split our permutation into subarrays $$$[4, 5], [6, 1, 2, 3]$$$. The first subarray has $$$0$$$ inversions, and the second has $$$3$$$, so it is odd.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "801ce1e4", "template_md5": "35d339e4", "result": "You are given a permutation of integers from 1 to *n*.  A permutation is an arrangement of numbers where each number appears exactly once.  \n\nAn inversion in a subarray is a pair of numbers (i, j) where i < j and the number at index i is greater than the number at index j.\n\nThe goal is to split the permutation into consecutive subarrays in a way that maximizes the number of subarrays that have an odd number of inversions.\n\nOutput the largest possible number of subarrays with an odd number of inversions."}, {"prompt_md5": "233713f0", "template_md5": "465699a0", "result": "You are given a list of numbers.  Each number represents a position in a larger sequence.  You need to divide the list into smaller, non-overlapping sections.  The goal is to maximize the number of sections where the number of inversions (where a larger number comes before a smaller number) is odd.  Output the maximum number of such sections."}]}