{"uid": "1856-D", "url": "https://codeforces.com/contest/1856/problem/D", "tags": ["divide and conquer", " interactive"], "title": "1856-D", "statement": "D. More Wrongtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an interactive problem.The jury has hidden a permutation$$$^\\\\dagger$$$ $$$p$$$ of length $$$n$$$.In one query, you can pick two integers $$$l$$$ and $$$r$$$ ($$$1 \\\\le l < r \\\\le n$$$) by paying $$$(r - l)^2$$$ coins. In return, you will be given the number of inversions$$$^\\\\ddagger$$$ in the subarray $$$[p_l, p_{l + 1}, \\\\ldots p_r]$$$.Find the index of the maximum element in $$$p$$$ by spending at most $$$5 \\\\cdot n^2$$$ coins.Note: the grader is not adaptive: the permutation is fixed before any queries are made.$$$^\\\\dagger$$$ A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array), and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).$$$^\\\\ddagger$$$ The number of inversions in an array is the number of pairs of indices $$$(i,j)$$$ such that $$$i < j$$$ and $$$a_i > a_j$$$. For example, the array $$$[10,2,6,3]$$$ contains $$$4$$$ inversions. The inversions are $$$(1,2),(1,3),(1,4)$$$, and $$$(3,4)$$$.InputEach test contains multiple test cases. The first line of input contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 100$$$) — the number of test cases.The only line of each test case contains a single integer $$$n$$$ ($$$2 \\\\le n \\\\le 2000$$$) — the length of the hidden permutation $$$p$$$.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2000$$$.InteractionThe interaction for each test case begins by reading the integer $$$n$$$.To make a query, output\"? l r\"($$$1 \\\\le l < r \\\\le n$$$) without quotes. Afterwards, you should read one single integer — the answer for your query.If you receive the integer $$$-1$$$ instead of an answer or a valid value of $$$n$$$, it means your program has made an invalid query, has exceed the limit of queries, or has given an incorrect answer on the previous test case. Your program must terminate immediately to receive a Wrong Answer verdict. Otherwise you can get an arbitrary verdict because your solution will continue to read from a closed stream.When you are ready to give the final answer, output\"! i\"($$$1 \\\\le i \\\\le n$$$) without quotes — the index of the maximum of the hidden permutation. After solving a test case, your program should move to the next one immediately. After solving all test cases, your program should be terminated immediately.After printing a query do not forget to output end of line and flush the output. Otherwise, you will getIdleness limit exceeded. To do this, use:fflush(stdout)orcout.flush()in C++;System.out.flush()in Java;flush(output)in Pascal;stdout.flush()in Python;see documentation for other languages.HacksTo hack, use the following format:The first line contains an integer $$$t$$$ ($$$1 \\\\le t \\\\le 100$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$2 \\\\le n \\\\le 2000$$$) — the length of the hidden permutation $$$p$$$.The second line of each test case contains $$$n$$$ integers $$$p_1,p_2,\\\\ldots, p_n$$$ ($$$1 \\\\le p_i \\\\le n$$$), $$$p$$$ must be a permutation.The sum of $$$n$$$ over all test cases should not exceed $$$2000$$$.ExampleInput2 4  1  0  2  1Output? 1 3  ? 3 4  ! 4  ? 1 2  ! 1NoteIn the first test, the interaction proceeds as follows:SolutionJuryExplanation2There are $$$2$$$ test cases.4In the first test case, the hidden permutation is $$$[1,3,2,4]$$$, with length $$$4$$$.? 1 31The solution requests the number of inversions in the subarray $$$[1,3,2]$$$ by paying $$$4$$$ coins, and the jury responds with $$$1$$$.? 3 40The solution requests the number of inversions in the subarray $$$[2,4]$$$ by paying $$$1$$$ coin, and the jury responds with $$$0$$$.! 4The solution has somehow determined that $$$p_4 = 4$$$, and outputs it. Since the output is correct, the jury continues to the next test case.2In the second test case, the hidden permutation is $$$[2,1]$$$, with length $$$2$$$.? 1 21The solution requests the number of inversions in the subarray $$$[2,1]$$$ by paying $$$1$$$ coin, and the jury responds with $$$1$$$.! 1The solution has somehow determined that $$$p_1 = 2$$$, and outputs it. Since the output is correct and there are no more test cases, the jury and the solution exit.Note that the line breaks in the example input and output are for the sake of clarity, and do not occur in the real interaction.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "37efd3ed", "template_md5": "35d339e4", "result": "You are given a permutation of length $n$ that is hidden from you. You can make queries to find the number of inversions in a subarray. An inversion is a pair of indices $(i,j)$ where $i < j$ and the element at index $i$ is greater than the element at index $j$.\n\nEach query costs $(r-l)^2$ coins, where $l$ and $r$ are the start and end indices of the subarray. You have a budget of $5n^2$ coins.\n\nYour goal is to find the index of the maximum element in the permutation. \n\n\n**How to make a query:**\n\nTo make a query, output \"? l r\" where $1 \\le l < r \\le n$.\n\n**How to give the answer:**\n\nWhen you think you know the index of the maximum element, output \"! i\" where $1 \\le i \\le n$. \n\n\n\n**Example:**\n\nLet's say the hidden permutation is $[1,3,2,4]$.\n\n* You could make a query \"? 1 3\" to get the number of inversions in the subarray $[1,3,2]$.\n* You could then make another query \"? 3 4\" to get the number of inversions in the subarray $[2,4]$.\n* Based on the answers to these queries, you could deduce that the maximum element is at index 4 and output \"! 4\"."}, {"prompt_md5": "75e27b28", "template_md5": "465699a0", "result": "You are given a hidden list of numbers. You can ask for the number of \"inversions\" in a given sublist of the hidden list, but each query costs money.  You need to find the index of the largest number in the hidden list using as few queries as possible."}]}