{"uid": "855-D", "url": "https://codeforces.com/contest/855/problem/D", "tags": ["trees"], "title": "855-D", "statement": "D. Rowena Ravenclaw's Diademtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputHarry, upon inquiring Helena Ravenclaw's ghost, came to know that she told Tom Riddle or You-know-who about Rowena Ravenclaw's diadem and that he stole it from her.Harry thought that Riddle would have assumed that he was the only one to discover the Room of Requirement and thus, would have hidden it there. So Harry is trying to get inside the Room of Requirement to destroy the diadem as he knows that it is a horcrux.But he has to answer a puzzle in order to enter the room. He is givennobjects, numbered from1ton. Some of the objects have a parent object, that has a lesser number. Formally, objectimay have a parent objectparentisuch thatparenti<i.There is also a type associated with each parent relation, it can be either of type1or type2. Type1relation means that the child object is like a special case of the parent object. Type2relation means that the second object isalwaysa part of the first object and all its special cases.Note that if an objectbis a special case of objecta, andcis a special case of objectb, thencis considered to be a special case of objectaas well. The same holds for parts: if objectbis a part ofa, and objectcis a part ofb, then we say that objectcis a part ofa. Also note, that if objectbis a part ofa, and objectcis a special case ofa, thenbis a part ofcas well.An object is considered to be neither a part of itself nor a special case of itself.Now, Harry has to answer two type of queries:1 u v: he needs to tell if objectvis a special case of objectu.2 u v: he needs to tell if objectvis a part of objectu.InputFirst line of input contains the numbern(1 ≤n≤ 105), the number of objects.Nextnlines contain two integerparentiandtypei(- 1 ≤parenti<iparenti≠ 0,- 1 ≤typei≤ 1), implying that thei-th object has the parentparenti. (Iftypei= 0, this implies that the objectiis a special case of objectparenti. Iftypei= 1, this implies that the objectiis a part of objectparenti). In case thei-th object has no parent, bothparentiandtypeiare-1.Next line contains an integerq(1 ≤q≤ 105), the number of queries.Nextqlines each represent a query having three space separated integerstypei,ui,vi(1 ≤typei≤ 2, 1 ≤u,v≤n).OutputOutput will containqlines, each containing the answer for the corresponding query as \"YES\" (affirmative) or \"NO\" (without quotes).You can output each letter in any case (upper or lower).ExamplesInput3-1 -11 02 021 1 32 1 3OutputYESNOInput3-1 -11 01 122 2 32 3 2OutputYESNONoteIn test case1, as object2is a special case of object1and object3is a special case of object2, this makes object3a special case of object1.In test case2, as object2is a special case of object1and object1has object3, this will mean that object2will also have object3. This is because when a general case (object1) has object3, its special case (object2) will definitely have object3.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "5c2c374c", "template_md5": "35d339e4", "result": "You are given a list of $n$ objects, numbered from 1 to $n$. Each object can have a parent object, which has a smaller number.  There are two types of relationships:\n\n* **Type 1:** The child object is a special case of the parent object.\n* **Type 2:** The child object is always a part of the parent object.\n\nYou are given a list of parent-child relationships and their types.\n\nYou need to answer $q$ queries. Each query has three numbers:\n\n* **Type:** 1 or 2\n* **u:** The first object\n* **v:** The second object\n\nFor each query, you need to determine if:\n\n* **Type 1:** Object $v$ is a special case of object $u$.\n* **Type 2:** Object $v$ is a part of object $u$.\n\nOutput \"YES\" if the condition is true, and \"NO\" otherwise."}, {"prompt_md5": "9d884172", "template_md5": "465699a0", "result": "You are given a list of items, where some items are special cases of others, and some items are parts of others. You need to determine if one item is a special case of another item, or if one item is a part of another item, based on the given relationships."}]}