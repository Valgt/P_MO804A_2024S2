{"uid": "1427-E", "url": "https://codeforces.com/contest/1427/problem/E", "tags": ["bitmasks", " constructive algorithms", " math", " matrices", " number theory"], "title": "1427-E", "statement": "E. Xumtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou have a blackboard and initially only anoddnumber $$$x$$$ is written on it. Your goal is to write the number $$$1$$$ on the blackboard.You may write new numbers on the blackboard with the following two operations.You may take two numbers (not necessarily distinct) already on the blackboard and write their sum on the blackboard. The two numbers you have chosen remain on the blackboard.You may take two numbers (not necessarily distinct) already on the blackboard and write theirbitwise XORon the blackboard. The two numbers you have chosen remain on the blackboard.Perform a sequence of operations such that at the end the number $$$1$$$ is on the blackboard.InputThe single line of the input contains the odd integer $$$x$$$ ($$$3 \\\\le x \\\\le 999,999$$$).OutputPrint on the first line the number $$$q$$$ of operations you perform. Then $$$q$$$ lines should follow, each describing one operation.The \"sum\" operation is described by the line \"$$$a$$$ + $$$b$$$\", where $$$a, b$$$ must be integers already present on the blackboard.The \"xor\" operation is described by the line \"$$$a$$$ ^ $$$b$$$\", where $$$a, b$$$ must be integers already present on the blackboard.The operation symbol (+ or ^) must be separated from $$$a, b$$$ by a whitespace.You can perform at most $$$100,000$$$ operations (that is, $$$q\\\\le 100,000$$$) and all numbers written on the blackboard must be in the range $$$[0, 5\\\\cdot10^{18}]$$$. It can be proven that under such restrictions the required sequence of operations exists. You can output any suitable sequence of operations.ExamplesInput3Output5 3 + 3 3 ^ 6 3 + 5 3 + 6 8 ^ 9Input123Output10 123 + 123 123 ^ 246 141 + 123 246 + 123 264 ^ 369 121 + 246 367 ^ 369 30 + 30 60 + 60 120 ^ 121", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "d36c36ec", "template_md5": "35d339e4", "result": "You are given an odd integer $x$. You can perform two types of operations on the number:\n\n1. **Sum:** Take two numbers on the blackboard and write their sum on the blackboard. The original two numbers remain.\n2. **XOR:** Take two numbers on the blackboard and write their bitwise XOR on the blackboard. The original two numbers remain.\n\nYour goal is to use these operations to transform the initial number $x$ into the number 1.\n\nOutput the minimum number of operations required and a sequence of operations that achieve this. \n\n**Constraints:**\n\n* $3 \\le x \\le 999,999$\n* You can perform at most 100,000 operations.\n* All numbers on the blackboard must be in the range $[0, 5 \\cdot 10^{18}]$."}, {"prompt_md5": "8528f101", "template_md5": "465699a0", "result": "You start with an odd number on a board. You can add two numbers on the board to get a new number, or you can use the XOR operation on two numbers to get a new number.  Both the original numbers stay on the board.  Find the fewest steps it takes to get the number 1 on the board."}]}