{"uid": "1000-B", "url": "https://codeforces.com/contest/1000/problem/B", "tags": ["greedy"], "title": "1000-B", "statement": "B. Light It Uptime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputRecently, you bought a brand new smart lamp with programming features. At first, you set up a schedule to the lamp. Every day it will turn power on at moment $$$0$$$ and turn power off at moment $$$M$$$. Moreover, the lamp allows you to set a program of switching its state (states are \"lights on\" and \"lights off\"). Unfortunately, some program is already installed into the lamp.The lamp allows onlygoodprograms. Good program can be represented as a non-empty array $$$a$$$, where $$$0 < a_1 < a_2 < \\\\dots < a_{|a|} < M$$$. All $$$a_i$$$ must be integers. Of course, preinstalled program is a good program.The lamp follows program $$$a$$$ in next manner: at moment $$$0$$$ turns power and light on. Then at moment $$$a_i$$$ the lamp flips its state to opposite (if it was lit, it turns off, and vice versa). The state of the lamp flips instantly: for example, if you turn the light off at moment $$$1$$$ and then do nothing, the total time when the lamp is lit will be $$$1$$$. Finally, at moment $$$M$$$ the lamp is turning its power off regardless of its state.Since you are not among those people who read instructions, and you don't understand the language it's written in, you realize (after some testing) the only possible way to alter the preinstalled program. You caninsert at most oneelement into the program $$$a$$$, so it still should be agoodprogram after alteration. Insertion can be done between any pair of consecutive elements of $$$a$$$, or even at the begining or at the end of $$$a$$$.Find such a way to alter the program that the total time when the lamp is lit is maximum possible. Maybe you should leave program untouched. If the lamp is lit from $$$x$$$ till moment $$$y$$$, then its lit for $$$y - x$$$ units of time. Segments of time when the lamp is lit are summed up.InputFirst line contains two space separated integers $$$n$$$ and $$$M$$$ ($$$1 \\\\le n \\\\le 10^5$$$, $$$2 \\\\le M \\\\le 10^9$$$) — the length of program $$$a$$$ and the moment when power turns off.Second line contains $$$n$$$ space separated integers $$$a_1, a_2, \\\\dots, a_n$$$ ($$$0 < a_1 < a_2 < \\\\dots < a_n < M$$$) — initially installed program $$$a$$$.OutputPrint the only integer — maximum possible total time when the lamp is lit.ExamplesInput3 104 6 7Output8Input2 121 10Output9Input2 73 4Output6NoteIn the first example, one of possible optimal solutions is to insert value $$$x = 3$$$ before $$$a_1$$$, so program will be $$$[3, 4, 6, 7]$$$ and time of lamp being lit equals $$$(3 - 0) + (6 - 4) + (10 - 7) = 8$$$. Other possible solution is to insert $$$x = 5$$$ in appropriate place.In the second example, there is only one optimal solution: to insert $$$x = 2$$$ between $$$a_1$$$ and $$$a_2$$$. Program will become $$$[1, 2, 10]$$$, and answer will be $$$(1 - 0) + (10 - 2) = 9$$$.In the third example, optimal answer is to leave program untouched, so answer will be $$$(3 - 0) + (7 - 4) = 6$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "81267651", "template_md5": "35d339e4", "result": "You have a smart lamp that turns on at time $0$ and off at time $M$.  It follows a program of switching its state (on/off) at specific times.  You can add one more time to this program, between any two existing times, or at the beginning or end.  \n\nThe goal is to find the best time to add, so that the total amount of time the lamp is on is as large as possible. \n\n**Input:**\n\n* $n$: the number of times the lamp is already scheduled to switch states\n* $M$: the time the lamp turns off\n* $a_1, a_2, ..., a_n$: the times the lamp is scheduled to switch states\n\n**Output:**\n\n* The maximum possible total time the lamp is on."}, {"prompt_md5": "f7e8c09c", "template_md5": "465699a0", "result": "You have a program that controls a light. The program turns the light on at time 0 and off at a fixed time M.  The program also has a series of times where it flips the light on and off. You can add one more time to the program to change when the light is on or off. Find the way to add this time that results in the light being on for the longest total amount of time."}]}