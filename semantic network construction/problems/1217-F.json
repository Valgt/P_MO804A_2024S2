{"uid": "1217-F", "url": "https://codeforces.com/contest/1217/problem/F", "tags": ["data structures", " divide and conquer", " dsu", " graphs", " trees"], "title": "1217-F", "statement": "F. Forced Online Queries Problemtime limit per test5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an undirected graph with $$$n$$$ vertices numbered from $$$1$$$ to $$$n$$$. Initially there are no edges.You are asked to perform some queries on the graph. Let $$$last$$$ be the answer to the latest query of the second type, it is set to $$$0$$$ before the first such query. Then the queries are the following:$$$1~x~y$$$ ($$$1 \\\\le x, y \\\\le n$$$, $$$x \\\\ne y$$$) — add an undirected edge between the vertices $$$(x + last - 1)~mod~n + 1$$$ and $$$(y + last - 1)~mod~n + 1$$$ if it doesn't exist yet, otherwise remove it;$$$2~x~y$$$ ($$$1 \\\\le x, y \\\\le n$$$, $$$x \\\\ne y$$$) — check if there exists a path between the vertices $$$(x + last - 1)~mod~n + 1$$$ and $$$(y + last - 1)~mod~n + 1$$$, which goes only through currently existing edges, and set $$$last$$$ to $$$1$$$ if so and $$$0$$$ otherwise.Good luck!InputThe first line contains two integer numbers $$$n$$$ and $$$m$$$ ($$$2 \\\\le n, m \\\\le 2 \\\\cdot 10^5$$$) — the number of vertices and the number of queries, respectively.Each of the following $$$m$$$ lines contains a query of one of two aforementioned types. It is guaranteed that there is at least one query of the second type.OutputPrint a string, consisting of characters '0' and '1'. The $$$i$$$-th character should be the answer to the $$$i$$$-th query of the second type. Therefore the length of the string should be equal to the number of queries of the second type.ExamplesInput5 9 1 1 2 1 1 3 2 3 2 1 2 4 2 3 4 1 2 4 2 3 4 1 1 3 2 4 3Output1010Input3 9 1 1 2 1 2 3 1 3 1 2 1 3 1 3 2 2 2 3 1 1 2 2 1 2 2 1 2Output1101NoteThe converted queries in the first example are:1 1 21 1 32 3 21 3 52 4 51 2 42 3 41 2 42 5 4The converted queries in the second example are:1 1 21 2 31 3 12 1 31 1 32 3 11 2 32 2 32 1 2", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "274fd261", "template_md5": "35d339e4", "result": "You are given a graph with $n$ vertices. Initially, there are no edges. You will be given $m$ queries. \n\nThere are two types of queries:\n\n* **Type 1:** Add or remove an edge between vertices $(x + last - 1) \\mod n + 1$ and $(y + last - 1) \\mod n + 1$. If the edge already exists, remove it. Otherwise, add it.\n* **Type 2:** Check if there is a path between vertices $(x + last - 1) \\mod n + 1$ and $(y + last - 1) \\mod n + 1$ using only existing edges. Set $last$ to 1 if a path exists, and 0 otherwise.\n\n**Input:**\n\n* The first line contains two integers, $n$ and $m$, representing the number of vertices and the number of queries, respectively.\n* Each of the following $m$ lines contains a query of one of the two types described above.\n\n**Output:**\n\n* Print a string of '0's and '1's, where the $i$-th character represents the answer to the $i$-th Type 2 query.\n\n\n\nLet me know if you'd like me to elaborate on any part of the problem statement."}, {"prompt_md5": "e8ef325a", "template_md5": "465699a0", "result": "You have a graph with numbered nodes. You can add or remove edges between nodes based on a specific rule: the nodes connected by the edge are determined by a modulo operation on the node numbers and a running value. You can also check if there is a path between two nodes, again using the modulo operation on the node numbers and the running value. The running value is updated based on the results of these path checks. Your task is to determine the result of each path check query."}]}