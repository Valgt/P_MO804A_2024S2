{"uid": "1420-C2", "url": "https://codeforces.com/contest/1420/problem/C2", "tags": ["data structures", " divide and conquer", " dp", " greedy", " implementation"], "title": "1420-C2", "statement": "C2. Pokémon Army (hard version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the hard version of the problem. The difference between the versions is that the easy version has no swap operations. You can make hacks only if all versions of the problem are solved.Pikachu is a cute and friendly pokémon living in the wild pikachu herd.But it has become known recently that infamous team R wanted to steal all these pokémon! Pokémon trainer Andrew decided to help Pikachu to build a pokémon army to resist.First, Andrew counted all the pokémon — there were exactly $$$n$$$ pikachu. The strength of the $$$i$$$-th pokémon is equal to $$$a_i$$$, and all these numbers are distinct.As an army, Andrew can choose any non-empty subsequence of pokemons. In other words, Andrew chooses some array $$$b$$$ from $$$k$$$ indices such that $$$1 \\\\le b_1 < b_2 < \\\\dots < b_k \\\\le n$$$, and his army will consist of pokémons with forces $$$a_{b_1}, a_{b_2}, \\\\dots, a_{b_k}$$$.The strength of the army is equal to the alternating sum of elements of the subsequence; that is, $$$a_{b_1} - a_{b_2} + a_{b_3} - a_{b_4} + \\\\dots$$$.Andrew is experimenting with pokémon order. He performs $$$q$$$ operations. In $$$i$$$-th operation Andrew swaps $$$l_i$$$-th and $$$r_i$$$-th pokémon.Andrew wants to know the maximal stregth of the army he can achieve with the initial pokémon placement. He also needs to know the maximal strength after each operation.Help Andrew and the pokémon, or team R will realize their tricky plan!InputEach test contains multiple test cases.The first line contains one positive integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^3$$$) denoting the number of test cases. Description of the test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$q$$$ ($$$1 \\\\le n \\\\le 3 \\\\cdot 10^5, 0 \\\\le q \\\\le 3 \\\\cdot 10^5$$$) denoting the number of pokémon and number of operations respectively.The second line contains $$$n$$$ distinct positive integers $$$a_1, a_2, \\\\dots, a_n$$$ ($$$1 \\\\le a_i \\\\le n$$$) denoting the strengths of the pokémon.$$$i$$$-th of the last $$$q$$$ lines contains two positive integers $$$l_i$$$ and $$$r_i$$$ ($$$1 \\\\le l_i \\\\le r_i \\\\le n$$$) denoting the indices of pokémon that were swapped in the $$$i$$$-th operation.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3 \\\\cdot 10^5$$$, and the sum of $$$q$$$ over all test cases does not exceed $$$3 \\\\cdot 10^5$$$.OutputFor each test case, print $$$q+1$$$ integers: the maximal strength of army before the swaps and after each swap.ExampleInput3 3 1 1 3 2 1 2 2 2 1 2 1 2 1 2 7 5 1 2 5 4 3 6 7 1 2 6 7 3 4 1 2 2 3Output3 4 2 2 2 9 10 10 10 9 11NoteLet's look at the third test case:Initially we can build an army in such way: [1 254367], its strength will be $$$5-3+7=9$$$.After first operation we can build an army in such way: [2154367], its strength will be $$$2-1+5-3+7=10$$$.After second operation we can build an army in such way: [2154376], its strength will be $$$2-1+5-3+7=10$$$.After third operation we can build an army in such way: [2145376], its strength will be $$$2-1+5-3+7=10$$$.After forth operation we can build an army in such way: [1 2 45376], its strength will be $$$5-3+7=9$$$.After all operations we can build an army in such way: [1425376], its strength will be $$$4-2+5-3+7=11$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "940b3335", "template_md5": "35d339e4", "result": "You are given an array of $n$ distinct positive integers, $a_1, a_2, ..., a_n$.  You can choose any non-empty subsequence of these integers. The strength of the subsequence is the alternating sum of its elements: $a_{b_1} - a_{b_2} + a_{b_3} - a_{b_4} + ...$.\n\nYou are also given $q$ operations, where each operation swaps two elements in the array.  \n\nFor each test case, you need to:\n\n1. Find the maximum strength of a subsequence you can create from the original array.\n2. After each operation, find the maximum strength of a subsequence you can create from the modified array.\n\n\n\nLet me know if you'd like help with any specific part of the problem or have any other questions."}, {"prompt_md5": "9e556083", "template_md5": "465699a0", "result": "You are given a list of distinct numbers. You can choose any subset of these numbers and calculate the alternating sum of the subset (e.g., 1 - 2 + 3 - 4). You will perform a series of swaps on the list. After each swap, find the maximum possible alternating sum you can achieve from a subset of the updated list."}]}