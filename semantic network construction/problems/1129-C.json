{"uid": "1129-C", "url": "https://codeforces.com/contest/1129/problem/C", "tags": ["binary search", " data structures", " dp", " hashing", " sortings", " string suffix structures", " strings"], "title": "1129-C", "statement": "C. Morse Codetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputIn Morse code, an letter of English alphabet is represented as a string of some length from $$$1$$$ to $$$4$$$. Moreover, each Morse code representation of an English letter contains only dots and dashes. In this task, we will represent a dot with a \"0\" and a dash with a \"1\".Because there are $$$2^1+2^2+2^3+2^4 = 30$$$ strings with length $$$1$$$ to $$$4$$$ containing only \"0\" and/or \"1\", not all of them correspond to one of the $$$26$$$ English letters. In particular, each string of \"0\" and/or \"1\" of lengthat most$$$4$$$ translates into a distinct English letter, except the following four strings that do not correspond to any English alphabet: \"0011\", \"0101\", \"1110\", and \"1111\".You will work with a string $$$S$$$, which is initially empty. For $$$m$$$ times, either a dot or a dash will be appended to $$$S$$$, one at a time. Your task is to find and report, after each of these modifications to string $$$S$$$, the number of non-empty sequences of English letters that are represented with some substring of $$$S$$$ in Morse code.Since the answers can be incredibly tremendous, print them modulo $$$10^9 + 7$$$.InputThe first line contains an integer $$$m$$$ ($$$1 \\\\leq m \\\\leq 3\\\\,000$$$) — the number of modifications to $$$S$$$.Each of the next $$$m$$$ lines contains either a \"0\" (representing a dot) or a \"1\" (representing a dash), specifying which character should be appended to $$$S$$$.OutputPrint $$$m$$$ lines, the $$$i$$$-th of which being the answer after the $$$i$$$-th modification to $$$S$$$.ExamplesInput3111Output137Input510101Output14102243Input9110001101Output13102451109213421833NoteLet us consider the first sample after all characters have been appended to $$$S$$$, so S is \"111\".As you can see, \"1\", \"11\", and \"111\" all correspond to some distinct English letter. In fact, they are translated into a 'T', an 'M', and an 'O', respectively. All non-empty sequences of English letters that are represented with some substring of $$$S$$$ in Morse code, therefore, are as follows.\"T\" (translates into \"1\")\"M\" (translates into \"11\")\"O\" (translates into \"111\")\"TT\" (translates into \"11\")\"TM\" (translates into \"111\")\"MT\" (translates into \"111\")\"TTT\" (translates into \"111\")Although unnecessary for this task, a conversion table from English alphabets into Morse code can be foundhere.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "b5e072f5", "template_md5": "35d339e4", "result": "You are given a string $S$ that will be built character by character. Each character will be either a \"0\" (representing a dot) or a \"1\" (representing a dash).  \n\nAfter each character is added to $S$, you need to find the number of unique English words that can be formed using Morse code from any substring of $S$. \n\nRemember these rules:\n\n* Each English letter has a unique Morse code representation that is 1 to 4 characters long.\n* The Morse code representations use only \"0\"s and \"1\"s.\n* The following Morse code representations do not correspond to any English letter: \"0011\", \"0101\", \"1110\", and \"1111\".\n\nThe answer should be printed modulo $10^9 + 7$."}, {"prompt_md5": "2a48875d", "template_md5": "465699a0", "result": "You are given a string that is built up one character at a time. Each character is either a '0' or a '1'.  After each character is added, you need to count how many unique English words can be made from the Morse code represented by the string so far.  The Morse code for each letter is a sequence of '0's and '1's that is at most 4 characters long.  Print the count after each character is added.  The count can be very large, so print it modulo 10^9 + 7."}]}