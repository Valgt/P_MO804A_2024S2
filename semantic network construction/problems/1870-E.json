{"uid": "1870-E", "url": "https://codeforces.com/contest/1870/problem/E", "tags": ["bitmasks", " brute force", " dp", " shortest paths"], "title": "1870-E", "statement": "E. Another MEX Problemtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an array of integers $$$a$$$ of size $$$n$$$. You can choose a set of non-overlapping subarrays of the given array (note that some elements may be not included in any subarray, this is allowed). For each selected subarray, calculate the MEX of its elements, and then calculate thebitwise XORof all the obtained MEX values. What is the maximum bitwise XOR that can be obtained?The MEX (minimum excluded) of an array is the smallest non-negative integer that does not belong to the array. For instance:The MEX of $$$[2,2,1]$$$ is $$$0$$$, because $$$0$$$ does not belong to the array.The MEX of $$$[3,1,0,1]$$$ is $$$2$$$, because $$$0$$$ and $$$1$$$ belong to the array, but $$$2$$$ does not.The MEX of $$$[0,3,1,2]$$$ is $$$4$$$, because $$$0$$$, $$$1$$$, $$$2$$$ and $$$3$$$ belong to the array, but $$$4$$$ does not.InputThe first line contains an integer $$$t$$$ ($$$1 \\\\leq t \\\\leq 5000$$$) — the number of test cases. This is followed by the description of the test cases.The first line of each test case contains an integer $$$n$$$ ($$$1 \\\\leq n \\\\leq 5000$$$) — the size of the array $$$a$$$.The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\\\ldots, a_n$$$ ($$$0 \\\\leq a_i \\\\leq n$$$) — the array $$$a$$$.It is guaranteed that the sum of all $$$n$$$ values across all test cases does not exceed $$$5000$$$.OutputFor each test case, output a single number — the maximum possible XOR of the MEX values of the selected subarrays.ExampleInput421 0101 2 0 7 1 2 0 2 4 3102 1 0 7 1 2 0 2 4 331 2 1Output2 6 7 0NoteIn the first test case, the maximum XOR is $$$2$$$ if we take the entire array, $$$\\\\operatorname{MEX}([1, 0]) = 2$$$.In the second test case, the maximum XOR is $$$6$$$ if we partition the array into segments $$$[1, 2, 0]$$$ and $$$[7, 1, 2, 0, 2, 4, 3]$$$:$$$\\\\operatorname{MEX}([1, 2, 0]) = 3$$$,$$$\\\\operatorname{MEX}([7, 1, 2, 0, 2, 4, 3]) = 5$$$,therefore, the XOR is $$$5 \\\\oplus 3=6$$$.In the third test case, the maximum XOR is $$$7$$$ if we partition the array into segments $$$[1, 0]$$$ and $$$[7, 1, 2, 0, 2, 4, 3]$$$:$$$\\\\operatorname{MEX}([1, 0]) = 2$$$,$$$\\\\operatorname{MEX}([7, 1, 2, 0, 2, 4, 3]) = 5$$$,therefore, the XOR is $$$5 \\\\oplus 2 = 7$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "72cbbab0", "template_md5": "35d339e4", "result": "You are given an array of integers $a$ of size $n$. You can choose any number of non-overlapping subarrays from this array.  For each subarray, find the smallest non-negative integer that is not in that subarray (this is called the MEX of the subarray).  Then, calculate the bitwise XOR of all the MEX values you found. What is the largest possible result you can get?\n\n**Example:**\n\nIf $a = [2, 2, 1]$, the MEX of the entire array is 0.  If $a = [3, 1, 0, 1]$, the MEX of the entire array is 2."}, {"prompt_md5": "f84b3701", "template_md5": "465699a0", "result": "You are given a list of numbers.  You can divide the list into smaller non-overlapping lists.  For each smaller list, find the smallest missing number (the \"MEX\").  Calculate the bitwise XOR of all the MEX values. What is the largest possible result?"}]}