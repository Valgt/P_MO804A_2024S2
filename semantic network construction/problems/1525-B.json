{"uid": "1525-B", "url": "https://codeforces.com/contest/1525/problem/B", "tags": ["constructive algorithms", " greedy"], "title": "1525-B", "statement": "B. Permutation Sorttime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a permutation $$$a$$$ consisting of $$$n$$$ numbers $$$1$$$, $$$2$$$, ..., $$$n$$$ (a permutation is an array in which each element from $$$1$$$ to $$$n$$$ occurs exactly once).You can perform the following operation: choose some subarray (contiguous subsegment) of $$$a$$$ and rearrange the elements in it in any way you want. But this operation cannot be applied to the whole array.For example, if $$$a = [2, 1, 4, 5, 3]$$$ and we want to apply the operation to the subarray $$$a[2, 4]$$$ (the subarray containing all elements from the $$$2$$$-nd to the $$$4$$$-th), then after the operation, the array can become $$$a = [2, 5, 1, 4, 3]$$$ or, for example, $$$a = [2, 1, 5, 4, 3]$$$.Your task is to calculate the minimum number of operations described above to sort the permutation $$$a$$$ in ascending order.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 2000$$$) — the number of test cases.The first line of the test case contains a single integer $$$n$$$ ($$$3 \\\\le n \\\\le 50$$$) — the number of elements in the permutation.The second line of the test case contains $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ — the given permutation $$$a$$$.OutputFor each test case, output a single integer — the minimum number of operations described above to sort the array $$$a$$$ in ascending order.ExampleInput3 4 1 3 2 4 3 1 2 3 5 2 1 4 5 3Output1 0 2NoteIn the explanations, $$$a[i, j]$$$ defines the subarray of $$$a$$$ that starts from the $$$i$$$-th element and ends with the $$$j$$$-th element.In the first test case of the example, you can select the subarray $$$a[2, 3]$$$ and swap the elements in it.In the second test case of the example, the permutation is already sorted, so you don't need to apply any operations.In the third test case of the example, you can select the subarray $$$a[3, 5]$$$ and reorder the elements in it so $$$a$$$ becomes $$$[2, 1, 3, 4, 5]$$$, and then select the subarray $$$a[1, 2]$$$ and swap the elements in it, so $$$a$$$ becomes $$$[1, 2, 3, 4, 5]$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "97a42311", "template_md5": "35d339e4", "result": "You are given a list of $n$ distinct numbers from 1 to $n$.  You can rearrange the order of any sublist within the larger list.  What is the minimum number of times you need to rearrange a sublist to sort the entire list in ascending order?\n\nFor example:\n\n* If the list is $[2,1,4,5,3]$, you can rearrange the sublist $[4,5]$ to get $[2,1,5,4,3]$ and then rearrange $[1,5]$ to get $[2,1,3,4,5]$. This takes 2 rearrangements. \n\n\nInput:\n\n* The first line contains the number of test cases, $t$.\n* Each test case has two lines:\n    * The first line contains the length of the list, $n$.\n    * The second line contains the $n$ numbers in the list.\n\nOutput:\n\n* For each test case, output the minimum number of rearrangements needed to sort the list."}, {"prompt_md5": "00163891", "template_md5": "465699a0", "result": "You are given a list of numbers that are supposed to be in order. You can swap any group of numbers within the list. What is the fewest swaps needed to get the list in order?"}]}