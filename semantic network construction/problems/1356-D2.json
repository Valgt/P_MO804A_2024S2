{"uid": "1356-D2", "url": "https://codeforces.com/contest/1356/problem/D2", "tags": ["*special"], "title": "1356-D2", "statement": "D2. Quantum Classification - 2time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis problem statement is exactly the same as in the problem \"Quantum Classification - 1\"; the only difference is thetraining datasetused (and the model you need to train on it).You are given atraining dataset, in which each entry is a features vector (an array of 2 real numbers) and a label 0 or 1 indicating the class to which this vector belongs.Your goal is to use this dataset to train a quantum classification model that will accurately classify a validation dataset - a different dataset generated using the same data distribution as the training one. The error rate of classifying the validation dataset using your model (the percentage of incorrectly classified samples) should be less than 5The quantum classification library that will use your model to classify the data is documentedhere.This tutorialhas an end-to-end example of training a model using this library as a Python notebook.You can find examples of training a model and using it for classificationhere.InputYour code will not be given any inputs. Instead, you should use theprovided dataset fileto train your model.The training dataset is represented as a JSON file and consists of two arrays, \"Features\" and \"Labels\". Each array has exactly 200 elements. Each element of the \"Features\" array is an array with 2 elements, each of them a floating-point number between -1 and 1. Each element of the \"Labels\" array is the label of the class to which the corresponding element of the \"Features\" array belongs, 0 or 1.OutputYour code should return the description of the model you'd like to use in the following format:The model is described using a tuple(ControlledRotation[], (Double[], Double)).The first element of the tuple describes circuit geometry of the model as an array of controlled rotation gates.The second element of the tuple describes numeric parameters of the model and is a tuple of an array of rotation angles used by the gates and the bias used to decide the class of the model.Your code should have the following signature:namespace Solution {open Microsoft.Quantum.MachineLearning;operation Solve () : (ControlledRotation[], (Double[], Double)) {// your code here}}Please refer to the documentation and examples for details on each parameter.NoteNote that majority of the data analysis is going to happen \"offline\" before you submit the solution. The solution has to contain only the description of the trained model, not the training code itself - if you attempt to train the model \"online\" in your submitted code during the evaluation process, it will very likely time out.Training your model offline is likely to involve:Defining the circuit structure that your model will use.Generating several parameter seed vectors - the values from which training the model will start.Selecting appropriate hyperparameters of the training process (learning rate, batch size, tolerance, maximal number of iterations etc.)Training a number of classification models (one per each seed vector and hyperparameter combination)Selecting the best trained model and submitting it.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "b2762989", "template_md5": "35d339e4", "result": "You are given a training dataset with 200 data points. Each data point consists of a 2-dimensional feature vector (two real numbers) and a label (0 or 1). Your goal is to train a quantum classification model that can accurately classify a separate validation dataset (also with 200 data points) using the same data distribution as the training dataset. \n\nThe error rate (percentage of incorrectly classified samples) of your model on the validation dataset should be less than 5%.\n\nYou will use a provided quantum classification library to train and evaluate your model. The library documentation and examples are available online.\n\n**Output:**\n\nYour code should output a description of your trained model in the following format:\n\n`(ControlledRotation[], (Double[], Double))`\n\n* The first element of the tuple describes the circuit structure of your model as an array of controlled rotation gates.\n* The second element of the tuple describes the numeric parameters of your model, which is a tuple containing:\n    * An array of rotation angles used by the gates.\n    * A bias value used to decide the class of the model.\n\n\n\n**Important Notes:**\n\n* You will not receive any input data during the evaluation. You must use the provided training dataset to train your model.\n* You are expected to train your model offline. Attempting to train the model online during the evaluation process will likely result in a timeout."}, {"prompt_md5": "4c03bd1e", "template_md5": "465699a0", "result": "You are given a dataset of data points with labels. Your task is to train a model using this dataset to classify new, unseen data points. The model must be described in a specific format and have an error rate below 5%."}]}