{"uid": "1207-G", "url": "https://codeforces.com/contest/1207/problem/G", "tags": ["data structures", " dfs and similar", " hashing", " string suffix structures", " strings", " trees"], "title": "1207-G", "statement": "G. Indie Albumtime limit per test3 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputMishka's favourite experimental indie band has recently dropped a new album! Songs of that album share one gimmick. Each name $$$s_i$$$ is one of the following types:$$$1~c$$$ — a single lowercase Latin letter;$$$2~j~c$$$ — name $$$s_j$$$ ($$$1 \\\\le j < i$$$) with a single lowercase Latin letter appended to its end.Songs are numbered from $$$1$$$ to $$$n$$$. It's guaranteed that the first song is always of type $$$1$$$.Vova is rather interested in the new album but he really doesn't have the time to listen to it entirely. Thus he asks Mishka some questions about it to determine if some song is worth listening to. Questions have the following format:$$$i~t$$$ — count the number of occurrences of string $$$t$$$ in $$$s_i$$$ (the name of the $$$i$$$-th song of the album) as a continuous substring, $$$t$$$ consists only of lowercase Latin letters.Mishka doesn't question the purpose of that information, yet he struggles to provide it. Can you please help Mishka answer all Vova's questions?InputThe first line contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 4 \\\\cdot 10^5$$$) — the number of songs in the album.Each of the next $$$n$$$ lines contains the desciption of the $$$i$$$-th song of the album in the following format:$$$1~c$$$ — $$$s_i$$$ is a single lowercase Latin letter;$$$2~j~c$$$ — $$$s_i$$$ is the name $$$s_j$$$ ($$$1 \\\\le j < i$$$) with a single lowercase Latin letter appended to its end.The next line contains a single integer $$$m$$$ ($$$1 \\\\le m \\\\le 4 \\\\cdot 10^5$$$) — the number of Vova's questions.Each of the next $$$m$$$ lines contains the desciption of the $$$j$$$-th Vova's question in the following format:$$$i~t$$$ ($$$1 \\\\le i \\\\le n$$$, $$$1 \\\\le |t| \\\\le 4 \\\\cdot 10^5$$$) — count the number of occurrences of string $$$t$$$ in $$$s_i$$$ (the name of the $$$i$$$-th song of the album) as a continuous substring, $$$t$$$ consists only of lowercase Latin letters.It's guaranteed that the total length of question strings $$$t$$$ doesn't exceed $$$4 \\\\cdot 10^5$$$.OutputFor each question print a single integer — the number of occurrences of the question string $$$t$$$ in the name of the $$$i$$$-th song of the album as a continuous substring.ExampleInput20 1 d 2 1 a 2 2 d 2 3 a 2 4 d 2 5 a 2 6 d 2 7 a 1 d 2 9 o 2 10 k 2 11 i 2 12 d 2 13 o 2 14 k 2 15 i 2 1 o 2 17 k 2 18 i 2 15 i 12 8 da 8 dada 8 ada 6 dada 3 dada 19 doki 19 ok 16 doki 15 doki 9 d 1 a 20 dokiOutput4 3 3 2 0 1 1 2 1 1 0 2NoteSong names of the first example:ddadaddadadadaddadadadadadaddadadadaddodokdokidokiddokidodokidokdokidokidodokdokidokidokiThus the occurrences for each question string are:string \"da\" starts in positions $$$[1, 3, 5, 7]$$$ in the name \"dadadada\";string \"dada\" starts in positions $$$[1, 3, 5]$$$ in the name \"dadadada\";string \"ada\" starts in positions $$$[2, 4, 6]$$$ in the name \"dadadada\";string \"dada\" starts in positions $$$[1, 3]$$$ in the name \"dadada\";no occurrences of string \"dada\" in the name \"dad\";string \"doki\" starts in position $$$[1]$$$ in the name \"doki\";string \"ok\" starts in position $$$[2]$$$ in the name \"doki\";string \"doki\" starts in positions $$$[1, 5]$$$ in the name \"dokidoki\";string \"doki\" starts in position $$$[1]$$$ in the name \"dokidok\";string \"d\" starts in position $$$[1]$$$ in the name \"d\";no occurrences of string \"a\" in the name \"d\";string \"doki\" starts in positions $$$[1, 5]$$$ in the name \"dokidoki\".", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "7a55e96c", "template_md5": "35d339e4", "result": "You are given a list of song names. Each song name is built according to these rules:\n\n* The first song name is a single lowercase letter.\n* Each subsequent song name is formed by taking the name of a previous song and appending a single lowercase letter to the end.\n\nYou are then given a list of queries. Each query consists of a song number and a string. For each query, you need to count how many times the given string appears as a continuous substring within the name of the specified song.\n\n**Input:**\n\n* The first line contains an integer $n$ ($1 \\le n \\le 4 \\cdot 10^5$), the number of songs.\n* The next $n$ lines each describe a song name according to the rules above.\n* The next line contains an integer $m$ ($1 \\le m \\le 4 \\cdot 10^5$), the number of queries.\n* The next $m$ lines each contain a query in the format $i~t$, where $i$ is the song number and $t$ is the string to search for.\n\n**Output:**\n\nFor each query, print a single integer representing the number of occurrences of the string $t$ in the song name."}, {"prompt_md5": "faf49f0a", "template_md5": "465699a0", "result": "You are given a list of song names, where each name is built by taking a previous name and adding a letter to the end. You are then asked to find how many times a given string appears within each song name."}]}