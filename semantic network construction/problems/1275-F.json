{"uid": "1275-F", "url": "https://codeforces.com/contest/1275/problem/F", "tags": ["*special", " binary search", " interactive"], "title": "1275-F", "statement": "F. Шардирование постовограничение по времени на тест2 секундыограничение по памяти на тест512 мегабайтвводстандартный вводвыводстандартный выводЭто интерактивная задача.Когда данных становится слишком много и они не помещаются на один сервер, их приходится шардировать. Рассмотрим систему хранения постов пользователей, которая расположена на $$$S$$$ серверах, нумеруемых с единицы. Каждый раз когда пользователь пишет пост, ему выдается уникальный идентификатор в пределах от 1 до $$$10^{18}$$$ и сохраняется на случайный сервер. Чем позже был создан пост, тем больше его $$$id$$$. Иногда посты удаляются, поэтому на серверах может лежать существенно разное количество постов.Рассмотрим все неудаленные $$$id$$$ постов пользователя и отсортируем их по возрастанию. Вам хочется узнать $$$k$$$-й из них. Для этого вы можете послать не более 100 дополнительных запросов. Каждый запрос имеет формат «? $$$i$$$ $$$j$$$». В ответ вы получите идентификатор $$$j$$$-го по возрастанию поста пользователя среди хранящихся на $$$i$$$-м сервере. Когда вы считаете, что знаете $$$k$$$-й по возрастанию идентификатор, вместо запроса необходимо вывести ответ в формате «! $$$id$$$».Протокол взаимодействияВ первой строке записано два числа $$$n$$$ и $$$S$$$ ($$$1 \\\\le n \\\\le 100, 1 \\\\le S \\\\le 5$$$) — количество пользователей для которых необходимо независимо решить задачу, а также количество серверов, на которых хранятся посты.Далее необходимо $$$n$$$ раз решить задачу. Вначале необходимо считать $$$S$$$ чисел $$$a_1, a_2, ... a_S$$$ ($$$0 \\\\le a_i; \\\\sum a_i \\\\le 10^5$$$) — количество постов пользователя на каждом сервере. В следующей строке будет задано число $$$k$$$ ($$$1 \\\\le k \\\\le \\\\sum a_i $$$) — идентификатор какого по возрастанию поста необходимо узнать.Далее необходимо совершить не более 100 запросов в формате, который описан в условии.Заметим, что ограничение на количество запросов действует на каждого пользователя отдельно, поэтому при переходе к следующему тесту счетчик вопросов сбрасывается.ПримерВходные данные1 2 3 2 3  3  5  10Выходные данные? 1 2  ? 2 1  ? 1 3  ! 5ПримечаниеВ примере на первом сервере хранятся посты с $$$id$$$ 1, 3 и 10. А на втором 5 и 7. Необходимо найти третье по возрастанию число, это 5.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "a1646c34", "template_md5": "35d339e4", "result": "You are given a system with $S$ servers storing posts from users. Each post has a unique ID from 1 to $10^{18}$.  Posts are stored on random servers, and newer posts have higher IDs.  \n\nYou need to find the $k$-th post ID for a specific user, given the number of posts on each server. You can make at most 100 queries to find this ID.\n\n**Query Format:**\n\n? $i$ $j$ \n\nThis query asks for the $j$-th post ID on server $i$, ordered from lowest to highest.\n\n**Response Format:**\n\nThe server will return the $j$-th post ID on server $i$.\n\n**Output Format:**\n\nWhen you think you know the $k$-th post ID, output:\n\n! $id$\n\n**Input:**\n\n* $n$: The number of users.\n* $S$: The number of servers.\n* $a_1, a_2, ..., a_S$: The number of posts on each server for a specific user.\n* $k$: The desired $k$-th post ID.\n\n**Example:**\n\n* $n = 1$\n* $S = 2$\n* $a_1 = 2$, $a_2 = 3$\n* $k = 3$\n\nServer 1: Posts with IDs 1, 3, 10\nServer 2: Posts with IDs 5, 7\n\nThe 3rd post ID is 5."}, {"prompt_md5": "e8c70773", "template_md5": "465699a0", "result": "You have to find the k-th smallest post ID among all posts from a user. Posts are stored across multiple servers, and you can make at most 100 queries to find the IDs of posts on a specific server. Each query asks for the ID of the j-th smallest post on the i-th server.  You need to determine the k-th smallest post ID without exceeding the query limit."}]}