{"uid": "1585-B", "url": "https://codeforces.com/contest/1585/problem/B", "tags": ["greedy"], "title": "1585-B", "statement": "B. Array Eversiontime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an array $$$a$$$ of length $$$n$$$.Let's define theeversionoperation. Let $$$x = a_n$$$. Then array $$$a$$$ is partitioned into two parts: left and right. The left part contains the elements of $$$a$$$ that are not greater than $$$x$$$ ($$$\\\\le x$$$). The right part contains the elements of $$$a$$$ that are strictly greater than $$$x$$$ ($$$> x$$$). The order of elements in each part is kept the same as before the operation, i. e. the partition is stable. Then the array is replaced with the concatenation of the left and the right parts.For example, if the array $$$a$$$ is $$$[2, 4, 1, 5, 3]$$$, the eversion goes like this: $$$[2, 4, 1, 5, 3] \\\\to [2, 1, 3], [4, 5] \\\\to [2, 1, 3, 4, 5]$$$.We start with the array $$$a$$$ and perform eversions on this array. We can prove that after several eversions the array $$$a$$$ stops changing. Output the minimum number $$$k$$$ such that the array stops changing after $$$k$$$ eversions.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 100$$$). Description of the test cases follows.The first line contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 2 \\\\cdot 10^5$$$).The second line contains $$$n$$$ integers $$$a_1, a_2, \\\\dots, a_n$$$ ($$$1 \\\\le a_i \\\\le 10^9$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\\\cdot 10^5$$$.OutputFor each test case print a single integer $$$k$$$ — the number of eversions after which the array stops changing.ExampleInput3 5 2 4 1 5 3 5 5 3 2 4 1 4 1 1 1 1Output1 2 0NoteConsider the fist example.The first eversion: $$$a = [1, 4, 2, 5, 3]$$$, $$$x = 3$$$. $$$[2, 4, 1, 5, 3] \\\\to [2, 1, 3], [4, 5] \\\\to [2, 1, 3, 4, 5]$$$.The second and following eversions: $$$a = [2, 1, 3, 4, 5]$$$, $$$x = 5$$$. $$$[2, 1, 3, 4, 5] \\\\to [2, 1, 3, 4, 5], [] \\\\to [2, 1, 3, 4, 5]$$$. This eversion does not change the array, so the answer is $$$1$$$.Consider the second example.The first eversion: $$$a = [5, 3, 2, 4, 1]$$$, $$$x = 1$$$. $$$[5, 3, 2, 4, 1] \\\\to [1], [5, 3, 2, 4] \\\\to [1, 5, 3, 2, 4]$$$.The second eversion: $$$a = [1, 5, 3, 2, 4]$$$, $$$x = 4$$$. $$$[1, 5, 3, 2, 4] \\\\to [1, 3, 2, 4], [5] \\\\to [1, 3, 2, 4, 5]$$$.The third and following eversions: $$$a = [1, 3, 2, 4, 5]$$$, $$$x = 5$$$. $$$[1, 3, 2, 4, 5] \\\\to [1, 3, 2, 4, 5], [] \\\\to [1, 3, 2, 4, 5]$$$. This eversion does not change the array, so the answer is $$$2$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "0145577a", "template_md5": "35d339e4", "result": "You are given an array of integers $a$ of length $n$.  \n\n**Eversion Operation:**\n\n1. Find the largest element in the array, let's call it $x$.\n2. Split the array into two parts:\n   -  The left part contains elements less than or equal to $x$.\n   - The right part contains elements strictly greater than $x$.\n3. Concatenate the left and right parts to form a new array.\n\n**Problem:**\n\nYou start with the array $a$ and repeatedly perform eversion operations.  Find the minimum number of eversions it takes for the array to stop changing.\n\n**Input:**\n\n* Multiple test cases.\n* For each test case:\n    * An integer $n$ (the length of the array).\n    * $n$ integers $a_1, a_2, ..., a_n$.\n\n**Output:**\n\n* For each test case, print the minimum number of eversions required."}, {"prompt_md5": "3f98a58a", "template_md5": "465699a0", "result": "You are given a list of numbers.  You can repeatedly split the list into two parts: one with numbers less than or equal to the last number in the list, and one with numbers greater than the last number. Then you put the two parts back together in that order. What is the fewest times you have to do this before the list stops changing?"}]}