{"uid": "1394-B", "url": "https://codeforces.com/contest/1394/problem/B", "tags": ["brute force", " dfs and similar", " graphs", " hashing"], "title": "1394-B", "statement": "B. Boboniu Walks on Graphtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputBoboniu has adirectedgraph with $$$n$$$ vertices and $$$m$$$ edges.The out-degree of each vertex is at most $$$k$$$.Each edge has an integer weight between $$$1$$$ and $$$m$$$. No two edges have equal weights.Boboniu likes to walk on the graph with some specific rules, which is represented by a tuple $$$(c_1,c_2,\\\\ldots,c_k)$$$. If he now stands on a vertex $$$u$$$ with out-degree $$$i$$$, then he will go to the next vertex by the edge with the $$$c_i$$$-th $$$(1\\\\le c_i\\\\le i)$$$ smallest weight among all edges outgoing from $$$u$$$.Now Boboniu asks you to calculate the number of tuples $$$(c_1,c_2,\\\\ldots,c_k)$$$ such that$$$1\\\\le c_i\\\\le i$$$ for all $$$i$$$ ($$$1\\\\le i\\\\le k$$$).Starting from any vertex $$$u$$$, it is possible to go back to $$$u$$$ in finite time by walking on the graph under the described rules.InputThe first line contains three integers $$$n$$$, $$$m$$$ and $$$k$$$ ($$$2\\\\le n\\\\le 2\\\\cdot 10^5$$$, $$$2\\\\le m\\\\le \\\\min(2\\\\cdot 10^5,n(n-1) )$$$, $$$1\\\\le k\\\\le 9$$$).Each of the next $$$m$$$ lines contains three integers $$$u$$$, $$$v$$$ and $$$w$$$ $$$(1\\\\le u,v\\\\le n,u\\\\ne v,1\\\\le w\\\\le m)$$$, denoting an edge from $$$u$$$ to $$$v$$$ with weight $$$w$$$. It is guaranteed that there are no self-loops or multiple edges and each vertex has at least one edge starting from itself.It is guaranteed that the out-degree of each vertex is at most $$$k$$$ and no two edges have equal weight.OutputPrint one integer: the number of tuples.ExamplesInput4 6 3 4 2 1 1 2 2 2 4 3 4 1 4 4 3 5 3 1 6Output2Input5 5 1 1 4 1 5 1 2 2 5 3 4 3 4 3 2 5Output1Input6 13 4 3 5 1 2 5 2 6 3 3 1 4 4 2 6 5 5 3 6 4 1 7 4 3 8 5 2 9 4 2 10 2 1 11 6 1 12 4 6 13Output1NoteFor the first example, there are two tuples: $$$(1,1,3)$$$ and $$$(1,2,3)$$$. The blue edges in the picture denote the $$$c_i$$$-th smallest edges for each vertex, which Boboniu chooses to go through.For the third example, there's only one tuple: $$$(1,2,2,2)$$$.Theout-degreeof vertex $$$u$$$ means the number of edges outgoing from $$$u$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "699806c8", "template_md5": "35d339e4", "result": "You are given a directed graph with $n$ vertices and $m$ edges. Each vertex has at most $k$ outgoing edges. Each edge has a unique weight between 1 and $m$.\n\nYou need to find the number of possible sequences $(c_1, c_2, ..., c_k)$ where:\n\n* $1 \\le c_i \\le i$ for all $i$ (1 to $k$)\n\nThese sequences define a walking rule:\n\n* Starting at a vertex with $i$ outgoing edges, the walker will choose the $c_i$-th smallest edge (by weight) to move to the next vertex.\n\nThe problem guarantees that no matter where you start, you can always return to the starting vertex by following these rules.\n\nOutput the total number of valid sequences $(c_1, c_2, ..., c_k)$."}, {"prompt_md5": "471b3c7b", "template_md5": "465699a0", "result": "You are given a directed graph with nodes and edges. Each node has at most a certain number of outgoing edges. Each edge has a unique weight.  \n\nYou need to find the number of ways to choose a path from each node, where the path is determined by a specific rule: for each node, you choose the $c_i$-th smallest edge (out of all its outgoing edges) to travel to the next node.  \n\nThe rule is represented by a sequence of numbers $(c_1, c_2, ..., c_k)$.  \n\nThe constraint is that $1 \\le c_i \\le i$ for all $i$. \n\n\nYou need to output the total number of valid sequences $(c_1, c_2, ..., c_k)$."}]}