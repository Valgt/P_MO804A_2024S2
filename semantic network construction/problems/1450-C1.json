{"uid": "1450-C1", "url": "https://codeforces.com/contest/1450/problem/C1", "tags": ["constructive algorithms", " math"], "title": "1450-C1", "statement": "C1. Errich-Tac-Toe (Easy Version)time limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe only difference between the easy and hard versions is that tokens of typeOdo not appear in the input of the easy version.Errichto gave Monogon the following challenge in order to intimidate him from taking his top contributor spot on Codeforces.In a Tic-Tac-Toe grid, there are $$$n$$$ rows and $$$n$$$ columns. Each cell of the grid is either empty or contains a token. There are two types of tokens:XandO. If there exist three tokens of the same type consecutive in a row or column, it is a winning configuration. Otherwise, it is a draw configuration.The patterns in the first row are winning configurations. The patterns in the second row are draw configurations.In an operation, you can change anXto anO, or anOto anX. Let $$$k$$$ denote the total number of tokens in the grid. Your task is to make the grid adrawin at most $$$\\\\lfloor \\\\frac{k}{3}\\\\rfloor$$$ (rounding down) operations.You arenot requiredto minimize the number of operations.InputThe first line contains a single integer $$$t$$$ ($$$1\\\\le t\\\\le 100$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$1\\\\le n\\\\le 300$$$) — the size of the grid.The following $$$n$$$ lines each contain a string of $$$n$$$ characters, denoting the initial grid. The character in the $$$i$$$-th row and $$$j$$$-th column is '.' if the cell is empty, or it is the type of token in the cell: 'X' or 'O'.It is guaranteed that not all cells are empty.In the easy version, the character 'O' does not appear in the input.The sum of $$$n$$$ across all test cases does not exceed $$$300$$$.OutputFor each test case, print the state of the grid after applying the operations.We have proof that a solution always exists. If there are multiple solutions, print any.ExampleInput3 3 .X. XXX .X. 6 XX.XXX XXXXXX XXX.XX XXXXXX XX.X.X XXXXXX 5 XXX.X .X..X XXX.X ..X.. ..X..Output.X. XOX .X. XX.XXO XOXXOX OXX.XX XOOXXO XX.X.X OXXOXX XOX.X .X..X XXO.O ..X.. ..X..NoteIn the first test case, there are initially three 'X' consecutive in the second row and the second column. By changing the middle token to 'O' we make the grid a draw, and we only changed $$$1\\\\le \\\\lfloor 5/3\\\\rfloor$$$ token.In the second test case, we change only $$$9\\\\le \\\\lfloor 32/3\\\\rfloor$$$ tokens, and there does not exist any three 'X' or 'O' consecutive in a row or column, so it is a draw.In the third test case, we change only $$$3\\\\le \\\\lfloor 12/3\\\\rfloor$$$ tokens, and the resulting grid is a draw.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "bc0411b5", "template_md5": "35d339e4", "result": "You are given a square grid of size $n \\times n$. Each cell in the grid can be empty (represented by '.'), or contain an 'X' or an 'O'. \n\nA winning configuration is three consecutive 'X's or 'O's in a row or column.\n\nYou can change any 'X' to an 'O', or any 'O' to an 'X'. Your goal is to transform the grid into a draw (where there are no winning configurations) in at most $\\lfloor \\frac{k}{3} \\rfloor$ operations, where $k$ is the total number of 'X's and 'O's in the grid.\n\n**Input:**\n\n* The first line contains the number of test cases, $t$.\n* For each test case:\n    * The first line contains the grid size, $n$.\n    * The following $n$ lines each contain a string of $n$ characters representing the grid.\n\n**Output:**\n\nFor each test case, print the grid after applying the operations to make it a draw."}, {"prompt_md5": "574ae6d1", "template_md5": "465699a0", "result": "You are given a square grid of cells. Each cell can be empty, contain an 'X', or contain an 'O'.  The goal is to change some 'X's to 'O's and vice versa, to make the grid a draw. A draw occurs when there are no three consecutive 'X's or 'O's in any row or column. You can make at most  floor(total number of 'X's and 'O's / 3) changes."}]}