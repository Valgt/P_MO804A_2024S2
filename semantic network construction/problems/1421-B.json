{"uid": "1421-B", "url": "https://codeforces.com/contest/1421/problem/B", "tags": ["constructive algorithms", " implementation"], "title": "1421-B", "statement": "B. Putting Bricks in the Walltime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputPink Floyd are pulling a prank on Roger Waters. They know he doesn't likewalls, he wants to be able to walk freely, so they are blocking him from exiting his room which can be seen as a grid.Roger Waters has a square grid of size $$$n\\\\times n$$$ and he wants to traverse his grid from the upper left ($$$1,1$$$) corner to the lower right corner ($$$n,n$$$). Waters can move from a square to any other square adjacent by a side, as long as he is still in the grid. Also except for the cells ($$$1,1$$$) and ($$$n,n$$$) every cell has a value $$$0$$$ or $$$1$$$ in it.Before starting his traversal he will pick either a $$$0$$$ or a $$$1$$$ and will be able to only go to cells values in which are equal to the digit he chose. The starting and finishing cells ($$$1,1$$$) and ($$$n,n$$$) are exempt from this rule, he may go through them regardless of picked digit. Because of this the cell ($$$1,1$$$) takes value the letter 'S' and the cell ($$$n,n$$$) takes value the letter 'F'.For example, in the first example test case, he can go from ($$$1, 1$$$) to ($$$n, n$$$) by using the zeroes on this path: ($$$1, 1$$$), ($$$2, 1$$$), ($$$2, 2$$$), ($$$2, 3$$$), ($$$3, 3$$$), ($$$3, 4$$$), ($$$4, 4$$$)The rest of the band (Pink Floyd) wants Waters to not be able to do his traversal, so while he is not looking they willinvert at most two cellsin the grid (from $$$0$$$ to $$$1$$$ or vice versa). They are afraid they will not be quick enough and asked for your help in choosing the cells.Note that you cannot invert cells $$$(1, 1)$$$ and $$$(n, n)$$$.We can show that there always exists a solution for the given constraints.Also note that Waters will pick his digit of the traversal after the band has changed his grid, so he must not be able to reach ($$$n,n$$$) no matter what digit he picks.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 50$$$). Description of the test cases follows.The first line of each test case contains one integers $$$n$$$ ($$$3 \\\\le n \\\\le 200$$$).The following $$$n$$$ lines of each test case contain the binary grid, square ($$$1, 1$$$) being colored in 'S' and square ($$$n, n$$$) being colored in 'F'.The sum of values of $$$n$$$ doesn't exceed $$$200$$$.OutputFor each test case output on the first line an integer $$$c$$$ ($$$0 \\\\le c \\\\le 2$$$)  — the number of inverted cells.In $$$i$$$-th of the following $$$c$$$ lines, print the coordinates of the $$$i$$$-th cell you inverted. You may not invert the same cell twice.Note that you cannot invert cells $$$(1, 1)$$$ and $$$(n, n)$$$.ExampleInput3 4 S010 0001 1000 111F 3 S10 101 01F 5 S0101 00000 01111 11111 0001FOutput1 3 4 2 1 2 2 1 0NoteFor the first test case, after inverting the cell, we get the following grid:S01000011001111F", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "029f1339", "template_md5": "35d339e4", "result": "You are given a square grid of size $n \\times n$.  The top left corner is marked 'S' and the bottom right corner is marked 'F'.  Every other cell contains a 0 or a 1.\n\nYou need to find the minimum number of cells you can change (flip from 0 to 1 or 1 to 0) so that it becomes impossible to travel from 'S' to 'F' by only moving to adjacent cells with the same value as the one you chose at the start (you can move to 'S' and 'F' regardless of the value).\n\nInput:\n\n* The first line contains the number of test cases, $t$.\n* For each test case:\n    * The first line contains the size of the grid, $n$.\n    * The next $n$ lines contain the grid, with 'S' at the top left and 'F' at the bottom right.\n\nOutput:\n\n* For each test case:\n    * The first line contains the minimum number of cells to change, $c$.\n    * The next $c$ lines each contain the coordinates of one cell to change."}, {"prompt_md5": "d0a1bed6", "template_md5": "465699a0", "result": "You are given a square grid of 0s and 1s.  Two cells are special: one is marked \"S\" and the other is marked \"F\".  You can change two of the 0s to 1s or vice versa.  The goal is to make it impossible to travel from the \"S\" cell to the \"F\" cell by only moving to adjacent cells with the same value as the cell you are currently on."}]}