{"uid": "195-C", "url": "https://codeforces.com/contest/195/problem/C", "tags": ["expression parsing", " implementation"], "title": "195-C", "statement": "C. Try and Catchtime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutVasya is developing his own programming language VPL (Vasya Programming Language). Right now he is busy making the system of exceptions. He thinks that the system of exceptions must function like that.The exceptions are processed by try-catch-blocks. There are two operators that work with the blocks:Thetryoperator. It opens a new try-catch-block.Thecatch(<exception_type>, <message>)operator. It closes the try-catch-block that was started last and haven't yet been closed. This block can be activated only via exception of type <exception_type>. When we activate this block, the screen displays the <message>. If at the given moment there is no open try-catch-block, then we can't use thecatchoperator.The exceptions can occur in the program in only one case: when we use thethrowoperator. Thethrow(<exception_type>)operator creates the exception of the given type.Let's suggest that as a result of using somethrowoperator the program created an exception of typea. In this case a try-catch-block is activated, such that this block'stryoperator was described in the program earlier than the usedthrowoperator. Also, this block'scatchoperator was given an exception typeaas a parameter and this block'scatchoperator is described later that the usedthrowoperator. If there are several such try-catch-blocks, then the system activates the block whosecatchoperator occurs earlier than others. If no try-catch-block was activated, then the screen displays message \"Unhandled Exception\".To test the system, Vasya wrote a program that contains onlytry,catchandthrowoperators, one line contains no more than one operator, the whole program contains exactly onethrowoperator.Your task is: given a program in VPL, determine, what message will be displayed on the screen.InputThe first line contains a single integer:n(1 ≤n≤ 105)the number of lines in the program. Nextnlines contain the program in language VPL. Each line contains no more than one operator. It means that input file can contain empty lines and lines, consisting only of spaces.The program contains only operatorstry,catchandthrow. It is guaranteed that the program is correct. It means that each started try-catch-block was closed, thecatchoperators aren't used unless there is an open try-catch-block. The program has exactly onethrowoperator. The program may have spaces at the beginning of a line, at the end of a line, before and after a bracket, a comma or a quote mark.The exception type is a nonempty string, that consists only of upper and lower case english letters. The length of the string does not exceed 20 symbols. Message is a nonempty string, that consists only of upper and lower case english letters, digits and spaces. Message is surrounded with quote marks. Quote marks shouldn't be printed. The length of the string does not exceed 20 symbols.Length of any line in the input file does not exceed 50 symbols.OutputPrint the message the screen will show after the given program is executed.ExamplesInput8trytrythrow ( AE )catch ( BE, \"BE in line 3\")trycatch(AE, \"AE in line 5\")catch(AE,\"AE somewhere\")OutputAE somewhereInput8trytrythrow ( AE )catch ( AE, \"AE in line 3\")trycatch(BE, \"BE in line 5\")catch(AE,\"AE somewhere\")OutputAE in line 3Input8trytrythrow ( CE )catch ( BE, \"BE in line 3\")trycatch(AE, \"AE in line 5\")catch(AE,\"AE somewhere\")OutputUnhandled ExceptionNoteIn the first sample there are 2 try-catch-blocks such thattryoperator is described earlier thanthrowoperator andcatchoperator is described later thanthrowoperator:try-catch(BE,\"BE in line 3\")andtry-catch(AE,\"AE somewhere\"). Exception type is AE, so the second block will be activated, because operatorcatch(AE,\"AE somewhere\")has exception type AE as parameter and operatorcatch(BE,\"BE in line 3\")has exception type BE.In the second sample there are 2 try-catch-blocks such thattryoperator is described earlier thanthrowoperator andcatchoperator is described later thanthrowoperator:try-catch(AE,\"AE in line 3\")andtry-catch(AE,\"AE somewhere\"). Exception type is AE, so both blocks can be activated, but only the first one will be activated, because operatorcatch(AE,\"AE in line 3\")is described earlier thancatch(AE,\"AE somewhere\")In the third sample there is no blocks that can be activated by an exception of type CE.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "b52c03f3", "template_md5": "35d339e4", "result": "You are given a program written in a simple language with three types of instructions:\n\n* `try`: Starts a new block of code.\n* `catch(exception_type, message)`: Ends a `try` block and handles exceptions of a specific type. If an exception of that type occurs within the `try` block, the message is printed.\n* `throw(exception_type)`: Creates an exception of a specific type.\n\nThe program has exactly one `throw` instruction.  \n\nYour task is to determine the message that will be printed by the program. \n\n**Input:**\n\nThe input consists of a number `n` followed by `n` lines, each containing one of the three instructions.\n\n**Output:**\n\nPrint the message that will be displayed on the screen after the program is executed. If no matching `catch` block is found, print \"Unhandled Exception\"."}, {"prompt_md5": "20962b3d", "template_md5": "465699a0", "result": "You are given a program with three types of instructions: try, catch, and throw. \n\n* `try` starts a block.\n* `catch` closes a block and handles a specific type of error.\n* `throw` creates an error of a specific type.\n\nThe program has exactly one `throw` instruction. Determine the message displayed when the program runs, based on which `catch` block handles the error."}]}