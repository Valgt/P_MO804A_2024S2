{"uid": "1284-F", "url": "https://codeforces.com/contest/1284/problem/F", "tags": ["data structures", " graph matchings", " graphs", " math", " trees"], "title": "1284-F", "statement": "F. New Year and Social Networktime limit per test4 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputDonghyun's new social network service (SNS) contains $$$n$$$ users numbered $$$1, 2, \\\\ldots, n$$$. Internally, their network is atree graph, so there are $$$n-1$$$ direct connections between each user. Each user can reach every other users by using some sequence of direct connections. From now on, we will denote this primary network as $$$T_1$$$.To prevent a possible server breakdown, Donghyun created a backup network $$$T_2$$$, which also connects the same $$$n$$$ users via a tree graph. If a system breaks down, exactly one edge $$$e \\\\in T_1$$$ becomes unusable. In this case, Donghyun will protect the edge $$$e$$$ by picking another edge $$$f \\\\in T_2$$$, and add it to the existing network. This new edge should make the network be connected again.Donghyun wants to assign a replacement edge $$$f \\\\in T_2$$$ for as many edges $$$e \\\\in T_1$$$ as possible. However, since the backup network $$$T_2$$$ is fragile, $$$f \\\\in T_2$$$ can be assigned as the replacement edge for at most one edge in $$$T_1$$$. With this restriction, Donghyun wants to protect as many edges in $$$T_1$$$ as possible.Formally, let $$$E(T)$$$ be an edge set of the tree $$$T$$$. We consider a bipartite graph with two parts $$$E(T_1)$$$ and $$$E(T_2)$$$. For $$$e \\\\in E(T_1), f \\\\in E(T_2)$$$, there is an edge connecting $$$\\\\{e, f\\\\}$$$ if and only if graph $$$T_1 - \\\\{e\\\\} + \\\\{f\\\\}$$$ is a tree. You should find a maximum matching in this bipartite graph.InputThe first line contains an integer $$$n$$$ ($$$2 \\\\le n \\\\le 250\\\\,000$$$), the number of users.In the next $$$n-1$$$ lines, two integers $$$a_i$$$, $$$b_i$$$ ($$$1 \\\\le a_i, b_i \\\\le n$$$) are given. Those two numbers denote the indices of the vertices connected by the corresponding edge in $$$T_1$$$.In the next $$$n-1$$$ lines, two integers $$$c_i$$$, $$$d_i$$$ ($$$1 \\\\le c_i, d_i \\\\le n$$$) are given. Those two numbers denote the indices of the vertices connected by the corresponding edge in $$$T_2$$$.It is guaranteed that both edge sets form a tree of size $$$n$$$.OutputIn the first line, print the number $$$m$$$ ($$$0 \\\\leq m < n$$$), the maximum number of edges that can be protected.In the next $$$m$$$ lines, print four integers $$$a_i, b_i, c_i, d_i$$$. Those four numbers denote that the edge $$$(a_i, b_i)$$$ in $$$T_1$$$ is will be replaced with an edge $$$(c_i, d_i)$$$ in $$$T_2$$$.All printed edges should belong to their respective network, and they should link to distinct edges in their respective network. If one removes an edge $$$(a_i, b_i)$$$ from $$$T_1$$$ and adds edge $$$(c_i, d_i)$$$ from $$$T_2$$$, the network should remain connected. The order of printing the edges or the order of vertices in each edge does not matter.If there are several solutions, you can print any.ExamplesInput4 1 2 2 3 4 3 1 3 2 4 1 4Output3 3 2 4 2 2 1 1 3 4 3 1 4Input5 1 2 2 4 3 4 4 5 1 2 1 3 1 4 1 5Output4 2 1 1 2 3 4 1 3 4 2 1 4 5 4 1 5Input9 7 9 2 8 2 1 7 5 4 7 2 4 9 6 3 9 1 8 4 8 2 9 9 5 7 6 1 3 4 6 5 3Output8 4 2 9 2 9 7 6 7 5 7 5 9 6 9 4 6 8 2 8 4 3 9 3 5 2 1 1 8 7 4 1 3", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "db2726f5", "template_md5": "35d339e4", "result": "There are $n$ users connected in a tree graph called $T_1$. There is another tree graph $T_2$ with the same $n$ users.  \n\nIf one edge in $T_1$ breaks, you can protect it by adding one edge from $T_2$.  \n\nYou can only use each edge in $T_2$ to protect one edge in $T_1$.\n\nFind the maximum number of edges in $T_1$ that you can protect. \n\nFor each protected edge in $T_1$, list the corresponding edge in $T_2$ that protects it. \n\n\n\nInput:\n\n* The first line contains $n$ (the number of users).\n* The next $n-1$ lines each contain two numbers $a_i$ and $b_i$ representing an edge in $T_1$.\n* The next $n-1$ lines each contain two numbers $c_i$ and $d_i$ representing an edge in $T_2$.\n\nOutput:\n\n* The first line contains $m$ (the maximum number of protected edges).\n* The next $m$ lines each contain four numbers $a_i$, $b_i$, $c_i$, and $d_i$ representing a protected edge in $T_1$ and its corresponding protecting edge in $T_2$."}, {"prompt_md5": "ec368cec", "template_md5": "465699a0", "result": "You have two trees with the same number of nodes.  Each edge in the first tree can be broken.  You have a second tree where each edge can be used to fix one broken edge in the first tree.  Find the maximum number of edges in the first tree that can be fixed."}]}