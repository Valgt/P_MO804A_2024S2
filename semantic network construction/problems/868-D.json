{"uid": "868-D", "url": "https://codeforces.com/contest/868/problem/D", "tags": ["bitmasks", " brute force", " dp", " implementation", " strings"], "title": "868-D", "statement": "D. Huge Stringstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are givennstringss1,s2, ...,snconsisting of characters0and1.moperations are performed, on each of them you concatenate two existing strings into a new one. On thei-th operation the concatenationsaisbiis saved into a new stringsn+i(the operations are numbered starting from1). After each operation you need to find the maximum positive integerksuch that all possible strings consisting of0and1of lengthk(there are2ksuch strings) are substrings of the new string. If there is no suchk, print0.InputThe first line contains single integern(1 ≤n≤ 100) — the number of strings. The nextnlines contain stringss1,s2, ...,sn(1 ≤ |si| ≤ 100), one per line. The total length of strings is not greater than100.The next line contains single integerm(1 ≤m≤ 100) — the number of operations.mlines follow, each of them contains two integersaiabdbi(1 ≤ai,bi≤n+i- 1) — the number of strings that are concatenated to formsn+i.OutputPrintmlines, each should contain one integer — the answer to the question after the corresponding operation.ExampleInput5011010111111031 26 54 4Output120NoteOn the first operation, a new string \"0110\" is created. Fork= 1the two possible binary strings of lengthkare \"0\" and \"1\", they are substrings of the new string. Fork= 2and greater there exist strings of lengthkthat do not appear in this string (fork= 2such string is \"00\"). So the answer is1.On the second operation the string \"01100\" is created. Now all strings of lengthk= 2are present.On the third operation the string \"1111111111\" is created. There is no zero, so the answer is0.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "7f73b291", "template_md5": "35d339e4", "result": "You are given $n$ strings consisting of 0s and 1s. You will perform $m$ operations. In each operation, you concatenate two existing strings to create a new string.  After each operation, find the largest integer $k$ such that all possible binary strings of length $k$ ($2^k$ strings) are substrings of the new string. If no such $k$ exists, print 0.\n\n**Input:**\n\n* The first line contains an integer $n$ (1 ≤ $n$ ≤ 100), the number of initial strings.\n* The next $n$ lines contain the strings $s_1, s_2, ..., s_n$ (1 ≤ |$s_i$| ≤ 100), one per line.\n* The next line contains an integer $m$ (1 ≤ $m$ ≤ 100), the number of operations.\n* The next $m$ lines each contain two integers $a_i$ and $b_i$ (1 ≤ $a_i$, $b_i$ ≤ $n + i - 1$), indicating which two strings to concatenate to form the new string $s_{n+i}$.\n\n**Output:**\n\nPrint $m$ lines, each containing an integer, representing the largest $k$ found after each operation."}, {"prompt_md5": "1ea96b6b", "template_md5": "465699a0", "result": "You are given a list of strings made up of 0s and 1s. You then perform a series of operations where you combine two existing strings to create a new one. After each operation, find the largest number of consecutive 0s and 1s that can be combined to form all possible binary strings of that length. If no such number exists, output 0."}]}