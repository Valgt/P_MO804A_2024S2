{"uid": "202-B", "url": "https://codeforces.com/contest/202/problem/B", "tags": ["brute force"], "title": "202-B", "statement": "B. Brand New Easy Problemtime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutA widely known among some people Belarusian sport programmer Lesha decided to make some money to buy a one square meter larger flat. To do this, he wants to make and carry out a Super Rated Match (SRM) on the site Torcoder.com. But there's a problem — a severe torcoder coordinator Ivan does not accept any Lesha's problem, calling each of them an offensive word \"duped\" (that is, duplicated). And one day they nearely quarrelled over yet another problem Ivan wouldn't accept.You are invited to act as a fair judge and determine whether the problem is indeedbrand new, or Ivan is right and the problem bears some resemblance to those used in the previous SRMs.You are given the descriptions of Lesha's problem and each of Torcoder.com archive problems. The description of each problem is a sequence of words. Besides, it is guaranteed that Lesha's problem has no repeated words, while the description of an archive problem may contain any number of repeated words.The \"similarity\" between Lesha's problem and some archive problem can be found as follows. Among all permutations of words in Lesha's problem we choose the one that occurs in the archive problem as a subsequence. If there are multiple such permutations, we choose the one with the smallest number of inversions. Then the \"similarity\" of a problem can be written as, wherenis the number of words in Lesha's problem andxis the number of inversions in the chosen permutation. Note that the \"similarity\"pis always a positive integer.The problem is calledbrand newif there is not a single problem in Ivan's archive which contains a permutation of words from Lesha's problem as a subsequence.Help the boys and determine whether the proposed problem is new, or specify the problem from the archive which resembles Lesha's problem the most, otherwise.InputThe first line contains a single integern(1 ≤n≤ 4) — the number of words in Lesha's problem. The second line containsnspace-separated words — the short description of the problem.The third line contains a single integerm(1 ≤m≤ 10) — the number of problems in the Torcoder.com archive. Nextmlines contain the descriptions of the problems as \"ks1s2...sk\", wherek(1 ≤k≤ 20) is the number of words in the problem andsiis a word of the problem description.All words from all problem descriptions contain no more than 10 lowercase English letters.OutputIf Lesha's problem isbrand new, print string \"Brand new problem!\" (without quotes).Otherwise, on the first line print the index of the archive problem which resembles Lesha's problem most. If there are multiple such problems, print the one with the smallest index. On the second line print a string consisting of characters[:, character|repeatedptimes, and characters:], wherepis the \"similarity\" between this problem and Lesha's one. The archive problems are numbered starting from one in the order in which they are given in the input.ExamplesInput4find the next palindrome110 find the previous palindrome or print better luck next timeOutput1[:||||||:]Input3add two numbers31 add2 two two3 numbers numbers numbersOutputBrand new problem!Input4these papers are formulas36 what are these formulas and papers5 papers are driving me crazy4 crazy into the nightOutput1[:||||:]Input3add two decimals54 please two decimals add5 decimals want to be added4 two add decimals add4 add one two three7 one plus two plus three equals sixOutput3[:|||:]NoteLet us remind you that the number of inversions is the number of pairs of words that follow in the permutation not in their original order. Thus, for example, if the original problem is \"add two numbers\", then permutation \"numbers add two\" contains two inversions — pairs of words \"numbers\" and \"add\", \"numbers\" and \"two\".Sequenceb1,b2,  ...,bkis a subsequence of sequencea1,a2,  ...,anif there exists such a set of indices1 ≤i1<i2< ...   <ik≤nthataij=bj(in other words, if sequencebcan be obtained fromaby deleting some of its elements).In the first test case the first problem contains the \"find the palindrome next\" permutation as a subsequence, in which the number of inversions equals 1 (words \"palindrome\" and \"next\").In the second test case there is no problem that contains a permutation of words from Lesha's problem as a subsequence.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "3c41d53a", "template_md5": "35d339e4", "result": "You are given a list of words representing a problem description. You are also given a list of archive problem descriptions.  \n\nDetermine if the given problem description is unique (brand new) or if it is similar to one of the archive problems.\n\n**Similarity is defined as follows:**\n\n1. Find all possible orderings (permutations) of the words in the given problem description.\n2. For each permutation, check if it is a subsequence of any archive problem description.\n3. If a match is found, choose the permutation with the fewest inversions. \n    * An inversion is a pair of words in the permutation that are out of order compared to their original positions in the given problem description.\n4. The similarity is the number of inversions in the chosen permutation.\n\n**Output:**\n\n* If the given problem is unique, print \"Brand new problem!\".\n* Otherwise, print:\n    * The index of the most similar archive problem.\n    * The similarity value."}, {"prompt_md5": "f8e36e16", "template_md5": "465699a0", "result": "You are given a list of words representing a problem. You are also given a list of other problem descriptions, each also a list of words.  Determine if the given problem is unique or if it is similar to one of the problems in the list.  \n\nIf it is similar, output the index of the most similar problem and a measure of similarity. If it is unique, output \"Unique problem\". \n\nSimilarity is measured by finding a rearrangement of the given problem's words that appears as a subsequence within a problem in the list. The similarity score is the number of \"inversions\" in this rearrangement. An inversion is when two words in the rearrangement are out of order compared to their original order in the given problem."}]}