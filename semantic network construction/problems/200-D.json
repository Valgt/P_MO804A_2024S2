{"uid": "200-D", "url": "https://codeforces.com/contest/200/problem/D", "tags": ["binary search", " brute force", " expression parsing", " implementation"], "title": "200-D", "statement": "D. Programming Languagetime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutRecently, Valery have come across an entirely new programming language. Most of all the language attracted him with template functions and procedures. Let us remind you that templates are tools of a language, designed to encode generic algorithms, without reference to some parameters (e.g., data types, buffer sizes, default values).Valery decided to examine template procedures in this language in more detail. The description of a template procedure consists of the procedure name and the list of its parameter types. The generic typeTparameters can be used as parameters of template procedures.A procedure call consists of a procedure name and a list of variable parameters. Let's call a proceduresuitablefor this call if the following conditions are fulfilled:its name equals to the name of the called procedure;the number of its parameters equals to the number of parameters of the procedure call;the types of variables in the procedure call match the corresponding types of its parameters. The variable type matches the type of a parameter if the parameter has a generic typeTor the type of the variable and the parameter are the same.You are given a description of some set of template procedures. You are also given a list of variables used in the program, as well as direct procedure calls that use the described variables. For each call you need to count the number of procedures that are suitable for this call.InputThe first line contains a single integern(1 ≤n≤ 1000) — the number of template procedures. The nextnlines contain the description of the procedures specified in the following format:\"void procedureName (type_1, type_2, ..., type_t)\" (1 ≤t≤ 5), wherevoidis the keyword,procedureNameis the procedure name,type_iis the type of the next parameter. Types of language parameters can be \"int\", \"string\", \"double\", and the keyword \"T\", which denotes the generic type.The next line contains a single integerm(1 ≤m≤ 1000) — the number of used variables. Nextmlines specify the description of the variables in the following format:\"type variableName\", wheretypeis the type of variable that can take values \"int\", \"string\", \"double\",variableName— the name of the variable.The next line contains a single integerk(1 ≤k≤ 1000) — the number of procedure calls. Nextklines specify the procedure calls in the following format:\"procedureName (var_1, var_2, ..., var_t)\"(1 ≤t≤ 5), whereprocedureNameis the name of the procedure,var_iis the name of a variable.The lines describing the variables, template procedures and their calls may contain spaces at the beginning of the line and at the end of the line, before and after the brackets and commas. Spaces may be before and after keywordvoid. The length of each input line does not exceed100characters. The names of variables and procedures are non-empty strings of lowercase English letters and numbers with lengths of not more than10characters. Note that this is the only condition at the names. Only the specified variables are used in procedure calls. The names of the variables are distinct. No two procedures are the same. Two procedures are the same, if they have identical names and identical ordered sets of types of their parameters.OutputOn each ofklines print a single number, where thei-th number stands for the number of suitable template procedures for thei-th call.ExamplesInput4void f(int,T)void  f(T, T)void foo123   ( int,  double,  string,string  )void  p(T,double)3int astring    sdouble x1235f(a,  a)f(s,a   )foo   (a,s,s)f  (  s  ,x123)proc(a)Output21010Input6void f(string,double,int)void f(int)void f  ( T  )void procedure(int,double)void f  (T, double,int)void f(string, T,T)4int aint xstring  tdouble  val5f(t, a, a)f(t,val,a)f(val,a, val)solve300(val, val)f  (x)Output13002", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "49a6f066", "template_md5": "35d339e4", "result": "You are given a list of template procedures and a list of variables. Each template procedure has a name and a list of parameter types.  Each parameter type can be \"int\", \"string\", \"double\", or \"T\" (a generic type).\n\nYou are also given a list of procedure calls, each consisting of a procedure name and a list of variable names.\n\nFor each procedure call, determine the number of template procedures that are suitable for that call. A procedure is suitable if:\n\n* It has the same name as the called procedure.\n* It has the same number of parameters as the called procedure.\n* The types of the variables in the call match the types of the parameters in the procedure. A variable type matches a parameter type if the parameter type is \"T\" or the variable type and parameter type are the same.\n\n\n\nInput:\n\n* The first line contains the number of template procedures, $n$.\n* The next $n$ lines describe the template procedures, each in the format \"void procedureName (type_1, type_2, ..., type_t)\".\n* The next line contains the number of variables, $m$.\n* The next $m$ lines describe the variables, each in the format \"type variableName\".\n* The next line contains the number of procedure calls, $k$.\n* The next $k$ lines describe the procedure calls, each in the format \"procedureName (var_1, var_2, ..., var_t)\".\n\nOutput:\n\n* For each procedure call, print the number of suitable template procedures."}, {"prompt_md5": "bc92cfb8", "template_md5": "465699a0", "result": "You are given a list of functions with parameters of different types (including a generic type \"T\"). You are also given a list of variables and calls to these functions using these variables.  For each function call, count how many functions match the call based on name and parameter types."}]}