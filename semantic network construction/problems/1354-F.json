{"uid": "1354-F", "url": "https://codeforces.com/contest/1354/problem/F", "tags": ["constructive algorithms", " dp", " flows", " graph matchings", " greedy", " sortings"], "title": "1354-F", "statement": "F. Summoning Minionstime limit per test6 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputPolycarp plays a computer game. In this game, the players summon armies of magical minions, which then fight each other.Polycarp can summon $$$n$$$ different minions. The initial power level of the $$$i$$$-th minion is $$$a_i$$$, and when it is summoned, all previously summoned minions' power levels are increased by $$$b_i$$$. The minions can be summoned in any order.Unfortunately, Polycarp cannot have more than $$$k$$$ minions under his control. To get rid of unwanted minions after summoning them, he may destroy them. Each minion can be summoned (and destroyed) only once.Polycarp's goal is to summon the strongest possible army. Formally, he wants to maximize the sum of power levels of all minions under his control (those which are summoned and not destroyed).Help Polycarp to make up a plan of actions to summon the strongest possible army!InputThe first line contains one integer $$$T$$$ ($$$1 \\\\le T \\\\le 75$$$) — the number of test cases.Each test case begins with a line containing two integers $$$n$$$ and $$$k$$$ ($$$1 \\\\le k \\\\le n \\\\le 75$$$) — the number of minions availible for summoning, and the maximum number of minions that can be controlled by Polycarp, respectively.Then $$$n$$$ lines follow, the $$$i$$$-th line contains $$$2$$$ integers $$$a_i$$$ and $$$b_i$$$ ($$$1 \\\\le a_i \\\\le 10^5$$$, $$$0 \\\\le b_i \\\\le 10^5$$$) — the parameters of the $$$i$$$-th minion.OutputFor each test case print the optimal sequence of actions as follows:Firstly, print $$$m$$$ — the number of actions which Polycarp has to perform ($$$0 \\\\le m \\\\le 2n$$$). Then print $$$m$$$ integers $$$o_1$$$, $$$o_2$$$, ..., $$$o_m$$$, where $$$o_i$$$ denotes the $$$i$$$-th action as follows: if the $$$i$$$-th action is to summon the minion $$$x$$$, then $$$o_i = x$$$, and if the $$$i$$$-th action is to destroy the minion $$$x$$$, then $$$o_i = -x$$$. Each minion can be summoned at most once and cannot be destroyed before being summoned (and, obviously, cannot be destroyed more than once). The number of minions in Polycarp's army should be not greater than $$$k$$$ after every action.If there are multiple optimal sequences, print any of them.ExampleInput3 5 2 5 3 7 0 5 0 4 0 10 0 2 1 10 100 50 10 5 5 1 5 2 4 3 3 4 2 5 1Output4 2 1 -1 5 1 2 5 5 4 3 2 1NoteConsider the example test.In the first test case, Polycarp can summon the minion $$$2$$$ with power level $$$7$$$, then summon the minion $$$1$$$, which will increase the power level of the previous minion by $$$3$$$, then destroy the minion $$$1$$$, and finally, summon the minion $$$5$$$. After this, Polycarp will have two minions with power levels of $$$10$$$.In the second test case, Polycarp can control only one minion, so he should choose the strongest of them and summon it.In the third test case, Polycarp is able to summon and control all five minions.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "536d773c", "template_md5": "35d339e4", "result": "You are given $n$ minions, each with a power level $a_i$ and a boost value $b_i$.  When a minion is summoned, its power level is increased by $b_i$ for all previously summoned minions. You can summon minions in any order, but you can only control a maximum of $k$ minions at a time.  \n\nYour goal is to find the order in which to summon and destroy minions to maximize the total power level of the minions you control at any given time. \n\nOutput the sequence of actions:\n\n*  A positive integer $x$ represents summoning minion $x$.\n*  A negative integer $-x$ represents destroying minion $x$.\n\nFor example, if the input is:\n\n* $n = 5$, $k = 2$\n* $a_1 = 5$, $b_1 = 3$\n* $a_2 = 7$, $b_2 = 0$\n* $a_3 = 10$, $b_3 = 2$\n* $a_4 = 2$, $b_4 = 5$\n* $a_5 = 1$, $b_5 = 1$\n\nA possible output could be:\n\n* $m = 4$\n* $o = 1, 2, -1, 5$"}, {"prompt_md5": "d48fa8c3", "template_md5": "465699a0", "result": "You have a set of items, each with a value and a bonus that increases the value of other items. You can choose a maximum of *k* items.  Find the combination of items to maximize the total value."}]}