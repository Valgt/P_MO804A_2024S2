{"uid": "949-E", "url": "https://codeforces.com/contest/949/problem/E", "tags": ["brute force"], "title": "949-E", "statement": "E. Binary Cardstime limit per test1 secondmemory limit per test512 megabytesinputstandard inputoutputstandard outputIt is never too late to play the fancy \"Binary Cards\" game!There is an infinite amount of cards of positive and negative ranks that are used in the game. The absolute value of any card rank is a power of two, i.e. each card has a rank of either2kor- 2kfor some integerk≥ 0. There is an infinite amount of cards of any valid rank.At the beginning of the game player forms his deck that is some multiset (possibly empty) of cards. It is allowed to pick any number of cards of any rank but the small deck is considered to be a skill indicator. Game consists ofnrounds. In thei-th round jury tells the player an integerai. After that the player is obligated to draw such a subset of his deck that the sum of ranks of the chosen cards is equal toai(it is allowed to not draw any cards, in which case the sum is considered to be equal to zero). If player fails to do so, he loses and the game is over. Otherwise, player takes back all of his cards into his deck and the game proceeds to the next round. Player is considered a winner if he is able to draw the suitable set of cards in each of the rounds.Somebody told you which numbersaithe jury is going to tell you in each round. Now you want to pick a deck consisting of the minimum number of cards that allows you to win the \"Binary Cards\" game.InputThe first line of input contains an integern(1 ≤n≤ 100 000), the number of rounds in the game.The second line of input containsnintegersa1,a2, ...,an(- 100 000 ≤ai≤ 100 000), the numbers that jury is going to tell in each round.OutputIn the first line print the integerk(0 ≤k≤ 100 000), the minimum number of cards you have to pick in your deck in ordered to win the \"Binary Cards\".In the second line printkintegersb1,b2, ...,bk(- 220≤bi≤ 220,|bi|is a power of two), the ranks of the cards in your deck. You may output ranks in any order. If there are several optimum decks, you are allowed to print any of them.It is guaranteed that there exists a deck of minimum size satisfying all the requirements above.ExamplesInput19Output21 8Input5-1 3 0 4 7Output34 -1 4Input42 -2 14 18Output3-2 2 16NoteIn the first sample there is the only round in the game, in which you may simply draw both your cards. Note that this sample test is the only one satisfying the first test group constraints.In the second sample you may draw the only card- 1in the first round, cards4and- 1in the second round, nothing in the third round, the only card4in the fourth round and the whole deck in the fifth round.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "04aaac22", "template_md5": "35d339e4", "result": "You are playing a game where in each of $n$ rounds, you are given a target integer $a_i$. You must choose cards from your deck to sum up to $a_i$.  \n\nYou have an infinite supply of cards with ranks that are powers of 2 (e.g., 2, 4, 8, -2, -4, -8, etc.).\n\nYour goal is to find the smallest possible deck of cards that allows you to win the game, meaning you can always find a combination of cards in your deck to sum to the target integer in each round.\n\n**Input:**\n\n* The first line contains an integer $n$ (1 ≤ $n$ ≤ 100,000), the number of rounds.\n* The second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ (-100,000 ≤ $a_i$ ≤ 100,000), the target integers for each round.\n\n**Output:**\n\n* The first line contains an integer $k$ (0 ≤ $k$ ≤ 100,000), the minimum number of cards needed in your deck.\n* The second line contains $k$ integers $b_1$, $b_2$, ..., $b_k$ (-2<sup>20</sup> ≤ $b_i$ ≤ 2<sup>20</sup>, |$b_i$| is a power of two), the ranks of the cards in your deck."}, {"prompt_md5": "b651c1ce", "template_md5": "465699a0", "result": "You need to build a set of cards with specific values.  Each round, you are given a target value. You must use cards from your set to sum up to that target value. If you can't, you lose.  Find the smallest set of cards that lets you win for all given target values."}]}