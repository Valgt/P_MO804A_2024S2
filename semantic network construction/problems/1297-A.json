{"uid": "1297-A", "url": "https://codeforces.com/contest/1297/problem/A", "tags": ["*special", " implementation"], "title": "1297-A", "statement": "A. Likes Displaytime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputPolycarp is working on the implementation of displaying likes on the Codehorses social network. The number of likes should be displayed in a format that will be easy to read by users. It was decided that for large numbers of likes the format should be like123K(one hundred twenty-three thousand) or like56M(fifty-six million).The following displaying strategy has been approved:the number will be displayed either as an integer number from0to999, or as a positive integer number of thousands (from1Kto999K), or as a positive integer number of millions (from1Mon),the specified exact number of likes $$$n$$$ when displaying should be rounded to the nearest view from the case above (if rounding is ambiguous, it must be rounded up): for example, $$$1785$$$ should be rounded to2Kinstead of1K, $$$4500000$$$ should be rounded to5M.Help Polycarp implement this part of the functionality: for a given non-negative integer number of likes $$$n$$$, print its view in the Codehorses interface.InputThe first line contains an integer $$$t$$$ ($$$1 \\\\le t \\\\le 1000$$$) — the number of test cases in the input. The following are descriptions of the $$$t$$$ input test cases, one per line.The description of each test case consists of a single line that contains a non-negative integer $$$n$$$ ($$$0 \\\\le n \\\\le 2\\\\cdot10^9$$$) — the number of likes.OutputPrint $$$t$$$ answers to the given test cases in the order from the input. Each printed value must have one of the following types:either an integer from0to999which corresponds just to the number of likes,or a number of thousands from1Kto999K,or a number of millions from1Mto2000M.The answer is equal to a view which is the closest (by difference) to the given number $$$n$$$. If this rounding is ambiguous, then round answer up (to a greater value).ExampleInput9 999 123 0 1782 31415926 1500 999999 35499710 2000000000Output999 123 0 2K 31M 2K 1M 35M 2000MNoteLet's describe some test cases:$$$1782$$$ can be displayed either as1Kor as2Kbut2Kis the nearest view;$$$1500$$$ have same difference with1Kand2Kso it should be rounded up;$$$999999$$$ should be displayed as1Msince it's closer to it than to999K.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "19c2c8f8", "template_md5": "35d339e4", "result": "You are given a non-negative integer $n$ representing the number of likes.  You need to display this number in a specific format:\n\n* If $n$ is between 0 and 999, display it as is.\n* If $n$ is between 1000 and 999,000, display it as $xK$ where $x$ is the number of thousands.\n* If $n$ is between 1,000,000 and 2,000,000,000, display it as $xM$ where $x$ is the number of millions.\n\nRound up to the nearest view if the number is ambiguous.\n\nFor example:\n\n* 1782 should be displayed as 2K\n* 1500 should be displayed as 2K\n* 999999 should be displayed as 1M\n\n\n\nYou will be given multiple test cases, each with a different value of $n$. For each test case, output the formatted display of the number of likes."}, {"prompt_md5": "9f78f0bf", "template_md5": "465699a0", "result": "Given a non-negative integer representing the number of likes, output the most appropriate way to display it, choosing from:\n\n* The number itself (0 to 999)\n* Thousands (1K to 999K)\n* Millions (1M to 2000M)\n\nRound up if there's a tie."}]}