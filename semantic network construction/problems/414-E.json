{"uid": "414-E", "url": "https://codeforces.com/contest/414/problem/E", "tags": ["data structures"], "title": "414-E", "statement": "E. Mashmokh's Designed Problemtime limit per test4 secondsmemory limit per test512 megabytesinputstdinoutputstdoutAfter a lot of trying, Mashmokh designed a problem and it's your job to solve it.You have a treeTwithnvertices. Each vertex has a unique index from 1 ton. The root ofThas index1. For each vertex of this treev, you are given a list of its children in a specific order. You must perform three types of query on this tree:find distance (the number of edges in the shortest path) betweenuandv;givenvandh, disconnectvfrom its father and connect it to itsh-th ancestor; more formally, let's denote the path fromvto the root byx1,x2, ...,xl(h<l), so thatx1=vandxlis root; disconnectvfrom its father (x2) and connect it toxh+ 1; vertexvmust be added to the end of the child-list of vertexxh+ 1;in the vertex sequence produced by calling function dfs(root) find the latest vertex that has distancekfrom the root.The pseudo-code of function dfs(v):// ls[v]: list of children of vertex v// its i-th element is ls[v][i]// its size is size(ls[v])sequence result = empty sequence;void dfs(vertex now){add now to end of result;for(int i = 1; i <= size(ls[v]); i = i + 1) //loop from i = 1 to i = size(ls[v])dfs(ls[v][i]);}InputThe first line of input contains two space-separated integersn,m(2 ≤n≤ 105; 1 ≤m≤ 105), the number of vertices ofTand number of queries to perform.Thei-th of the followingnlines contains an integerli(0 ≤li≤n), number ofi-th vertex's children. Thenlispace-separated integers follow, thej-th of them is the index ofj-th child ofi-th vertex. Note that the order of these vertices is important.Each of the followingmlines has one of the following format: \"1vu\", \"2vh\", or \"3k\". The first number in the line is the type of query to perform according to the problem statement. The next numbers are description of the query.It's guaranteed that all the queries are correct. For example, in the second-type queryhis at least 2 and at most distance ofvfrom root. Also in the third-type query there is at least one vertex with distancekfrom the root at the time the query is given.OutputFor each query of the first or third type output one line containing the result of the query.ExamplesInput4 91 21 31 401 1 42 4 21 3 43 13 22 3 21 1 23 13 2Output3224134Input2 21 201 2 13 1Output12", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "2e0717aa", "template_md5": "35d339e4", "result": "You are given a tree with $n$ vertices, numbered from 1 to $n$. The root of the tree is vertex 1. For each vertex $v$, you are given a list of its children in a specific order. \n\nYou need to perform the following types of queries:\n\n1. **Find distance:** Given two vertices $u$ and $v$, find the number of edges in the shortest path between them.\n2. **Reconnect vertex:** Given a vertex $v$ and an integer $h$ (where $2 \\le h \\le$ distance of $v$ from the root), disconnect $v$ from its parent and connect it to its $h$-th ancestor. \n3. **Find latest vertex:** In the vertex sequence produced by a Depth First Search (DFS) starting from the root, find the latest vertex that has a distance of $k$ from the root.\n\n**Input:**\n\n* The first line contains two integers $n$ and $m$, the number of vertices and the number of queries, respectively.\n* The $i$-th of the following $n$ lines contains an integer $l_i$ (the number of children of vertex $i$) followed by $l_i$ integers, the indices of its children.\n* Each of the following $m$ lines has one of the following formats:\n    * \"1 $u$ $v$\":  Find the distance between vertices $u$ and $v$.\n    * \"2 $v$ $h$\": Reconnect vertex $v$ to its $h$-th ancestor.\n    * \"3 $k$\": Find the latest vertex with distance $k$ from the root in the DFS sequence.\n\n**Output:**\n\n* For each query of the first or third type, output the result on a separate line."}, {"prompt_md5": "8cbcceae", "template_md5": "465699a0", "result": "You are given a tree with a specified number of nodes.  For each node, you are given a list of its child nodes in a specific order. You need to perform three types of operations:\n\n1. Find the shortest distance between two given nodes.\n2. Change the parent of a given node to one of its ancestors.\n3. Find the last node in a depth-first traversal of the tree that is a given distance from the root. \n\n\n\nYou will be given input describing the tree structure and a series of these operations to perform. For each operation of type 1 or 3, output the result."}]}