{"uid": "367-A", "url": "https://codeforces.com/contest/367/problem/A", "tags": ["data structures", " implementation"], "title": "367-A", "statement": "A. Sereja and Algorithmtime limit per test1 secondmemory limit per test256 megabytesinputstdinoutputstdoutSereja loves all sorts of algorithms. He has recently come up with a new algorithm, which receives a string as an input. Let's represent the input string of the algorithm asq=q1q2...qk. The algorithm consists of two steps:Find any continuous subsequence (substring) of three characters of stringq, which doesn't equal to either string \"zyx\", \"xzy\", \"yxz\". Ifqdoesn't contain any such subsequence, terminate the algorithm, otherwise go to step 2.Rearrange the letters of the found subsequence randomly and go to step 1.Sereja thinks that the algorithm works correctly on stringqif there is a non-zero probability that the algorithm will be terminated. But if the algorithm anyway will work for infinitely long on a string, then we consider the algorithm to work incorrectly on this string.Sereja wants to test his algorithm. For that, he has strings=s1s2...sn, consisting ofncharacters. The boy conducts a series ofmtests. As thei-th test, he sends substringslisli+ 1...sri(1 ≤li≤ri≤n)to the algorithm input. Unfortunately, the implementation of his algorithm works too long, so Sereja asked you to help. For each test(li,ri)determine if the algorithm works correctly on this test or not.InputThe first line contains non-empty strings, its length (n) doesn't exceed105. It is guaranteed that stringsonly contains characters: 'x', 'y', 'z'.The second line contains integerm(1 ≤m≤ 105)— the number of tests. Nextmlines contain the tests. Thei-th line contains a pair of integersli,ri(1 ≤li≤ri≤n).OutputFor each test, print \"YES\" (without the quotes) if the algorithm works correctly on the corresponding test and \"NO\" (without the quotes) otherwise.ExamplesInputzyxxxxxxyyz55 51 31 111 43 6OutputYESYESNOYESNONoteIn the first example, in test one and two the algorithm will always be terminated in one step. In the fourth test you can get string \"xzyx\" on which the algorithm will terminate. In all other tests the algorithm doesn't work correctly.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "cae6709d", "template_md5": "35d339e4", "result": "You are given a string consisting of only the characters 'x', 'y', and 'z'.  \n\nThe algorithm works as follows:\n\n1. Find any continuous subsequence of three characters in the string that is not \"zyx\", \"xzy\", or \"yxz\".\n2. If a subsequence is found, rearrange its letters randomly and go back to step 1.\n3. If no subsequence is found, the algorithm terminates.\n\nThe algorithm is considered to work correctly on a string if there is a non-zero probability that it will eventually terminate.\n\nYou are given a string and a list of test ranges (start and end indices). For each test range, determine if the algorithm works correctly on the substring of the string within that range.\n\n**Input:**\n\n* The first line contains the string.\n* The second line contains the number of test ranges.\n* Each of the following lines contains two integers representing the start and end indices of a test range.\n\n**Output:**\n\nFor each test range, print \"YES\" if the algorithm works correctly on that range, and \"NO\" otherwise."}, {"prompt_md5": "c742d557", "template_md5": "465699a0", "result": "Given a string, determine if a specific algorithm will eventually terminate when given different substrings of the string as input. The algorithm works as follows:\n\n1. Find any three-character subsequence within the string that is not \"zyx\", \"xzy\", or \"yxz\".\n2. If found, randomly rearrange the letters of that subsequence and repeat step 1.\n3. If no such subsequence is found, the algorithm terminates.\n\nThe algorithm is considered to work correctly if there's a chance it will eventually terminate.  \n\n\nYou are given a string and multiple substrings of that string. For each substring, determine if the algorithm will correctly terminate."}]}