{"uid": "1168-E", "url": "https://codeforces.com/contest/1168/problem/E", "tags": ["constructive algorithms", " math"], "title": "1168-E", "statement": "E. Xor Permutationstime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputToad Mikhail has an array of $$$2^k$$$ integers $$$a_1, a_2, \\\\ldots, a_{2^k}$$$.Find two permutations $$$p$$$ and $$$q$$$ of integers $$$0, 1, \\\\ldots, 2^k-1$$$, such that $$$a_i$$$ is equal to $$$p_i \\\\oplus q_i$$$ for all possible $$$i$$$, or determine there are no such permutations. Here $$$\\\\oplus$$$ denotes thebitwise XOR operation.InputThe first line contains one integer $$$k$$$ ($$$2 \\\\leq k \\\\leq 12$$$), denoting that the size of the array is $$$2^k$$$.The next line contains $$$2^k$$$ space-separated integers $$$a_1, a_2, \\\\ldots, a_{2^k}$$$ ($$$0 \\\\leq a_i < 2^k$$$) — the elements of the given array.OutputIf the given array can't be represented as element-wise XOR of two permutations of integers $$$0, 1, \\\\ldots, 2^k-1$$$, print \"Fou\".Otherwise, print \"Shi\" in the first line.The next two lines should contain the description of two suitable permutations. The first of these lines should contain $$$2^k$$$ space-separated distinct integers $$$p_{1}, p_{2}, \\\\ldots, p_{2^k}$$$, and the second line should contain $$$2^k$$$ space-separated distinct integers $$$q_{1}, q_{2}, \\\\ldots, q_{2^k}$$$.All elements of $$$p$$$ and $$$q$$$ should be between $$$0$$$ and $$$2^k - 1$$$, inclusive; $$$p_i \\\\oplus q_i$$$ should be equal to $$$a_i$$$ for all $$$i$$$ such that $$$1 \\\\leq i \\\\leq 2^k$$$. If there are several possible solutions, you can print any.ExamplesInput2 0 1 2 3OutputShi 2 0 1 3  2 1 3 0Input2 0 0 0 0OutputShi 0 1 2 3  0 1 2 3Input2 0 1 2 2OutputFou", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "f4329d53", "template_md5": "35d339e4", "result": "You are given an array of $2^k$ integers.  Find two different arrangements (permutations) of the numbers 0 to $2^k-1$, such that the element in each position of the first arrangement XORed with the element in the same position of the second arrangement equals the corresponding element in the original array. \n\nIf no such arrangements exist, output \"No\". Otherwise, output \"Yes\" and then list the two arrangements.\n\n**XOR** is a bitwise operation.  For example, $3 \\oplus 5 = 6$ because:\n\n* $3 = 0011$ in binary\n* $5 = 0101$ in binary\n* $3 \\oplus 5 = 0110 = 6$"}, {"prompt_md5": "ece027c4", "template_md5": "465699a0", "result": "You are given a list of numbers.  Find two different orderings of the numbers 0 to  2^k-1  such that the result of combining each number in the list with its corresponding number in the other ordering using the XOR operation matches the original number in the list. If this is possible, output \"Shi\" followed by the two orderings. Otherwise, output \"Fou\"."}]}