{"uid": "2001-B", "url": "https://codeforces.com/contest/2001/problem/B", "tags": ["constructive algorithms"], "title": "2001-B", "statement": "B. Generate Permutationtime limit per test1.5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere is an integer sequence $$$a$$$ of length $$$n$$$, where each element is initially $$$-1$$$.Misuki has two typewriters where the first one writes letters from left to right, with a pointer initially pointing to $$$1$$$, and another writes letters from right to left with a pointer initially pointing to $$$n$$$.Misuki would choose one of the typewriters and use it to perform the following operations until $$$a$$$ becomes a permutation of $$$[1, 2, \\\\ldots, n]$$$write number: write the minimumpositiveinteger that isn't present in the array $$$a$$$ to the element $$$a_i$$$, $$$i$$$ is the position where the pointer points at. Such operation can be performed only when $$$a_i = -1$$$.carriage return: return the pointer to its initial position (i.e. $$$1$$$ for the first typewriter, $$$n$$$ for the second)move pointer: move the pointer to the next position, let $$$i$$$ be the position the pointer points at before this operation, if Misuki is using the first typewriter, $$$i := i + 1$$$ would happen, and $$$i := i - 1$$$ otherwise. Such operation can be performed only if after the operation, $$$1 \\\\le i \\\\le n$$$ holds.Your task is to construct any permutation $$$p$$$ of length $$$n$$$, such that the minimum number of carriage return operations needed to make $$$a = p$$$ is the same no matter which typewriter Misuki is using.InputEach test contains multiple test cases. The first line of input contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 500$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 2 \\\\cdot 10^5$$$) — the length of the permutation.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\\\cdot 10^5$$$.OutputFor each test case, output a line of $$$n$$$ integers, representing the permutation $$$p$$$ of length $$$n$$$ such that the minimum number of carriage return operations needed to make $$$a = p$$$ is the same no matter which typewriter Misuki is using, or $$$-1$$$ if it is impossible to do so.If there are multiple valid permutations, you can output any of them.ExampleInput3 1 2 3Output1 -1 3 1 2NoteIn the first testcase, it's possible to make $$$a = p = [1]$$$ using $$$0$$$ carriage return operations.In the second testcase, it is possible to make $$$a = p = [1, 2]$$$ with the minimal number of carriage returns as follows:If Misuki is using the first typewriter:Write number: write $$$1$$$ to $$$a_1$$$, $$$a$$$ becomes $$$[1, -1]$$$Move pointer: move the pointer to the next position. (i.e. $$$2$$$)Write number: write $$$2$$$ to $$$a_2$$$, $$$a$$$ becomes $$$[1, 2]$$$If Misuki is using the second typewriter:Move pointer: move the pointer to the next position. (i.e. $$$1$$$)Write number: write $$$1$$$ to $$$a_1$$$, $$$a$$$ becomes $$$[1, -1]$$$Carriage return: return the pointer to $$$2$$$.Write number: write $$$2$$$ to $$$a_2$$$, $$$a$$$ becomes $$$[1, 2]$$$It can be proven that the minimum number of carriage returns needed to transform $$$a$$$ into $$$p$$$ when using the first typewriter is $$$0$$$ and it is $$$1$$$ when using the second one, so this permutation is not valid.Similarly, $$$p = [2, 1]$$$ is also not valid, so there is no solution for $$$n = 2$$$.In the third testcase, it is possibile to make $$$a = p = [3, 1, 2]$$$ with $$$1$$$ carriage return with both the first and the second typewriter. It can be proven that, for both typewriters, it is impossible to write $$$p$$$ with $$$0$$$ carriage returns.With the first typewriter it is possible to:Move pointer: move the pointer to the next position. (i.e. $$$2$$$)Write number: write $$$1$$$ to $$$a_2$$$, $$$a$$$ becomes $$$[-1, 1, -1]$$$Move pointer: move the pointer to the next position. (i.e. $$$3$$$)Write number: write $$$2$$$ to $$$a_3$$$, $$$a$$$ becomes $$$[-1, 1, 2]$$$Carriage return: return the pointer to $$$1$$$.Write number: write $$$3$$$ to $$$a_1$$$, $$$a$$$ becomes $$$[3,1,2]$$$With the second typewriter it is possible to:Move pointer: move the pointer to the next position. (i.e. $$$2$$$)Write number: write $$$1$$$ to $$$a_2$$$, $$$a$$$ becomes $$$[-1, 1, -1]$$$Carriage return: return the pointer to $$$3$$$.Write number: write $$$2$$$ to $$$a_3$$$, $$$a$$$ becomes $$$[-1, 1, 2]$$$Move pointer: move the pointer to the next position. (i.e. $$$2$$$)Move pointer: move the pointer to the next position. (i.e. $$$1$$$)Write number: write $$$3$$$ to $$$a_1$$$, $$$a$$$ becomes $$$[3, 1, 2]$$$", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "fac17998", "template_md5": "35d339e4", "result": "You are given an array of length $n$ filled with $-1$. There are two typewriters:\n\n* **Typewriter 1:** Writes numbers from left to right, starting at index 1.\n* **Typewriter 2:** Writes numbers from right to left, starting at index $n$.\n\nBoth typewriters can perform the following operations:\n\n* **Write number:** Write the smallest missing positive integer into the current position of the typewriter. This can only be done if the current position is $-1$.\n* **Carriage return:** Return the pointer to its starting position.\n* **Move pointer:** Move the pointer to the next position (left for Typewriter 1, right for Typewriter 2). This can only be done if the new position is within the array bounds.\n\nYour task is to find a permutation $p$ of length $n$ such that the minimum number of carriage return operations needed to make the array equal to $p$ is the same for both typewriters. If no such permutation exists, output $-1$."}, {"prompt_md5": "291c2bfb", "template_md5": "465699a0", "result": "You are given a sequence of numbers. You have two tools that can write numbers into the sequence. One tool writes from left to right, the other from right to left.  You need to find a way to fill the sequence with unique numbers from 1 to n (where n is the length of the sequence) using the tools, so that the minimum number of times you need to reset each tool to its starting position is the same."}]}