{"uid": "1957-C", "url": "https://codeforces.com/contest/1957/problem/C", "tags": ["combinatorics", " dp", " math"], "title": "1957-C", "statement": "C. How Does the Rook Move?time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an $$$n \\\\times n$$$ chessboard where you and the computer take turns alternatingly to place white rooks & black rooks on the board respectively. While placing rooks, you have to ensure that no two rooks attack each other. Two rooks attack each other if they share the same row or columnregardless of color.A valid move is placing a rook on a position ($$$r$$$, $$$c$$$) such that it doesn't attack any other rook.You start first, and when you make a valid move in your turn, placing a white rook at position ($$$r$$$, $$$c$$$), the computer will mirror you and place a black rook at position ($$$c$$$, $$$r$$$) in its turn. If $$$r = c$$$, then the computer can't mirror your move, and skips its turn.You have already played $$$k$$$ moves with the computer (the computer tries to mirror these moves too), and you must continue playing the game until there are no valid moves remaining. How many different final configurations are possible when you continue the game after the $$$k$$$ moves? It is guaranteed that the $$$k$$$ moves and the implied computer moves are valid. Since the answer may be large, print it modulo $$$10^9+7$$$.Two configurations are considered different if there exists a coordinate ($$$r$$$, $$$c$$$) which has a rook in one configuration, but not in the otherorthe color of the rook on the coordinate is different.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\leq t \\\\leq 10^4$$$) — the number of test cases.The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\\\leq n \\\\leq 3 \\\\cdot 10^5$$$, $$$0 \\\\leq k \\\\leq n$$$) — the size of the chessboard and the number of moves you have already played respectively.Each of the next $$$k$$$ lines of the test case contains two integers $$$r_i$$$ and $$$c_i$$$, denoting the $$$i$$$-th move you made.It is guaranteed that the $$$k$$$ moves and the implied computer moves are valid.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3 \\\\cdot 10^5$$$.OutputFor each test case, output a single integer on a new line — the total number of possible final configurations modulo $$$10^9+7$$$.ExampleInput34 11 28 17 61000 44 4952 343222 33390 91Output3 331 671968183NoteIn the first test case, we have a $$$4 \\\\times 4$$$ grid and you've already played $$$1$$$ move. After you and the computer play a turn, we have a white rook at ($$$1$$$, $$$2$$$), and a black rook at ($$$2$$$, $$$1$$$). There are three possible configurations from this state —You place a white rook at ($$$3$$$, $$$4$$$) and the computer places a black rook at ($$$4$$$, $$$3$$$) as a response.You place a white rook at ($$$4$$$, $$$3$$$) and the computer places a black rook at ($$$3$$$, $$$4$$$) as a response.You place a white rook at ($$$3$$$, $$$3$$$) and then at ($$$4$$$, $$$4$$$), or the other way around. They both result in the same configuration.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "ed56e96b", "template_md5": "35d339e4", "result": "You and a computer are playing a game on an $n \\times n$ chessboard. You take turns placing rooks on the board.  Rooks can only be placed on empty squares and cannot attack each other (rooks attack if they share a row or column).\n\nYou start the game.  After each of your moves, the computer mirrors your move by placing a rook on the board. If your move would result in the computer placing a rook on a square where a rook already exists (its own or yours), the computer skips its turn.\n\nYou are given a starting position on the board after $k$ moves have already been made.  You need to determine how many different final configurations are possible, given the rules of the game.\n\n**Input:**\n\n* $t$ - the number of test cases\n* For each test case:\n    * $n$ - the size of the chessboard\n    * $k$ - the number of moves already played\n    * $k$ lines, each containing two integers $r_i$ and $c_i$ - the coordinates of your moves\n\n**Output:**\n\n* For each test case, output the number of possible final configurations modulo $10^9 + 7$."}, {"prompt_md5": "0f9fad38", "template_md5": "465699a0", "result": "You and a computer are playing a game on a square board. You take turns placing pieces.  You can only place a piece on an empty square.  If you place a piece, the computer must mirror your move on the board.  The game ends when no more legal moves can be made.  You are given the size of the board and the first few moves that have already been made.  Count how many different ways the game can end."}]}