{"uid": "1821-E", "url": "https://codeforces.com/contest/1821/problem/E", "tags": ["brute force", " dp", " greedy", " sortings", " strings"], "title": "1821-E", "statement": "E. Rearrange Bracketstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"1\" and \"+\" between the original characters of the sequence. For example:bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\");bracket sequences \")(\", \"(\" and \")\" are not.You are given a regular bracket sequence. In one move, you can remove a pair ofadjacentbrackets such that the left one is an opening bracket and the right one is a closing bracket. Then concatenate the resulting parts without changing the order. The cost of this move is the number of brackets to the right of the right bracket of this pair.Thecostof the regular bracket sequence is the smallest total cost of the moves required to make the sequence empty.Actually, you are not removing any brackets. Instead, you are given a regular bracket sequence and an integer $$$k$$$. You can perform the following operationat most $$$k$$$ times:extract some bracket from the sequence and insert it back at any position (between any two brackets, at the start or at the end; possibly, at the same place it was before).After all operations are performed, the bracket sequence has to be regular. What is the smallest possiblecostof the resulting regular bracket sequence?InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of testcases.The first line of each testcase contains a single integer $$$k$$$ ($$$0 \\\\le k \\\\le 5$$$) — the maximum number of operations you can perform.The second line contains a non-empty regular bracket sequence, it consists only of characters '(' and ')'.The total length of the regular bracket sequences over all testcases doesn't exceed $$$2 \\\\cdot 10^5$$$.OutputFor each testcase, print a single integer — the smallest possiblecostof the regular bracket sequence after you perform at most $$$k$$$ operations on it.ExampleInput70()0(())1(())5()1(()()(()))2((())()(()())((())))3((())()(()())((())))Output0 1 0 0 1 4 2", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "59cdb940", "template_md5": "35d339e4", "result": "You are given a sequence of parentheses, where each parenthesis is either '(' or ')'.  \n\nA valid sequence can be transformed into a correct mathematical expression by inserting '1' and '+' between the parentheses.\n\nYou can perform the following operation at most $k$ times:\n\n1. Choose a pair of adjacent parentheses (one opening and one closing).\n2. Remove this pair from the sequence.\n3. Insert the removed pair back into the sequence at a different position (between any two parentheses, at the beginning, or at the end).\n\nThe cost of a move is the number of parentheses to the right of the closing parenthesis in the removed pair.\n\nFind the smallest possible total cost of the sequence after performing at most $k$ operations, ensuring the resulting sequence remains valid.\n\n\nInput:\n\n* The first line contains the number of test cases, $t$.\n* For each test case:\n    * The first line contains the maximum number of operations, $k$.\n    * The second line contains a valid parenthesis sequence.\n\nOutput:\n\nFor each test case, print the smallest possible cost of the sequence after performing at most $k$ operations."}, {"prompt_md5": "c534eaa1", "template_md5": "465699a0", "result": "You are given a sequence of parentheses. You can move a single pair of parentheses to a new position within the sequence a limited number of times.  What is the minimum number of operations needed to make the sequence valid (meaning it can be turned into a correct mathematical expression)?"}]}