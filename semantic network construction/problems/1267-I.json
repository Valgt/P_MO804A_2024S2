{"uid": "1267-I", "url": "https://codeforces.com/contest/1267/problem/I", "tags": ["brute force", " constructive algorithms", " implementation", " interactive", " sortings"], "title": "1267-I", "statement": "I. Intriguing Selectiontime limit per test5 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputThis is an interactive problem.You are the head coach of a chess club. The club has $$$2n$$$ players, each player has somestrengthwhich can be represented by a number, and all those numbers are distinct. The strengths of the players are not known to you.You need to select $$$n$$$ players who would represent your club in the upcoming championship. Naturally, you want to select $$$n$$$ players with the highest strengths.You can organize matches between the players to do that. In every match, you pick two players, they play some games, and you learn which one of the two has higher strength. You can wait for the outcome of a match before deciding who will participate in the next one.However, you do not want to knowexactlyhow those $$$n$$$ players compare between themselves, as that would make the championship itself lessintriguing. More formally, you must reach a state where there is exactly one way to choose $$$n$$$ players with the highest strengths that is consistent with the outcomes of the matches you organized, but there must be at least two possible orderings of those $$$n$$$ players by strength that are consistent with the outcomes of the matches you organized.InteractionYour program has to process multiple test cases in one run. First, it should read the integer $$$t$$$ ($$$t \\\\ge 1$$$) — the number of test cases. Then, it should process the test cases one by one.In each test case, your program should start by reading the integer $$$n$$$ ($$$3 \\\\le n \\\\le 100$$$) — the number of players to select out of $$$2n$$$ players. The sum of squares of the values of $$$n$$$ over all test cases does not exceed $$$10\\\\,000$$$.Then your program can organize matches zero or more times. To organize a match, your program should print a match description formatted as? $$$i$$$ $$$j$$$— a question mark followed by two distinct numbers of players participating in the match. The players are numbered from 1 to $$$2n$$$, inclusive. Remember to flush the output after printing the match description. Then your program should read the match outcome — it will be either the greater-than character (>), if the first player in the match description has higher strength, or the less-than character (<), if the second player in the match description has higher strength.Your program can organize at most $$$4n^2$$$ matches. After it is done organizing matches, it should print the exclamation mark (!) and continue to the next test case, or exit gracefully if this was the last test case. Remember to flush the output after printing the exclamation mark.There must be exactly one way to choose $$$n$$$ players with the highest strength that is consistent with the outcomes of the matches you organized, but there must be at least two possible orderings of those $$$n$$$ players by their strength that are consistent with the outcomes of the matches you organized.The judging program picks some distinct numbers as the strengths of all players before your program starts organizing matches and uses them to answer the requests.ExampleInput2 3  >  <  >  <  >  >  3  <  <  <  >  >Output? 1 3  ? 4 2  ? 4 5  ? 6 5  ? 3 4  ? 5 6  !  ? 3 4  ? 4 2  ? 5 3  ? 6 4  ? 3 1  !NoteIn the example, the players in the first test case are sorted by strength in decreasing order. From the matches in the example output, we can deduce that players 1, 2, and 3 have the highest strength, but we do not know how the player 1 compares to the player 2.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "c9ced454", "template_md5": "35d339e4", "result": "You are given $2n$ players, each with a unique strength. You need to select $n$ players with the highest strengths to represent a team.\n\nYou can organize matches between players to determine their relative strengths.  In each match, you choose two distinct players. After the match, you learn which player has the higher strength.\n\nYou want to find the $n$ strongest players, but you don't want to know the exact order of their strengths.  \n\n**Rules:**\n\n* You can organize at most $4n^2$ matches.\n* After organizing matches, there must be exactly one way to choose the $n$ strongest players based on the match results.\n* There must be at least two different possible orderings of the $n$ strongest players that are consistent with the match results.\n\n**Input:**\n\n* The number of test cases $t$.\n* For each test case:\n    * The number of players to select, $n$.\n    * Match descriptions in the format \"? i j\" where i and j are distinct players.\n    * The outcome of each match, either \">\" (player i is stronger) or \"<\" (player j is stronger).\n\n**Output:**\n\n* For each test case:\n    * Print \"!\" after organizing matches.\n\n\n\nLet me know if you'd like me to elaborate on any part of the problem."}, {"prompt_md5": "c3657786", "template_md5": "465699a0", "result": "You need to select the $n$ strongest players out of $2n$ players. You can organize matches between players to determine their relative strengths.  You don't know the exact strengths of the players, but you want to be able to choose the $n$ strongest players with only one possible correct answer, but there should be at least two different ways to order those $n$ players based on their strength. You can ask for matches until you have enough information to make the selection."}]}