{"uid": "123-C", "url": "https://codeforces.com/contest/123/problem/C", "tags": ["combinatorics", " dp", " greedy"], "title": "123-C", "statement": "C. Bracketstime limit per test1 secondmemory limit per test256 megabytesinputstdinoutputstdoutA two dimensional array is called abracketarray if each grid contains one of the two possible brackets — \"(\" or \")\". A path through the two dimensional array cells is calledmonotonousif any two consecutive cells in the path are side-adjacent and each cell of the path is located below or to the right from the previous one.A two dimensional array whose size equalsn×mis called acorrect bracketarray, if any string formed by writing out the brackets on some monotonous way from cell(1, 1)to cell(n,m)forms a correct bracket sequence.Let's define the operation of comparing two correct bracket arrays of equal size (aandb) like that. Let's consider a given two dimensional array of priorities (c) — a two dimensional array of same size, containing different integers from1tonm. Let's find such position(i,j)in the two dimensional array, thatai,j≠bi,j. If there are several such positions, let's choose the one where numberci,jis minimum. Ifai,j=\"(\", thena<b, otherwisea>b. If the position(i,j)is not found, then the arrays are considered equal.Your task is to find ak-th two dimensional correct bracket array. It is guaranteed that for the given sizes ofnandmthere will be no less thanktwo dimensional correct bracket arrays.InputThe first line contains integersn,mandk— the sizes of the array and the number of the sought correct bracket array (1 ≤n,m≤ 100,1 ≤k≤ 1018). Then an array of priorities is given,nlines each containingmnumbers, numberpi,jshows the priority of characterjin linei(1 ≤pi,j≤nm, allpi,jare different).Please do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specificator.OutputPrint thek-th two dimensional correct bracket array.ExamplesInput1 2 11 2Output()Input2 3 11 2 34 5 6Output(()())Input3 2 23 61 42 5Output())(()NoteIn the first sample exists only one correct two-dimensional bracket array.In the second and in the third samples two arrays exist.A bracket sequence is called regular if it is possible to obtain correct arithmetic expression by inserting characters «+» and «1» into this sequence. For example, sequences «(())()», «()» and «(()(()))» are regular, while «)(», «(()» and «(()))(» are not.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "8a8c24a5", "template_md5": "35d339e4", "result": "You are given a size $n \\times m$ grid. Each cell in the grid can contain either \"(\" or \")\".  \n\nA path through the grid is called *monotonous* if it moves only down or right, and each cell is adjacent to the previous cell.\n\nA grid is called a *correct bracket array* if any path from the top-left corner to the bottom-right corner forms a valid bracket sequence (e.g., \"((()))\").\n\nYou are given a list of priorities for each cell in the grid.  The priority of a cell is an integer between 1 and $n \\times m$.\n\nYour task is to find the $k$-th correct bracket array, where the arrays are compared based on the following rule:\n\n* Find the first cell where the two arrays have different characters.\n* If the cell contains \"(\", the array with the lower priority value is considered smaller.\n* If the cell contains \")\", the array with the higher priority value is considered smaller.\n\nIf no such cell is found, the arrays are considered equal.\n\nYou are guaranteed that there are at least $k$ correct bracket arrays.\n\n\n\n**Input:**\n\n* The first line contains three integers: $n$, $m$, and $k$.\n* The next $n$ lines each contain $m$ integers, representing the priorities of the cells in the grid.\n\n**Output:**\n\n* Print the $k$-th correct bracket array."}, {"prompt_md5": "c12cdaf6", "template_md5": "465699a0", "result": "You are given a grid of numbers. Each cell in the grid can be either \"(\" or \")\".  You need to find the k-th unique arrangement of \"(\" and \")\" in the grid that forms a valid bracket sequence.  A valid bracket sequence is one where every opening bracket has a corresponding closing bracket in the correct order."}]}