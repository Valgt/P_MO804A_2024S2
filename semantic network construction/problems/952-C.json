{"uid": "952-C", "url": "https://codeforces.com/contest/952/problem/C", "tags": ["implementation"], "title": "952-C", "statement": "C. Ravioli Sorttime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputEverybody knows ofspaghetti sort. You decided to implement an analog sorting algorithm yourself, but as you survey your pantry you realize you're out of spaghetti! The only type of pasta you have is ravioli, but you are not going to let this stop you...You come up with the following algorithm. For each number in the arrayai, build a stack ofairavioli. The image shows the stack forai= 4.Arrange the stacks in one row in the order in which the corresponding numbers appear in the input array. Find the tallest one (if there are several stacks of maximal height, use the leftmost one). Remove it and add its height to the end of the output array. Shift the stacks in the row so that there is no gap between them. Repeat the procedure until all stacks have been removed.At first you are very happy with your algorithm, but as you try it on more inputs you realize that it doesn't always produce the right sorted array. Turns out when two stacks of ravioli are next to each other (at any step of the process) and differ in height by two or more, the top ravioli of the taller stack slides down on top of the lower stack.Given an input array, figure out whether the described algorithm will sort it correctly.InputThe first line of input contains a single numbern(1 ≤n≤ 10) — the size of the array.The second line of input containsnspace-separated integersai(1 ≤ai≤ 100) — the elements of the array.OutputOutput \"YES\" if the array can be sorted using the described procedure and \"NO\" if it can not.ExamplesInput31 2 3OutputYESInput33 1 2OutputNONoteIn the second example the array will change even before the tallest stack is chosen for the first time: ravioli from stack of height 3 will slide on the stack of height 1, and the algorithm will output an array{2, 2, 2}.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "cdbefc8b", "template_md5": "35d339e4", "result": "You are given an array of integers $a_1, a_2, ..., a_n$.  \n\nConsider the following sorting algorithm:\n\n1. For each integer $a_i$, build a stack of height $a_i$.\n2. Arrange the stacks in a row according to the order of the integers in the array.\n3. Find the tallest stack and remove it. Add its height to the end of a new array.\n4. Shift the remaining stacks to the left to fill the gap.\n5. Repeat steps 2-4 until all stacks are removed.\n\nHowever, there is a special rule: if two stacks are next to each other and the height difference between them is 2 or more, the top ravioli of the taller stack slides down onto the shorter stack.\n\nDetermine if this algorithm will always produce a sorted array, given any input array."}, {"prompt_md5": "498b8602", "template_md5": "465699a0", "result": "You are given a list of numbers. Imagine each number as a stack of blocks.  The algorithm works by arranging the stacks in order and then removing the tallest stack.  \n\nThe problem is to determine if this algorithm will always sort the list correctly, or if there are cases where the stacks will shift and change the order of the numbers."}]}