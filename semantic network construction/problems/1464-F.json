{"uid": "1464-F", "url": "https://codeforces.com/contest/1464/problem/F", "tags": ["data structures", " trees"], "title": "1464-F", "statement": "F. My Beautiful Madnesstime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou are given a tree. We will consider simple paths on it. Let's denote path between vertices $$$a$$$ and $$$b$$$ as $$$(a, b)$$$. Let $$$d$$$-neighborhood of a path be a set of vertices of the tree located at a distance $$$\\\\leq d$$$ from at least one vertex of the path (for example, $$$0$$$-neighborhood of a path is a path itself). Let $$$P$$$ be a multiset of the tree paths. Initially, it is empty. You are asked to maintain the following queries:$$$1$$$ $$$u$$$ $$$v$$$ — add path $$$(u, v)$$$ into $$$P$$$ ($$$1 \\\\leq u, v \\\\leq n$$$).$$$2$$$ $$$u$$$ $$$v$$$ — delete path $$$(u, v)$$$ from $$$P$$$ ($$$1 \\\\leq u, v \\\\leq n$$$). Notice that $$$(u, v)$$$ equals to $$$(v, u)$$$. For example, if $$$P = \\\\{(1, 2), (1, 2)\\\\}$$$, than after query $$$2$$$ $$$2$$$ $$$1$$$, $$$P = \\\\{(1, 2)\\\\}$$$.$$$3$$$ $$$d$$$ — if intersection of all $$$d$$$-neighborhoods of paths from $$$P$$$ is not empty output \"Yes\", otherwise output \"No\" ($$$0 \\\\leq d \\\\leq n - 1$$$).InputThe first line contains two integers $$$n$$$ and $$$q$$$ — the number of vertices in the tree and the number of queries, accordingly ($$$1 \\\\leq n \\\\leq 2 \\\\cdot 10^5$$$, $$$2 \\\\leq q \\\\leq 2 \\\\cdot 10^5$$$).Each of the following $$$n - 1$$$ lines contains two integers $$$x_i$$$ and $$$y_i$$$ — indices of vertices connected by $$$i$$$-th edge ($$$1 \\\\le x_i, y_i \\\\le n$$$).The following $$$q$$$ lines contain queries in the format described in the statement.It's guaranteed that:for a query $$$2$$$ $$$u$$$ $$$v$$$, path $$$(u, v)$$$ (or $$$(v, u)$$$) is present in $$$P$$$,for a query $$$3$$$ $$$d$$$, $$$P \\\\neq \\\\varnothing$$$,there is at least one query of the third type.OutputFor each query of the third type output answer on a new line.ExamplesInput1 4 1 1 1 1 1 1 2 1 1 3 0OutputYesInput5 3 1 2 1 3 3 4 4 5 1 1 2 1 5 5 3 1OutputNoInput10 6 1 2 2 3 3 4 4 7 7 10 2 5 5 6 6 8 8 9 1 9 9 1 9 8 1 8 5 3 0 3 1 3 2OutputNo Yes Yes", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "a61cb577", "template_md5": "35d339e4", "result": "You are given a tree with $n$ vertices.  You will be given a set of paths in the tree.  \n\nYou can perform the following operations:\n\n1. **Add a path:** Add a path between two vertices $u$ and $v$ to the set of paths.\n2. **Delete a path:** Remove a path between vertices $u$ and $v$ from the set of paths.\n3. **Check intersection:** Given a distance $d$, determine if the intersection of the $d$-neighborhoods of all the paths in the set is non-empty. The $d$-neighborhood of a path is the set of all vertices in the tree that are at a distance of at most $d$ from at least one vertex on the path.\n\nYou will be given a set of queries consisting of these operations.\n\n**Input:**\n\n* The first line contains two integers $n$ and $q$, the number of vertices and the number of queries, respectively.\n* The next $n-1$ lines describe the edges of the tree, each line containing two integers $x_i$ and $y_i$ representing an edge between vertices $x_i$ and $y_i$.\n* The next $q$ lines describe the queries. Each query is of one of the three types described above.\n\n**Output:**\n\nFor each query of type 3, output \"Yes\" if the intersection of the $d$-neighborhoods is non-empty, and \"No\" otherwise."}, {"prompt_md5": "180f7f86", "template_md5": "465699a0", "result": "You are given a tree with a certain number of nodes. You can add and remove pairs of nodes that form a path in the tree.  You are then asked to determine if there is at least one point in the tree that is within a certain distance of all the remaining paths."}]}