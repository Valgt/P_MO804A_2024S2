{"uid": "111-C", "url": "https://codeforces.com/contest/111/problem/C", "tags": ["bitmasks", " dp", " dsu"], "title": "111-C", "statement": "C. Petya and Spiderstime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutLittle Petya loves training spiders. Petya has a boardn×min size. Each cell of the board initially has a spider sitting on it. After one second Petya chooses a certain action for each spider, and all of them humbly perform its commands. There are 5 possible commands: to stay idle or to move from current cell to some of the four side-neighboring cells (that is, one command for each of the four possible directions). Petya gives the commands so that no spider leaves the field. It is allowed for spiders to pass through each other when they crawl towards each other in opposite directions. All spiders crawl simultaneously and several spiders may end up in one cell. Petya wants to know the maximum possible number of spider-free cells after one second.InputThe first line contains two space-separated integersnandm(1 ≤n,m≤ 40,n·m≤ 40) — the board sizes.OutputIn the first line print the maximum number of cells without spiders.ExamplesInput1 1Output0Input2 3Output4NoteIn the first sample the only possible answer is:sIn the second sample one of the possible solutions is:rdlrulsdenotes command \"stay idle\",l, r, d, udenote commands \"crawl left\", \"crawl right\", \"crawl down\", \"crawl up\", correspondingly.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "5713ccaa", "template_md5": "35d339e4", "result": "You are given a board of size $n \\times m$.  Each cell on the board initially has one spider.  \n\nIn one second, each spider can choose to:\n\n* Stay in its current cell\n* Move to one of its four adjacent cells (up, down, left, right)\n\nSpiders can move through each other.  \n\nWhat is the maximum number of empty cells on the board after one second?"}, {"prompt_md5": "f3fc69f4", "template_md5": "465699a0", "result": "You have a grid of cells. Each cell has an object.  You can choose an action for each object to either stay or move to a neighboring cell.  Find the maximum number of empty cells after everyone moves."}]}