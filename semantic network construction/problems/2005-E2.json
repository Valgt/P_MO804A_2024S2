{"uid": "2005-E2", "url": "https://codeforces.com/contest/2005/problem/E2", "tags": ["data structures", " dp", " games", " greedy", " implementation"], "title": "2005-E2", "statement": "E2. Subtangle Game (Hard Version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the hard version of the problem. The differences between the two versions are the constraints on all the variables. You can make hacks only if both versions of the problem are solved.Tsovak and Narek are playing a game. They have an array $$$a$$$ and a matrix $$$b$$$ of integers with $$$n$$$ rows and $$$m$$$ columns, numbered from $$$1$$$. The cell in the $$$i$$$-th row and the $$$j$$$-th column is $$$(i, j)$$$.They are looking for the elements of $$$a$$$ in turns; Tsovak starts first. Each time a player looks for a cell in the matrix containing the current element of $$$a$$$ (Tsovak looks for the first, then Narek looks for the second, etc.). Let's say a player has chosen the cell $$$(r, c)$$$. The next player has to choose his cell in the submatrix starting at $$$(r + 1, c + 1)$$$ and ending in $$$(n, m)$$$ (the submatrix can be empty if $$$r=n$$$ or $$$c=m$$$). If a player cannot find such a cell (or the remaining submatrix is empty) or the array ends (the previous player has chosen the last element), then he loses.Your task is to determine the winner if the players play optimally.Note: since the input is large, you may need to optimize input/output for this problem.For example, in C++, it is enough to use the following lines at the start of themain()function:int main() {ios_base::sync_with_stdio(false);cin.tie(NULL); cout.tie(NULL);}InputThe first line of the input contains $$$t$$$ ($$$1 \\\\le t \\\\le 1500$$$) – the number of test cases.The first line of each test case contains three integers $$$l$$$, $$$n$$$, and $$$m$$$ ($$$1 \\\\le l, n, m \\\\le 1500$$$) – the size of the array and the sizes of the matrix.The second line contains $$$l$$$ integers $$$a_1, a_2, a_3, \\\\ldots a_l$$$ ($$$1 \\\\le a_i \\\\le n \\\\cdot m$$$) – the elements of the array $$$a$$$.The $$$i$$$-th of the last $$$n$$$ lines contains $$$m$$$ integers $$$b_{i,1}, b_{i,2}, b_{i,3}, \\\\ldots b_{i,m}$$$ ($$$1 \\\\le b_{i,j} \\\\le n \\\\cdot m$$$) – representing the $$$i$$$-th row of the matrix.It is guaranteed that the sum of $$$n \\\\cdot m$$$ over all test cases does not exceed $$$3 \\\\cdot 10^6$$$.It is guaranteed that the sum of $$$l$$$ over all test cases does not exceed $$$1500$$$.OutputYou should output $$$t$$$ lines, the $$$i$$$-th of them containing a character representing the answer of the $$$i$$$-th test case: \"T\" if Tsovak wins or \"N\", otherwise (without quotes).ExampleInput32 2 31 21 3 64 6 22 2 41 21 1 3 24 2 5 12 4 21 23 45 67 88 8OutputN T NNoteIn the first example, Tsovak starts by looking for $$$1$$$. There is only one occurrence of $$$1$$$ at $$$(1,1)$$$, so he chooses it. Then Narek needs to look for $$$2$$$ in the submatrix of $$$(2, 2)$$$, which consists of just the last two elements: $$$6$$$ and $$$2$$$. He chooses $$$2$$$, and then Tsovak loses since the array has ended.In the second example, Tsovak needs to choose $$$1$$$. There is a $$$1$$$ at the cell $$$(n,m)$$$, so he chooses that cell. Then, since the submatrix of $$$(n + 1, m + 1)$$$ is empty, Narek cannot find $$$2$$$, so he loses.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "d1e62691", "template_md5": "35d339e4", "result": "Two players take turns searching for elements in a 1-dimensional array and a 2-dimensional matrix. \n\n* The array has $l$ elements, and the matrix has $n$ rows and $m$ columns.\n* The players start with the first element of the array.\n* On each turn, a player searches for the current array element in the matrix. \n* The player must choose a cell in the matrix that contains the current array element.\n* After a player finds a cell, the next player searches for the next array element in the submatrix starting at the cell below and to the right of the chosen cell.\n* If a player cannot find a cell containing the current array element, or if the submatrix is empty, they lose.\n\nDetermine the winner if both players play optimally.\n\n\nInput:\n\n* The first line contains $t$ (the number of test cases).\n* For each test case:\n    * The first line contains three integers: $l$, $n$, and $m$ (the sizes of the array and matrix).\n    * The second line contains $l$ integers: the elements of the array.\n    * The next $n$ lines each contain $m$ integers: the elements of the matrix.\n\nOutput:\n\n* For each test case, output \"T\" if the first player wins, and \"N\" if the second player wins."}, {"prompt_md5": "18d288d4", "template_md5": "465699a0", "result": "Two players take turns searching for numbers in a grid. The first player starts by looking for a specific number in the grid.  The next player then searches for a different number in a smaller subgrid.  The game continues until a player cannot find the required number in the remaining subgrid. The winner is the player who goes last. Determine which player will win if both players play optimally."}]}