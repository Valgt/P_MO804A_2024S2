{"uid": "1366-G", "url": "https://codeforces.com/contest/1366/problem/G", "tags": ["data structures", " dp", " strings"], "title": "1366-G", "statement": "G. Construct the Stringtime limit per test4 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputLet's denote the function $$$f(s)$$$ that takes a string $$$s$$$ consisting of lowercase Latin letters and dots, and returns a string consisting of lowercase Latin letters as follows:let $$$r$$$ be an empty string;process the characters of $$$s$$$ from left to right. For each character $$$c$$$, do the following: if $$$c$$$ is a lowercase Latin letter, append $$$c$$$ at the end of the string $$$r$$$; otherwise, delete the last character from $$$r$$$ (if $$$r$$$ is empty before deleting the last character — the function crashes);return $$$r$$$ as the result of the function.You are given two strings $$$s$$$ and $$$t$$$. You have to delete the minimum possible number of characters from $$$s$$$ so that $$$f(s) = t$$$ (and the function does not crash). Note that you aren't allowed to insert new characters into $$$s$$$ or reorder the existing ones.InputThe input consists of two lines: the first one contains $$$s$$$ — a string consisting of lowercase Latin letters and dots, the second one contains $$$t$$$ — a string consisting of lowercase Latin letters ($$$1 \\\\le |t| \\\\le |s| \\\\le 10000$$$).Additional constraint on the input: it is possible to remove some number of characters from $$$s$$$ so that $$$f(s) = t$$$.OutputPrint one integer — the minimum possible number of characters you have to delete from $$$s$$$ so $$$f(s)$$$ does not crash and returns $$$t$$$ as the result of the function.ExamplesInputa.ba.b. abbOutput2Input.bbac..a.c.cd bacdOutput3Inputc..code..c...o.d.de codeOutput3", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "e780975b", "template_md5": "35d339e4", "result": "You are given two strings,  *s* and *t*.  \n\n*s* contains lowercase letters and dots. \n\nHere's a function *f* that operates on a string:\n\n1. Start with an empty string *r*.\n2. Go through each character *c* in *s* from left to right.\n   * If *c* is a lowercase letter, add it to the end of *r*.\n   * If *c* is a dot, remove the last character from *r* (if *r* is empty, the function stops).\n3. Return the string *r*.\n\nYour task is to find the fewest characters you need to delete from *s* so that  *f(s)* equals *t*. You cannot insert new characters or change the order of existing characters in *s*.\n\nOutput the minimum number of deletions."}, {"prompt_md5": "9dfc849b", "template_md5": "465699a0", "result": "You have two strings.  You can delete characters from the first string.  The second string is the result of a process:\n\n1. Start with an empty string.\n2. Go through each character in the first string.\n3. If the character is a letter, add it to the end of the empty string.\n4. If the character is a period, remove the last letter from the empty string (if there are no letters, do nothing).\n\nWhat is the fewest characters you need to delete from the first string so that the result of this process is the second string?"}]}