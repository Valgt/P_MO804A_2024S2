{"uid": "1993-F1", "url": "https://codeforces.com/contest/1993/problem/F1", "tags": ["brute force", " chinese remainder theorem", " constructive algorithms", " math", " number theory"], "title": "1993-F1", "statement": "F1. Dyn-scripted Robot (Easy Version)time limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the easy version of the problem. The only difference is that in this version $$$k \\\\le n$$$. You can make hacks only if both versions of the problem are solved.Given a $$$w \\\\times h$$$ rectangle on the $$$Oxy$$$ plane, with points $$$(0, 0)$$$ at the bottom-left and $$$(w, h)$$$ at the top-right of the rectangle.You also have a robot initially at point $$$(0, 0)$$$ and a script $$$s$$$ of $$$n$$$ characters. Each character is eitherL,R,U, orD, which tells the robot to move left, right, up, or down respectively.The robot can only move inside the rectangle; otherwise, it will change the script $$$s$$$ as follows:If it tries to move outside a vertical border, it changes allLcharacters toR's (and vice versa, allR's toL's).If it tries to move outside a horizontal border, it changes allUcharacters toD's (and vice versa, allD's toU's).Then, it will execute the changed script starting from the character which it couldn't execute.An example of the robot's movement process, $$$s = \\\\texttt{\"ULULURD\"}$$$The script $$$s$$$ will be executed for $$$k$$$ times continuously. All changes to the string $$$s$$$ will be retained even when it is repeated. During this process, how many times will the robot move to the point $$$(0, 0)$$$ in total?Note that the initial position does NOT count.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of test cases.The first line of each test case contains four integers $$$n$$$, $$$k$$$, $$$w$$$, and $$$h$$$ ($$$1 \\\\le n, w, h \\\\le 10^6$$$; $$$1 \\\\le k \\\\le n$$$).The second line contains a single string $$$s$$$ of size $$$n$$$ ($$$s_i \\\\in \\\\{\\\\texttt{L}, \\\\texttt{R}, \\\\texttt{U}, \\\\texttt{D}\\\\}$$$) — the script to be executed.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^6$$$.OutputFor each test case, print a single integer — the number of times the robot reaches $$$(0, 0)$$$ when executing script $$$s$$$ for $$$k$$$ times continuously.ExampleInput52 2 2 2UR4 2 1 1LLDD6 3 3 1RLRRRL5 5 3 3RUURD7 5 3 4RRDLUUUOutput0 4 3 0 1NoteIn the first test case, the robot only moves up and right. In the end, it occupies the position $$$(2, 2)$$$ but never visits $$$(0, 0)$$$. So the answer is $$$0$$$.In the second test case, each time executing the script the robot visits the origin twice. And since $$$k=2$$$, it visits the origin $$$2 \\\\cdot 2 = 4$$$ times overall.In the third test case, the visualization is shown as below:", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "110a5d97", "template_md5": "35d339e4", "result": "You are given a rectangle with dimensions $w \\times h$. A robot starts at the bottom-left corner $(0,0)$ of the rectangle. It follows a script consisting of 'L', 'R', 'U', and 'D' characters, where 'L' means move left, 'R' means move right, 'U' means move up, and 'D' means move down.\n\nIf the robot tries to move outside the rectangle's boundaries, the script is modified:\n\n* Moving outside a vertical border (left or right) flips all 'L's to 'R's and vice versa.\n* Moving outside a horizontal border (top or bottom) flips all 'U's to 'D's and vice versa.\n\nThe modified script is then executed starting from the point where the robot couldn't move.\n\nThe script is executed for $k$ times continuously.  Each time the script is executed, the modifications to the script are retained.\n\nCount how many times the robot returns to the starting position $(0,0)$ during these $k$ executions. \n\n\n\nLet me know if you'd like me to elaborate on any part of the problem!"}, {"prompt_md5": "8cd9d7cc", "template_md5": "465699a0", "result": "A robot moves on a grid based on a sequence of instructions (L, R, U, D). If the robot tries to move off the grid, the instructions are flipped (L becomes R, R becomes L, U becomes D, D becomes U). The instructions are repeated a certain number of times.  Count how many times the robot returns to the starting position."}]}