{"uid": "1735-A", "url": "https://codeforces.com/contest/1735/problem/A", "tags": ["constructive algorithms", " greedy", " math"], "title": "1735-A", "statement": "A. Working Weektime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYour working week consists of $$$n$$$ days numbered from $$$1$$$ to $$$n$$$, after day $$$n$$$ goes day $$$1$$$ again. And $$$3$$$ of them are days off. One of the days off is the last day, day $$$n$$$. You have to decide when the other two are.Choosing days off, you pursue two goals:No two days should go one after the other. Note that you can't make day $$$1$$$ a day off because it follows day $$$n$$$.Working segments framed by days off should be as dissimilar as possible in duration. More specifically, if the segments are of size $$$l_1$$$, $$$l_2$$$, and $$$l_3$$$ days long, you want to maximize $$$\\\\min(|l_1 - l_2|, |l_2 - l_3|, |l_3 - l_1|)$$$.Output the maximum value of $$$\\\\min(|l_1 - l_2|, |l_2 - l_3|, |l_3 - l_1|)$$$ that can be obtained.InputThe first line of the input contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 1000$$$) — the number of test cases. The description of test cases follows.The only line of each test case contains the integer $$$n$$$ ($$$6 \\\\le n \\\\le 10^9$$$).OutputFor each test case, output one integer — the maximum possible obtained value.ExampleInput36101033Output0 1 342NoteIn the image below you can see the example solutions for the first two test cases. Chosen days off are shown in purple. Working segments are underlined in green.In test case $$$1$$$, the only options for days off are days $$$2$$$, $$$3$$$, and $$$4$$$ (because $$$1$$$ and $$$5$$$ are next to day $$$n$$$). So the only way to place them without selecting neighboring days is to choose days $$$2$$$ and $$$4$$$. Thus, $$$l_1 = l_2 = l_3 = 1$$$, and the answer $$$\\\\min(|l_1 - l_2|, |l_2 - l_3|, |l_3 - l_1|) = 0$$$.For test case $$$2$$$, one possible way to choose days off is shown. The working segments have the lengths of $$$2$$$, $$$1$$$, and $$$4$$$ days. So the minimum difference is $$$1 = \\\\min(1, 3, 2) = \\\\min(|2 - 1|, |1 - 4|, |4 - 2|)$$$. It can be shown that there is no way to make it larger.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "d12b919a", "template_md5": "35d339e4", "result": "You have a week with $n$ days.  You need to choose 3 days off, with the last day being a day off.  No two days off can be next to each other.  You want to maximize the minimum difference in length between the three working segments created by the days off.\n\nThe length of a working segment is the number of days between two consecutive days off.\n\nFor example, if the days off are days 2, 4, and $n$, the working segments would be:\n\n* Day 1 to Day 2 (length 1)\n* Day 4 to Day $n$ (length $n-4$) \n\nInput:\n\n* The first line contains $t$ (the number of test cases).\n* Each test case has one line with $n$ (the number of days in the week).\n\nOutput:\n\n* For each test case, output the maximum minimum difference in length between the three working segments."}, {"prompt_md5": "20fb5bd1", "template_md5": "465699a0", "result": "You have a week with  'n' days. You need to choose 3 days off, with the last day always being a day off.  No two days off can be next to each other.  You want to make the lengths of the working segments between the days off as different as possible. What is the smallest difference you can make between the lengths of these segments?"}]}