{"uid": "681-C", "url": "https://codeforces.com/contest/681/problem/C", "tags": ["constructive algorithms", " data structures", " greedy"], "title": "681-C", "statement": "C. Heap Operationstime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputPetya has recently learned data structure named \"Binary heap\".The heap he is now operating with allows the following operations:put the given number into the heap;get the value of the minimum element in the heap;extract the minimum element from the heap;Thus, at any moment of time the heap contains several integers (possibly none), some of them might be equal.In order to better learn this data structure Petya took an empty heap and applied some operations above to it. Also, he carefully wrote down all the operations and their results to his event log, following the format:insertx— put the element with valuexin the heap;getMinx— the value of the minimum element contained in the heap was equal tox;removeMin— the minimum element was extracted from the heap (only one instance, if there were many).All the operations were correct, i.e. there was at least one element in the heap each timegetMinorremoveMinoperations were applied.While Petya was away for a lunch, his little brother Vova came to the room, took away some of the pages from Petya's log and used them to make paper boats.Now Vova is worried, if he made Petya's sequence of operations inconsistent. For example, if one apply operations one-by-one in the order they are written in the event log, results ofgetMinoperations might differ from the results recorded by Petya, and some ofgetMinorremoveMinoperations may be incorrect, as the heap is empty at the moment they are applied.Now Vova wants to add some new operation records to the event log in order to make the resulting sequence of operations correct. That is, the result of eachgetMinoperation is equal to the result in the record, and the heap is non-empty whengetMinadremoveMinare applied. Vova wants to complete this as fast as possible, as the Petya may get back at any moment. He asks you to add the least possible number of operation records to the current log. Note that arbitrary number of operations may be added at the beginning, between any two other operations, or at the end of the log.InputThe first line of the input contains the only integern(1 ≤n≤ 100 000) — the number of the records left in Petya's journal.Each of the followingnlines describe the records in the current log in the order they are applied. Format described in the statement is used. All numbers in the input are integers not exceeding109by their absolute value.OutputThe first line of the output should contain a single integerm— the minimum possible number of records in the modified sequence of operations.Nextmlines should contain the corrected sequence of records following the format of the input (described in the statement), one per line and in the order they are applied. All the numbers in the output should be integers not exceeding109by their absolute value.Note that the input sequence of operations must be thesubsequenceof the output sequence.It's guaranteed that there exists the correct answer consisting of no more than1 000 000operations.ExamplesInput2insert 3getMin 4Output4insert 3removeMininsert 4getMin 4Input4insert 1insert 1removeMingetMin 2Output6insert 1insert 1removeMinremoveMininsert 2getMin 2NoteIn the first sample, after number3is inserted into the heap, the minimum number is3. To make the result of the firstgetMinequal to4one should firstly remove number3from the heap and then add number4into the heap.In the second sample case number1is inserted two times, so should be similarly removed twice.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "bcf76b9e", "template_md5": "35d339e4", "result": "You are given a sequence of operations performed on a binary heap. The operations are:\n\n* **insert x:** Insert the integer $x$ into the heap.\n* **getMin:** Return the minimum value in the heap.\n* **removeMin:** Remove the minimum value from the heap.\n\nSome pages from the log of these operations are missing.  Your task is to determine the minimum number of additional operations needed to be added to the log to ensure that:\n\n1. The result of each `getMin` operation matches the value recorded in the log.\n2. The heap is never empty when a `removeMin` operation is applied.\n\nYou can add operations at the beginning, middle, or end of the log. \n\n**Input:**\n\n* The first line contains an integer $n$ (1 ≤ $n$ ≤ 100,000), the number of remaining operations in the log.\n* The next $n$ lines each describe a single operation in the format: `insert x`, `getMin`, or `removeMin`.\n\n**Output:**\n\n* The first line contains an integer $m$, the minimum number of additional operations needed.\n* The next $m$ lines describe the additional operations, following the same format as the input."}, {"prompt_md5": "e86915d1", "template_md5": "465699a0", "result": "You are given a list of operations performed on a data structure. The operations are: insert a number, get the smallest number, and remove the smallest number.  The list may have errors, meaning the smallest number might be requested when the data structure is empty, or a number might be removed when there are none.  \n\nYour task is to add the fewest possible valid operations to the beginning, middle, or end of the list to make it correct.  A correct list means that each \"get smallest\" operation returns the correct value, and the data structure is never empty when a \"remove smallest\" operation is performed."}]}