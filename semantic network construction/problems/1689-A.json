{"uid": "1689-A", "url": "https://codeforces.com/contest/1689/problem/A", "tags": ["brute force", " greedy", " implementation", " sortings", " two pointers"], "title": "1689-A", "statement": "A. Lex Stringtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputKuznecov likes art, poetry, and music. And strings consisting of lowercase English letters.Recently, Kuznecov has found two strings, $$$a$$$ and $$$b$$$, of lengths $$$n$$$ and $$$m$$$ respectively. They consist of lowercase English letters andno character is contained in both strings.Let another string $$$c$$$ be initially empty. Kuznecov can do the following two types of operations:Choose any character from the string $$$a$$$, remove it from $$$a$$$, and add it to the end of $$$c$$$.Choose any character from the string $$$b$$$, remove it from $$$b$$$, and add it to the end of $$$c$$$.But, he can not do more than $$$k$$$ operations of the same type in a row. He must perform operations until either $$$a$$$ or $$$b$$$ becomes empty. What is the lexicographically smallest possible value of $$$c$$$ after he finishes?A string $$$x$$$ is lexicographically smaller than a string $$$y$$$ if and only if one of the following holds:$$$x$$$ is a prefix of $$$y$$$, but $$$x \\\\neq y$$$;in the first position where $$$x$$$ and $$$y$$$ differ, the string $$$x$$$ has a letter that appears earlier in the alphabet than the corresponding letter in $$$y$$$.InputThere are several test cases in the input data. The first line contains a single integer $$$t$$$ ($$$1 \\\\leq t \\\\leq 100$$$) — the number of test cases. This is followed by the test cases description.The first line of each test case contains three integers $$$n$$$, $$$m$$$, and $$$k$$$ ($$$1\\\\leq n,m,k \\\\leq 100$$$) — parameters from the statement.The second line of each test case contains the string $$$a$$$ of length $$$n$$$.The third line of each test case contains the string $$$b$$$ of length $$$m$$$.The strings contain only lowercase English letters. It is guaranteed that no symbol appears in $$$a$$$ and $$$b$$$ simultaneously.OutputIn each test case, output a single string $$$c$$$ — the answer to the problem.ExampleInput36 4 2aaaaaabbbb5 9 3caacabedededeb7 7 1noskillwxhtzdyOutputaabaabaa aaabbcc dihktlwlxnyozNoteIn the first test case, it is optimal to take two 'a's from the string $$$a$$$ and add them to the string $$$c$$$. Then it is forbidden to take more characters from $$$a$$$, hence one character 'b' from the string $$$b$$$ has to be taken. Following that logic, we end up with $$$c$$$ being 'aabaabaa' when string $$$a$$$ is emptied.In the second test case it is optimal to take as many 'a's from string $$$a$$$ as possible, then take as many 'b's as possible from string $$$b$$$. In the end, we take two 'c's from the string $$$a$$$ emptying it.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "102f92ef", "template_md5": "35d339e4", "result": "You are given two strings,  $a$ of length $n$ and $b$ of length $m$, consisting of lowercase English letters. No letter appears in both strings.\n\nYou can perform the following operations:\n\n1. Choose a letter from string $a$, remove it from $a$, and add it to the end of string $c$.\n2. Choose a letter from string $b$, remove it from $b$, and add it to the end of string $c$.\n\nYou cannot perform more than $k$ operations of the same type in a row. You must continue performing operations until either string $a$ or string $b$ becomes empty.\n\nWhat is the lexicographically smallest possible value of string $c$ after you finish?\n\nTwo strings $x$ and $y$ are lexicographically ordered if:\n\n* $x$ is a prefix of $y$ but $x \\neq y$\n* The first position where $x$ and $y$ differ, the letter in $x$ comes earlier in the alphabet than the corresponding letter in $y$."}, {"prompt_md5": "76b92901", "template_md5": "465699a0", "result": "You have two strings of letters. You can take one letter at a time from either string and add it to a new string. You can't take more than a certain number of letters in a row from the same string.  The goal is to build the lexicographically smallest possible new string by the time one of the original strings is empty."}]}