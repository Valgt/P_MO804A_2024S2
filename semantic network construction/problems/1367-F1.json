{"uid": "1367-F1", "url": "https://codeforces.com/contest/1367/problem/F1", "tags": ["dp", " greedy", " two pointers"], "title": "1367-F1", "statement": "F1. Flying Sort (Easy Version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an easy version of the problem. In this version, all numbers in the given array are distinct and the constraints on $$$n$$$ are less than in the hard version of the problem.You are given an array $$$a$$$ of $$$n$$$ integers(there are no equals elements in the array). You can perform the following operations on array elements:choose any index $$$i$$$ ($$$1 \\\\le i \\\\le n$$$) and move the element $$$a[i]$$$ to thebeginof the array;choose any index $$$i$$$ ($$$1 \\\\le i \\\\le n$$$) and move the element $$$a[i]$$$ to theendof the array.For example, if $$$n = 5$$$, $$$a = [4, 7, 2, 3, 9]$$$, then the following sequence of operations can be performed:after performing the operation of the first type to the second element, the array $$$a$$$ will become $$$[7, 4, 2, 3, 9]$$$;after performing the operation of the second type to the second element, the array $$$a$$$ will become $$$[7, 2, 3, 9, 4]$$$.You can perform operations of any type any number of times in any order.Find the minimum total number of operations of the first and second type that will make the $$$a$$$ array sorted in non-decreasing order. In other words, what is the minimum number of operations that must be performed so the array satisfies the inequalities $$$a[1] \\\\le a[2] \\\\le \\\\ldots \\\\le a[n]$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 100$$$) — the number of test cases in the test. Then $$$t$$$ test cases follow.Each test case starts with a line containing an integer $$$n$$$ ($$$1 \\\\le n \\\\le 3000$$$) — length of the array $$$a$$$.Then follow $$$n$$$ integers $$$a_1, a_2, \\\\ldots, a_n$$$ ($$$0 \\\\le a_i \\\\le 10^9$$$) — an array that needs to be sorted by the given operations.All numbers in the given array are distinct.The sum of $$$n$$$ for all test cases in one test does not exceed $$$3000$$$.OutputFor each test case output one integer — the minimum total number of operations of the first and second type, which will make the array sorted in non-decreasing order.ExampleInput4 5 4 7 2 3 9 5 3 5 8 1 7 5 1 4 5 7 12 4 0 2 1 3Output2 2 0 2NoteIn the first test case, you first need to move3, and then2to the beginning of the array. Therefore, the desired sequence of operations: $$$[4, 7, 2, 3, 9] \\\\rightarrow [3, 4, 7, 2, 9] \\\\rightarrow [2, 3, 4, 7, 9]$$$.In the second test case, you need to move the1to the beginning of the array, and the8— to the end. Therefore, the desired sequence of operations: $$$[3, 5, 8, 1, 7] \\\\rightarrow [1, 3, 5, 8, 7] \\\\rightarrow [1, 3, 5, 7, 8]$$$.In the third test case, the array is already sorted.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "e5fddb04", "template_md5": "465699a0", "result": "You are given a list of distinct numbers. You can move any number to the beginning or end of the list any number of times. What is the fewest moves needed to sort the list in increasing order?"}, {"prompt_md5": "63335644", "template_md5": "35d339e4", "result": "You are given an array of distinct integers. You can perform two types of operations on the array:\n\n1. Move any element to the beginning of the array.\n2. Move any element to the end of the array.\n\nFind the minimum number of operations of either type needed to sort the array in non-decreasing order. \n\n**Input:**\n\n* The first line contains the number of test cases, $t$.\n* Each test case starts with an integer $n$, the length of the array.\n* The next line contains $n$ integers, the elements of the array.\n\n**Output:**\n\n* For each test case, output the minimum number of operations needed to sort the array."}]}