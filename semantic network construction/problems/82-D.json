{"uid": "82-D", "url": "https://codeforces.com/contest/82/problem/D", "tags": ["dp"], "title": "82-D", "statement": "D. Two out of Threetime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutVasya has recently developed a new algorithm to optimize the reception of customer flow and he considered the following problem.Let the queue to the cashier containnpeople, at that each of them is characterized by a positive integerai— that is the time needed to work with this customer. What is special about this very cashier is that it can serve two customers simultaneously. However, if two customers needaiandajof time to be served, the time needed to work with both of them customers is equal tomax(ai,aj). Please note that working with customers is an uninterruptable process, and therefore, if two people simultaneously come to the cashier, it means that they begin to be served simultaneously, and will both finish simultaneously (it is possible that one of them will have to wait).Vasya used in his algorithm an ingenious heuristic — as long as the queue has more than one person waiting, thensome two people of the first three standing in front of the queue are sent simultaneously. If the queue has only one customer numberi, then he goes to the cashier, and is served withinaiof time. Note that the total number of phases of serving a customer will always be equal to⌈n/ 2⌉.Vasya thinks that this method will help to cope with the queues we all hate. That's why he asked you to work out a program that will determine the minimum time during which the whole queue will be served using this algorithm.InputThe first line of the input file contains a single numbern(1 ≤n≤ 1000), which is the number of people in the sequence. The second line contains space-separated integersa1,a2, ...,an(1 ≤ai≤ 106). The people are numbered starting from the cashier to the end of the queue.OutputPrint on the first line a single number — the minimum time needed to process allnpeople. Then on⌈n/ 2⌉lines print the order in which customers will be served. Each line (probably, except for the last one) must contain two numbers separated by a space — the numbers of customers who will be served at the current stage of processing. Ifnis odd, then the last line must contain a single number — the number of the last served customer in the queue. The customers are numbered starting from1.ExamplesInput41 2 3 4Output61 23 4Input52 4 3 1 4Output81 32 54", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "bdc5336d", "template_md5": "35d339e4", "result": "There is a cashier who can serve two customers simultaneously.  Each customer takes a certain amount of time to be served, represented by a positive integer $a_i$. If two customers are served simultaneously, the time it takes is the maximum of their individual service times.\n\nGiven a queue of $n$ customers, where $a_i$ is the service time for the $i$-th customer, find the minimum time required to serve all customers using the following algorithm:\n\n1. As long as there are more than one customer in the queue, serve the first three customers simultaneously.\n2. If there is only one customer left, serve them individually.\n\nOutput the minimum time and the order in which the customers are served."}, {"prompt_md5": "3e1dce77", "template_md5": "465699a0", "result": "You are given a line of people, each taking a certain amount of time to be served. A cashier can serve two people at once, but the time taken is the maximum of the two individual times.  \n\nThe cashier serves two people from the front of the line simultaneously as long as there are at least two people. If there's only one person, they are served individually.\n\nFind the minimum time to serve everyone and output the order in which people are served."}]}