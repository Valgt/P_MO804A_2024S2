{"uid": "1559-B", "url": "https://codeforces.com/contest/1559/problem/B", "tags": ["dp", " greedy"], "title": "1559-B", "statement": "B. Mocha and Red and Bluetime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputAs their story unravels, a timeless tale is told once again...Shirahime, a friend of Mocha's, is keen on playing the music game Arcaea and sharing Mocha interesting puzzles to solve. This day, Shirahime comes up with a new simple puzzle and wants Mocha to solve them. However, these puzzles are too easy for Mocha to solve, so she wants you to solve them and tell her the answers. The puzzles are described as follow.There are $$$n$$$ squares arranged in a row, and each of them can be painted either red or blue.Among these squares, some of them have been painted already, and the others are blank. You can decide which color to paint on each blank square.Some pairs of adjacent squares may have the same color, which is imperfect. We define theimperfectnessas the number of pairs of adjacent squares that share the same color.For example, the imperfectness of \"BRRRBBR\" is $$$3$$$, with \"BB\" occurred once and \"RR\" occurred twice.Your goal is to minimize the imperfectness and print out the colors of the squares after painting.InputEach test contains multiple test cases.The first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 100$$$) — the number of test cases. Each test case consists of two lines.The first line of each test case contains an integer $$$n$$$ ($$$1\\\\leq n\\\\leq 100$$$) — the length of the squares row.The second line of each test case contains a string $$$s$$$ with length $$$n$$$, containing characters 'B', 'R' and '?'. Here 'B' stands for a blue square, 'R' for a red square, and '?' for a blank square.OutputFor each test case, print a line with a string only containing 'B' and 'R', the colors of the squares after painting, which imperfectness is minimized. If there are multiple solutions, print any of them.ExampleInput5 7 ?R???BR 7 ???R??? 1 ? 1 B 10 ?R??RB??B?OutputBRRBRBR BRBRBRB B B BRRBRBBRBRNoteIn the first test case, if the squares are painted \"BRRBRBR\", the imperfectness is $$$1$$$ (since squares $$$2$$$ and $$$3$$$ have the same color), which is the minimum possible imperfectness.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "e15f10a3", "template_md5": "35d339e4", "result": "You are given a row of $n$ squares. Some squares are already colored red ('R') or blue ('B'), and some are empty ('?'). You need to color the empty squares either red or blue to minimize the number of adjacent squares that have the same color.  \n\nOutput the final arrangement of colors ('R' and 'B') for the squares after coloring. If there are multiple solutions, output any one. \n\n**Input:**\n\n* The first line contains an integer $t$ ($1 \\le t \\le 100$) representing the number of test cases.\n* For each test case:\n    * The first line contains an integer $n$ ($1 \\le n \\le 100$) representing the number of squares.\n    * The second line contains a string of length $n$ consisting of 'B', 'R', and '?' representing the initial colors of the squares.\n\n**Output:**\n\n* For each test case, output a string of length $n$ containing 'B' and 'R' representing the final colors of the squares after coloring."}, {"prompt_md5": "802b5741", "template_md5": "465699a0", "result": "You are given a row of squares, some of which are already colored red or blue, and some are empty. You need to color the empty squares either red or blue to minimize the number of pairs of adjacent squares that have the same color. Output the resulting coloring."}]}