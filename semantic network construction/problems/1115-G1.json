{"uid": "1115-G1", "url": "https://codeforces.com/contest/1115/problem/G1", "tags": ["*special"], "title": "1115-G1", "statement": "G1. AND oracletime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputImplement a quantum oracle on $$$N$$$ qubits which implements the following function: $$$$$$f(\\\\vec{x}) = x_0 \\\\wedge x_1 \\\\wedge \\\\dotsb \\\\wedge x_{N-1}$$$$$$You have to implement an operation which takes the following inputs:an array of $$$N$$$ ($$$1 \\\\le N \\\\le 8$$$) qubits $$$x$$$ in an arbitrary state (input register),a qubit $$$y$$$ in an arbitrary state (output qubit),and performs a transformation $$$|x\\\\rangle|y\\\\rangle \\\\rightarrow |x\\\\rangle|y \\\\oplus f(x)\\\\rangle$$$. The operation doesn't have an output; its \"output\" is the state in which it leaves the qubits.Your code should have the following signature:namespace Solution {open Microsoft.Quantum.Primitive;open Microsoft.Quantum.Canon;operation Solve (x : Qubit[], y : Qubit) : Unit {body (...) {// your code here}adjoint auto;}}", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "8b8725cf", "template_md5": "35d339e4", "result": "You are given a set of $N$ qubits ($1 \\le N \\le 8$) and a single additional qubit.  You need to write a quantum operation that takes these qubits as input and performs the following:\n\n1.  **Input:**  \n    *   $N$ qubits in an arbitrary state, represented as $x_0, x_1, ..., x_{N-1}$\n    *   One additional qubit in an arbitrary state, represented as $y$\n\n2.  **Output:**  \n    *   The same $N$ qubits, still in an arbitrary state.\n    *   The additional qubit will be flipped (changed from 0 to 1 or 1 to 0) based on the following rule:\n\n        *   If all the qubits $x_0, x_1, ..., x_{N-1}$ are 1, the additional qubit $y$ is flipped.\n        *   Otherwise, the additional qubit $y$ remains unchanged.\n\nThe operation should be written in a specific programming language (Microsoft Quantum) and have the following structure:\n\n```\nnamespace Solution {\n  open Microsoft.Quantum.Primitive;\n  open Microsoft.Quantum.Canon;\n  operation Solve (x : Qubit[], y : Qubit) : Unit {\n    // Your code here\n  }\n  adjoint auto;\n}\n```\n\n\n\nLet me know if you have any other questions."}, {"prompt_md5": "60bee0e0", "template_md5": "465699a0", "result": "You need to write a program that takes a set of qubits and a single qubit as input. The program should modify the single qubit based on the combined state of the set of qubits."}]}