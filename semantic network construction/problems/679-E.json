{"uid": "679-E", "url": "https://codeforces.com/contest/679/problem/E", "tags": ["data structures"], "title": "679-E", "statement": "E. Bear and Bad Powers of 42time limit per test5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputLimak, a bear, isn't good at handling queries. So, he asks you to do it.We say that powers of42(numbers1, 42, 1764, ...) arebad. Other numbers aregood.You are given a sequence ofngood integerst1,t2, ...,tn. Your task is to handleqqueries of three types:1 i— printtiin a separate line.2 a b x— forsettitox. It's guaranteed thatxis a good number.3 a b x— forincreasetibyx. After this repeat the process while at least onetiis bad.You can note that after each query alltiare good.InputThe first line of the input contains two integersnandq(1 ≤n,q≤ 100 000) — the size of Limak's sequence and the number of queries, respectively.The second line of the input containsnintegerst1,t2, ...,tn(2 ≤ti≤ 109) — initial elements of Limak's sequence. Alltiare good.Then,qlines follow. Thei-th of them describes thei-th query. The first number in the line is an integertypei(1 ≤typei≤ 3) — the type of the query. There is at least one query of the first type, so the output won't be empty.In queries of the second and the third type there is1 ≤a≤b≤n.In queries of the second type an integerx(2 ≤x≤ 109) is guaranteed to be good.In queries of the third type an integerx(1 ≤x≤ 109) may be bad.OutputFor each query of the first type, print the answer in a separate line.ExampleInput6 1240 1700 7 1672 4 17223 2 4 421 21 33 2 6 501 21 41 62 3 4 413 1 5 11 11 31 5Output1742491842181418224344107NoteAfter a query3 2 4 42the sequence is40, 1742, 49, 1714, 4, 1722.After a query3 2 6 50the sequence is40, 1842, 149, 1814, 104, 1822.After a query2 3 4 41the sequence is40, 1842, 41, 41, 104, 1822.After a query3 1 5 1the sequence is43, 1845, 44, 44, 107, 1822.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "253a564c", "template_md5": "35d339e4", "result": "You are given a sequence of $n$ good integers $t_1, t_2, ..., t_n$.  You need to process $q$ queries of three types:\n\n1. **Print $t_i$**: Output the value of the $i$-th element in the sequence.\n2. **Set $t_a$ to $x$**: Replace the $a$-th element in the sequence with the good integer $x$.\n3. **Increase $t_a$ by $x$**: Add the integer $x$ to the $a$-th element in the sequence.  Repeat this process as many times as necessary until at least one element in the sequence becomes a bad power of 42.\n\n**Note:**\n\n* A power of 42 is a number that can be obtained by multiplying 42 by itself one or more times (e.g., 42, 1764, 734000, etc.).\n* All initial elements in the sequence are good.\n* In queries of type 2, $x$ is guaranteed to be a good number.\n* In queries of type 3, $x$ may be a bad number."}, {"prompt_md5": "03e5dad4", "template_md5": "465699a0", "result": "You are given a list of numbers.  You need to process queries of three types:\n\n1. Print the number at a specific position in the list.\n2. Replace a range of numbers in the list with a specific good number.\n3. Increase each number in a range by a specific number.  Repeat this process until no number in the list is bad. \n\nA number is considered bad if it is a power of 42."}]}