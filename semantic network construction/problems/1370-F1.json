{"uid": "1370-F1", "url": "https://codeforces.com/contest/1370/problem/F1", "tags": ["binary search", " dfs and similar", " graphs", " interactive", " shortest paths", " trees"], "title": "1370-F1", "statement": "F1. The Hidden Pair (Easy Version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputNote that the only difference between the easy and hard version is the constraint on the number of queries. You can make hacks only if all versions of the problem are solved.This is an interactive problem.You are given a tree consisting of $$$n$$$ nodes numbered with integers from $$$1$$$ to $$$n$$$. Ayush and Ashish chose two secret distinct nodes in the tree. You need to find out both the nodes. You can make the following query:Provide a list of nodes and you will receive a node from that list whose sum of distances to both the hidden nodes is minimal (if there are multiple such nodes in the list, you will receive any one of them). You will also get the sum of distances of that node to the hidden nodes.Recall that a tree is a connected graph without cycles. The distance between two nodes is defined as the number of edges in the simple path between them.More formally, let's define two hidden nodes as $$$s$$$ and $$$f$$$. In one query you can provide the set of nodes $$$\\\\{a_1, a_2, \\\\ldots, a_c\\\\}$$$ of the tree. As a result, you will get two numbers $$$a_i$$$ and $$$dist(a_i, s) + dist(a_i, f)$$$. The node $$$a_i$$$ is any node from the provided set, for which the number $$$dist(a_i, s) + dist(a_i, f)$$$ is minimal.You can ask no more than $$$14$$$ queries.InputThe first line contains a single integer $$$t$$$ $$$(1 \\\\leq t \\\\leq 10)$$$ — the number of test cases.Please note, how the interaction process is organized.The first line of each test case consists of a single integer $$$n$$$ $$$(2 \\\\le n \\\\le 1000)$$$ — the number of nodes in the tree.The next $$$n - 1$$$ lines consist of two integers $$$u$$$, $$$v$$$ $$$(1 \\\\le u, v \\\\le n, u \\\\ne v)$$$ — the edges of the tree.InteractionTo ask a query print a single line:In the beginning print \"? c\" (without quotes) where $$$c$$$ $$$(1 \\\\leq c \\\\leq n)$$$ denotes the number of nodes being queried, followed by $$$c$$$distinctintegers in the range $$$[1, n]$$$  — the indices of nodes from the list.For each query, you will receive two integers $$$x$$$, $$$d$$$ — the node (among the queried nodes) with the minimum sum of distances to the hidden nodes and the sum of distances from that node to the hidden nodes. If the subset of nodes queried is invalid or you exceeded the number of queries then you will get $$$x = d = -1$$$. In this case, you should terminate the program immediately.When you have guessed the hidden nodes, print a single line \"!\" (without quotes), followed by two integers in the range $$$[1, n]$$$  — the hidden nodes. You can output the hidden nodes in any order.After this, you should read a string.If you guess the nodes correctly, you will receive the string \"Correct\". In this case, you should continue solving the remaining test cases or terminate the program, if all test cases were solved. Otherwise, you will receive the string \"Incorrect\". In this case, you should terminate the program immediately.Guessing the hidden nodes doesnotcount towards the number of queries asked.The interactor is not adaptive.The hidden nodes do not change with queries.Do not forgetto read the string \"Correct\" / \"Incorrect\" after guessing the hidden nodes.You need to solve each test case before receiving the input for the next test case.The limit of $$$14$$$ queries applies to each test case and not to the entire input.After printing a query do not forget to output the end of the line and flush the output. Otherwise, you will getIdleness limit exceeded. To do this, use:fflush(stdout)orcout.flush()in C++;System.out.flush()in Java;flush(output)in Pascal;stdout.flush()in Python;see the documentation for other languages.HacksTo hack the solution, use the following test format:The first line should contain a single integer $$$t$$$ $$$(1 \\\\leq t \\\\leq 10)$$$ — the number of test cases. The description of the test cases follows.The first line of each test case should contain a single integer $$$n$$$ $$$(2 \\\\le n \\\\le 1000)$$$ — the number of nodes in the tree. The second line should contain two distinct integers in the range $$$[1, n]$$$  — the hidden nodes. The next $$$n - 1$$$ lines should contain two integers $$$u$$$, $$$v$$$ $$$(1 \\\\le u, v \\\\le n, u \\\\ne v)$$$  — the edges of the tree.ExampleInput1 3 1 2 1 3  1 1  2 3  3 1  3 1  CorrectOutput? 1 1  ? 1 2  ? 1 3  ? 2 2 3  ! 1 3NoteThe tree from the first test is shown below, and the hidden nodes are $$$1$$$ and $$$3$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "344bd9d6", "template_md5": "35d339e4", "result": "You are given a tree with $n$ nodes. Two secret nodes are chosen. You need to find these two nodes.\n\nYou can ask queries of the following form:\n\n* Provide a list of $c$ nodes.\n* You will receive one node from the list whose sum of distances to the two secret nodes is minimal. You will also receive the sum of distances.\n\nYou can ask at most 14 queries.\n\nTo solve the problem, you need to output the two secret nodes."}, {"prompt_md5": "cb07b7e7", "template_md5": "465699a0", "result": "You are given a tree with a certain number of nodes. Two secret nodes are hidden within the tree. You can ask questions about the tree to find these nodes.  Each question involves providing a list of nodes, and the system will return one node from that list that is closest (in terms of total distance) to the hidden nodes. You have a limited number of questions to find both hidden nodes."}]}