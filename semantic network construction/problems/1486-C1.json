{"uid": "1486-C1", "url": "https://codeforces.com/contest/1486/problem/C1", "tags": ["binary search", " interactive"], "title": "1486-C1", "statement": "C1. Guessing the Greatest (easy version)time limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe only difference between the easy and the hard version is the limit to the number of queries.This is an interactive problem.There is an array $$$a$$$ of $$$n$$$differentnumbers. In one query you can ask the position of the second maximum element in a subsegment $$$a[l..r]$$$. Find the position of the maximum element in the array in no more than40queries.A subsegment $$$a[l..r]$$$ is all the elements $$$a_l, a_{l + 1}, ..., a_r$$$. After asking this subsegment you will be given the position of the second maximum from this subsegmentin the wholearray.InputThe first line contains a single integer $$$n$$$ $$$(2 \\\\leq n \\\\leq 10^5)$$$ â€” the number of elements in the array.InteractionYou can ask queries by printing \"? $$$l$$$ $$$r$$$\" $$$(1 \\\\leq l < r \\\\leq n)$$$. The answer is the index of the second maximum of all elements $$$a_l, a_{l + 1}, \\\\ldots, a_r$$$. Array $$$a$$$ is fixed beforehand and can't be changed in time of interaction.You can output the answer by printing \"! $$$p$$$\", where$$$p$$$is the index of the maximum element in the array.You can ask no more than40queries.Printing the answer doesn't count as a query.After printing a query do not forget to output end of line and flush the output. Otherwise, you will getIdleness limit exceeded. To do this, use:fflush(stdout)orcout.flush()in C++;System.out.flush()in Java;flush(output)in Pascal;stdout.flush()in Python;see documentation for other languagesHacksTo make a hack, use the following test format.In the first line output a single integer $$$n$$$ $$$(2 \\\\leq n \\\\leq 10^5)$$$. In the second line output a permutation of $$$n$$$ integers $$$1$$$ to $$$n$$$. The position of $$$n$$$ in the permutation is the position of the maximumExampleInput5  3  4Output? 1 5  ? 4 5  ! 1NoteIn the sample suppose $$$a$$$ is $$$[5, 1, 4, 2, 3]$$$. So after asking the $$$[1..5]$$$ subsegment $$$4$$$ is second to max value, and it's position is $$$3$$$. After asking the $$$[4..5]$$$ subsegment $$$2$$$ is second to max value and it's position in the whole array is $$$4$$$.Note that there are other arrays $$$a$$$ that would produce the same interaction, and the answer for them might be different. Example output is given in purpose of understanding the interaction.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "809c13a2", "template_md5": "35d339e4", "result": "You are given an array of $n$ distinct numbers. You can ask queries about subsegments of the array.  Each query asks for the position of the second largest number in a given subsegment. Your goal is to find the position of the largest number in the entire array using no more than 40 queries.\n\n**Here's how the interaction works:**\n\n1. You provide a query by printing two numbers, $l$ and $r$, representing the start and end indices of the subsegment ($1 \\le l < r \\le n$).\n2. The system will respond with the position of the second largest number in the subsegment within the entire array.\n3. You can repeat this process up to 40 times.\n4. Finally, you output the position of the largest number in the array by printing \"! p\", where $p$ is the index. \n\n\n**Example:**\n\nSuppose the array is $[5, 1, 4, 2, 3]$.\n\n* You could ask for the subsegment $[1, 5]$. The system might respond with position 3 (because the second largest number in that subsegment is 4, which is at index 3).\n* You could then ask for the subsegment $[4, 5]$. The system might respond with position 4 (because the second largest number in that subsegment is 3, which is at index 4).\n\nBy strategically choosing your subsegments, you can deduce the position of the largest number (which is 5 in this example)."}, {"prompt_md5": "170c5fa3", "template_md5": "465699a0", "result": "You are given a list of numbers. You can ask for the second largest number in a given range of the list. Your goal is to find the largest number in the list using no more than 40 questions."}]}