{"uid": "33-E", "url": "https://codeforces.com/contest/33/problem/E", "tags": [], "title": "33-E", "statement": "E. Helpertime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutIt's unbelievable, but an exam period has started at the OhWord University. It's even more unbelievable, that Valera got all the tests before the exam period for excellent work during the term. As now he's free, he wants to earn money by solving problems for his groupmates. He's made alistof subjects that he can help with. Having spoken withnof his groupmates, Valera found out the following information about them: what subject each of them passes, time of the exam and sum of money that each person is ready to pay for Valera's help.Having this data, Valera's decided to draw up a timetable, according to which he will solve problems for his groupmates. For sure, Valera can't solve problems round the clock, that's why he's found for himself an optimum order of day and plans to stick to it during the whole exam period. Valera assigned time segments for sleep, breakfast, lunch and dinner. The rest of the time he can work.Obviously, Valera can help a student with some subject, only if this subject is on thelist. It happened, that all the students, to whom Valera spoke, have different, but one-type problems, that's why Valera can solve any problem of subjectlistiintiminutes.Moreover, if Valera starts working at some problem, he can break off only for sleep or meals, but he can't start a new problem, not having finished the current one. Having solved the problem, Valera can send it instantly to the corresponding student via the Internet.If this student's exam hasn't started yet, he can make a crib, use it to pass the exam successfully, and pay Valera the promised sum. Since Valera has little time, he asks you to write a program that finds the order of solving problems, which can bring Valera maximum profit.InputThe first line contains integersm,n,k(1 ≤m,n≤ 100,1 ≤k≤ 30) — amount of subjects on thelist, amount of Valera's potential employers and the duration of the exam period in days.The followingmlines contain the names of subjectslisti(listiis a non-empty string of at most 32 characters, consisting of lower case Latin letters). It's guaranteed that no two subjects are the same.The(m+ 2)-th line containsmintegersti(1 ≤ti≤ 1000) — time in minutes that Valera spends to solve problems of thei-th subject. Then follow four lines, containing time segments for sleep, breakfast, lunch and dinner correspondingly.Each line is in formatH1:M1-H2:M2, where00 ≤H1,H2≤ 23,00 ≤M1,M2≤ 59. TimeH1:M1stands for the first minute of some Valera's action, and timeH2:M2stands for the last minute of this action. No two time segments cross. It's guaranteed that Valera goes to bed before midnight, gets up earlier than he has breakfast, finishes his breakfast before lunch, finishes his lunch before dinner, and finishes his dinner before midnight. All these actions last less than a day, but not less than one minute. Time of the beginning and time of the ending of each action are within one and the same day. But it's possible that Valera has no time for solving problems.Then follownlines, each containing the description of students. For each student the following is known: his exam subjectsi(siis a non-empty string of at most 32 characters, consisting of lower case Latin letters), index of the exam daydi(1 ≤di≤k), the exam timetimei, and sum of moneyci(0 ≤ci≤ 106,ci— integer) that he's ready to pay for Valera's help. Exam timetimeiis in the formatHH:MM, where00 ≤HH≤ 23,00 ≤MM≤ 59. Valera will get money, if he finishes to solve the problem strictly before the corresponding student's exam begins.OutputIn the first line output the maximum profit that Valera can get. The second line should contain numberp— amount of problems that Valera is to solve. In the followingplines output the order of solving problems in chronological order in the following format: index of a student, to whom Valera is to help; index of the time, when Valera should start the problem; time, when Valera should start the problem (the first minute of his work); index of the day, when Valera should finish the problem; time, when Valera should finish the problem (the last minute of his work). To understand the output format better, study the sample tests.ExamplesInput3 3 4calculusalgebrahistory58 23 1500:00-08:1508:20-08:3509:30-10:2519:00-19:45calculus 1 09:36 100english 4 21:15 5000history 1 19:50 50Output15021 1 08:16 1 09:293 1 10:26 1 10:40Input2 2 1matancodeforces1 200:00-08:0009:00-09:0012:00-12:0018:00-18:00codeforces 1 08:04 2matan 1 08:02 1Output322 1 08:01 1 08:011 1 08:02 1 08:03Input2 2 1matancodeforces2 200:00-08:0009:00-09:0012:00-12:0018:00-18:00codeforces 1 08:04 2matan 1 08:03 1Output211 1 08:01 1 08:02", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "3a6c3d11", "template_md5": "35d339e4", "result": "You are given a list of subjects, the time it takes to solve problems for each subject, and a schedule of meals and sleep. You are also given a list of students, each with a subject, exam day, exam time, and the amount they are willing to pay for help.\n\nYour task is to determine the order in which to solve the problems to maximize profit. You can only work on one problem at a time and can only start a new problem after finishing the current one. You must finish a problem before the student's exam starts to earn the payment.\n\n**Input:**\n\n* $m$: number of subjects\n* $n$: number of students\n* $k$: duration of the exam period in days\n* List of $m$ subjects\n* Time in minutes to solve each subject\n* Time segments for sleep, breakfast, lunch, and dinner\n* For each student:\n    * Subject\n    * Exam day\n    * Exam time\n    * Payment\n\n**Output:**\n\n* Maximum profit\n* Number of problems solved\n* For each problem solved:\n    * Student index\n    * Start time index\n    * Start time\n    * End time index\n    * End time"}, {"prompt_md5": "a11a3d42", "template_md5": "465699a0", "result": "You are given a list of tasks and their deadlines. Each task has a duration and a reward. You also have a schedule with fixed time slots for sleeping, eating, and free time.  Find the order to complete the tasks that maximizes your total reward, considering the deadlines and your schedule."}]}