{"uid": "1033-F", "url": "https://codeforces.com/contest/1033/problem/F", "tags": ["bitmasks", " brute force", " fft", " math"], "title": "1033-F", "statement": "F. Boolean Computertime limit per test7 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputAlice has a computer that operates on $$$w$$$-bit integers. The computer has $$$n$$$registersfor values. The current content of the registers is given as an array $$$a_1, a_2, \\\\ldots, a_n$$$.The computer uses so-called \"number gates\" to manipulate this data. Each \"number gate\" takes two registers as inputs and calculates a function of the two values stored in those registers. Note that you can use the same register as both inputs.Each \"number gate\" is assembled from bit gates. There are six types of bit gates:AND,OR,XOR,NOT AND,NOT OR, andNOT XOR, denoted \"A\", \"O\", \"X\", \"a\", \"o\", \"x\", respectively. Eachbit gatetakes two bits as input. Its output given the input bits $$$b_1$$$, $$$b_2$$$ is given below:$$$\\\\begin{matrix} b_1 & b_2 & A & O & X & a & o & x \\\\\\\\ 0 & 0 & 0 & 0 & 0 & 1 & 1 & 1 \\\\\\\\ 0 & 1 & 0 & 1 & 1 & 1 & 0 & 0 \\\\\\\\ 1 & 0 & 0 & 1 & 1 & 1 & 0 & 0 \\\\\\\\ 1 & 1 & 1 & 1 & 0 & 0 & 0 & 1 \\\\\\\\ \\\\end{matrix}$$$To build a \"number gate\", one takes $$$w$$$ bit gates and assembles them into an array. A \"number gate\" takes two $$$w$$$-bit integers $$$x_1$$$ and $$$x_2$$$ as input. The \"number gate\" splits the integers into $$$w$$$ bits and feeds the $$$i$$$-th bit of each input to the $$$i$$$-th bit gate. After that, it assembles the resulting bits again to form an output word.For instance, for $$$4$$$-bit computer we might have a \"number gate\" \"AXoA\" (AND,XOR,NOT OR,AND). For two inputs, $$$13 = 1101_2$$$ and $$$10 = 1010_2$$$, this returns $$$12 = 1100_2$$$, as $$$1$$$and$$$1$$$ is $$$1$$$, $$$1$$$xor$$$0$$$ is $$$1$$$,not($$$0$$$or$$$1$$$) is $$$0$$$, and finally $$$1$$$and$$$0$$$ is $$$0$$$.You are given a description of $$$m$$$ \"number gates\". For each gate, your goal is to report the number of register pairs for which the \"number gate\" outputs the number $$$0$$$. In other words, find the number of ordered pairs $$$(i,j)$$$ where $$$1 \\\\leq i,j \\\\leq n$$$, such that $$$w_k(a_i, a_j) = 0$$$, where $$$w_k$$$ is the function computed by the $$$k$$$-th \"number gate\".InputThe first line contains three integers: $$$w$$$, $$$n$$$, and $$$m~(1 \\\\leq w \\\\leq 12, 1 \\\\leq n \\\\leq 3\\\\cdot 10^4, 1 \\\\leq m \\\\leq 5\\\\cdot 10^4)$$$ — the word size, the number of variables, and the number of gates.The second line contains $$$n$$$ integers $$$a_1, a_2, \\\\ldots, a_n$$$ $$$(0 \\\\leq a_i < 2^w)$$$ — the value of variables stored in the registers.Each of the next $$$m$$$ lines contains a string $$$g_j~(|g_j| = w)$$$ with a description of a single gate. Each character of $$$g_j$$$ is one of \"A\", \"O\", \"X\", \"a\", \"o\", \"x\".OutputPrint $$$m$$$ lines. The $$$i$$$-th line should contain the number of ordered pairs of variables for which the $$$i$$$-th gate returns zero.ExamplesInput4 3 113 10 6AXoAOutput3Input1 7 60 1 1 0 1 0 0AOXaoxOutput40162593324Input6 2 447 12AOXaoxAAaaAAxxxxxxXXXXXXOutput2302Input2 2 22 0xOOxOutput20NoteIn the first test case, the inputs in binary are $$$1101$$$, $$$1010$$$, $$$0110$$$. The pairs that return $$$0$$$ are $$$(13, 6)$$$, $$$(6, 13)$$$, and $$$(6, 6)$$$. As it was already mentioned in the problem statement, $$$13 \\\\oplus 10 = 10 \\\\oplus 13 = 12$$$. The other pairs are $$$13 \\\\oplus 13 = 11$$$, $$$10 \\\\oplus 10 = 8$$$ and $$$10 \\\\oplus 6 = 6 \\\\oplus 10 = 4$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "f48e1da8", "template_md5": "35d339e4", "result": "You are given a computer with $w$-bit integers and $n$ registers. Each register holds an integer value. There are $m$ \"number gates\" that take two register values as input and produce an output. Each gate is built from six types of bit gates: AND, OR, XOR, NOT AND, NOT OR, and NOT XOR, denoted \"A\", \"O\", \"X\", \"a\", \"o\", \"x\", respectively.\n\nEach bit gate takes two bits as input and produces an output based on a truth table.\n\nTo use a number gate, you split the input integers into $w$ bits, feed each bit pair to a corresponding bit gate, and then combine the output bits to form the final output.\n\nYour task is to determine, for each number gate, how many pairs of registers result in an output of 0. \n\n**Input:**\n\n* $w$: The word size (number of bits).\n* $n$: The number of registers.\n* $m$: The number of gates.\n* $a_1, a_2, ..., a_n$: The initial values in the registers.\n* $g_1, g_2, ..., g_m$:  A string describing each gate, where each character is a bit gate symbol (A, O, X, a, o, x).\n\n**Output:**\n\n* For each gate, print the number of register pairs that produce an output of 0."}, {"prompt_md5": "7f1880de", "template_md5": "465699a0", "result": "You are given a computer with a set of registers holding values. The computer has a set of gates that take two values as input and produce an output value. Each gate is built from simpler logic gates (AND, OR, XOR, NOT). \n\nYou need to determine for each gate, how many pairs of registers will result in an output of zero."}]}