{"uid": "1674-D", "url": "https://codeforces.com/contest/1674/problem/D", "tags": ["constructive algorithms", " implementation", " sortings"], "title": "1674-D", "statement": "D. A-B-C Sorttime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given three arrays $$$a$$$, $$$b$$$ and $$$c$$$. Initially, array $$$a$$$ consists of $$$n$$$ elements, arrays $$$b$$$ and $$$c$$$ are empty.You are performing the following algorithm that consists of two steps:Step $$$1$$$: while $$$a$$$ is not empty, you takethe last elementfrom $$$a$$$ and move itin the middleof array $$$b$$$. If $$$b$$$ currently has odd length, you can choose: place the element from $$$a$$$ to the left or to the right of the middle element of $$$b$$$. As a result, $$$a$$$ becomes empty and $$$b$$$ consists of $$$n$$$ elements.Step $$$2$$$: while $$$b$$$ is not empty, you takethe middle elementfrom $$$b$$$ and move itto the endof array $$$c$$$. If $$$b$$$ currently has even length, you can choose which of two middle elements to take. As a result, $$$b$$$ becomes empty and $$$c$$$ now consists of $$$n$$$ elements.Refer to the Note section for examples.Can you make array $$$c$$$ sorted in non-decreasing order?InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 2 \\\\cdot 10^4$$$) — the number of test cases. Next $$$t$$$ cases follow.The first line of each test case contains the single integer $$$n$$$ ($$$1 \\\\le n \\\\le 2 \\\\cdot 10^5$$$) — the length of array $$$a$$$.The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\\\dots, a_n$$$ ($$$1 \\\\le a_i \\\\le 10^6$$$) — the array $$$a$$$ itself.It's guaranteed that the sum of $$$n$$$ doesn't exceed $$$2 \\\\cdot 10^5$$$.OutputFor each test, printYES(case-insensitive), if you can make array $$$c$$$ sorted in non-decreasing order. Otherwise, printNO(case-insensitive).ExampleInput343 1 5 333 2 117331OutputYES NO YESNoteIn the first test case, we can do the following for $$$a = [3, 1, 5, 3]$$$:Step $$$1$$$:$$$a$$$$$$[3, 1, 5, 3]$$$$$$\\\\Rightarrow$$$$$$[3, 1, 5]$$$$$$\\\\Rightarrow$$$$$$[3, 1]$$$$$$\\\\Rightarrow$$$$$$[3]$$$$$$\\\\Rightarrow$$$$$$[]$$$$$$b$$$$$$[]$$$$$$[\\\\underline{3}]$$$$$$[3, \\\\underline{5}]$$$$$$[3, \\\\underline{1}, 5]$$$$$$[3, \\\\underline{3}, 1, 5]$$$Step $$$2$$$:$$$b$$$$$$[3, 3, \\\\underline{1}, 5]$$$$$$\\\\Rightarrow$$$$$$[3, \\\\underline{3}, 5]$$$$$$\\\\Rightarrow$$$$$$[\\\\underline{3}, 5]$$$$$$\\\\Rightarrow$$$$$$[\\\\underline{5}]$$$$$$\\\\Rightarrow$$$$$$[]$$$$$$c$$$$$$[]$$$$$$[1]$$$$$$[1, 3]$$$$$$[1, 3, 3]$$$$$$[1, 3, 3, 5]$$$As a result, array $$$c = [1, 3, 3, 5]$$$ and it's sorted.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "4cd533e0", "template_md5": "35d339e4", "result": "You are given three arrays,  $a$, $b$, and $c$. Array $a$ has $n$ elements, while $b$ and $c$ are initially empty.\n\nYou perform the following steps:\n\n**Step 1:**\n\n* While array $a$ is not empty, take the last element from $a$ and insert it into the middle of array $b$. \n* If $b$ has an odd number of elements, you can choose to place the new element to the left or right of the middle element.\n* This step continues until $a$ is empty, leaving $b$ with $n$ elements.\n\n**Step 2:**\n\n* While array $b$ is not empty, take the middle element from $b$ and move it to the end of array $c$.\n* If $b$ has an even number of elements, you can choose which of the two middle elements to take.\n* This step continues until $b$ is empty, leaving $c$ with $n$ elements.\n\nDetermine if it is possible to make array $c$ sorted in non-decreasing order after these steps.  \n\n\nInput:\n\n* The first line contains the number of test cases, $t$.\n* For each test case:\n    * The first line contains the length of array $a$, $n$.\n    * The second line contains the $n$ elements of array $a$.\n\nOutput:\n\n* For each test case, print \"YES\" if it's possible to sort array $c$, otherwise print \"NO\"."}, {"prompt_md5": "b9e842dd", "template_md5": "465699a0", "result": "You are given a list of numbers. You perform two operations:\n\n1. Move the last number from one list to the middle of another list. You can choose the side of the middle when the middle list has an odd number of elements.\n2. Move the middle number from one list to the end of another list. You can choose which middle number to move when the middle list has an even number of elements.\n\nCan you arrange the numbers in the final list in non-decreasing order?"}]}