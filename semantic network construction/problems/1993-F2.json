{"uid": "1993-F2", "url": "https://codeforces.com/contest/1993/problem/F2", "tags": ["chinese remainder theorem", " math", " number theory"], "title": "1993-F2", "statement": "F2. Dyn-scripted Robot (Hard Version)time limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the hard version of the problem. The only difference is that in this version $$$k \\\\le 10^{12}$$$. You can make hacks only if both versions of the problem are solved.Given a $$$w \\\\times h$$$ rectangle on the $$$Oxy$$$ plane, with points $$$(0, 0)$$$ at the bottom-left and $$$(w, h)$$$ at the top-right of the rectangle.You also have a robot initially at point $$$(0, 0)$$$ and a script $$$s$$$ of $$$n$$$ characters. Each character is eitherL,R,U, orD, which tells the robot to move left, right, up, or down respectively.The robot can only move inside the rectangle; otherwise, it will change the script $$$s$$$ as follows:If it tries to move outside a vertical border, it changes allLcharacters toR's (and vice versa, allR's toL's).If it tries to move outside a horizontal border, it changes allUcharacters toD's (and vice versa, allD's toU's).Then, it will execute the changed script starting from the character which it couldn't execute.An example of the robot's movement process, $$$s = \\\\texttt{\"ULULURD\"}$$$The script $$$s$$$ will be executed for $$$k$$$ times continuously. All changes to the string $$$s$$$ will be retained even when it is repeated. During this process, how many times will the robot move to the point $$$(0, 0)$$$ in total?Note that the initial position does NOT count.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of test cases.The first line of each test case contains four integers $$$n$$$, $$$k$$$, $$$w$$$, and $$$h$$$ ($$$1 \\\\le n, w, h \\\\le 10^6$$$; $$$1 \\\\le k \\\\le 10^{12}$$$).The second line contains a single string $$$s$$$ of size $$$n$$$ ($$$s_i \\\\in \\\\{\\\\texttt{L}, \\\\texttt{R}, \\\\texttt{U}, \\\\texttt{D}\\\\}$$$) — the script to be executed.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^6$$$.OutputFor each test case, print a single integer — the number of times the robot reaches $$$(0, 0)$$$ when executing script $$$s$$$ for $$$k$$$ times continuously.ExampleInput62 4 2 2UR4 2 1 1LLDD6 3 3 1RLRRRL5 6 3 3RUURD7 5 3 4RRDLUUU7 123456789999 3 2ULULURDOutput1 4 3 1 1 41152263332NoteIn the first test case, the robot only moves up and right for the first two executions. After that, it occupies the position $$$(2, 2)$$$. For the next two executions, it moves down and left and finishes at $$$(0, 0)$$$. So the answer is $$$1$$$.In the second test case, each time executing the script the robot visits the origin twice. And since $$$k=2$$$, it visits the origin $$$2 \\\\cdot 2 = 4$$$ times overall.In the third test case, the visualization is shown as below:", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "a2bbe780", "template_md5": "35d339e4", "result": "You have a rectangle with width $w$ and height $h$. A robot starts at the bottom-left corner $(0,0)$ of the rectangle. It follows a script of $n$ characters, where each character is either L (left), R (right), U (up), or D (down).  \n\nWhen the robot tries to move outside the rectangle's boundaries, the script changes:\n\n* If it tries to move outside a vertical border, all L's become R's and all R's become L's.\n* If it tries to move outside a horizontal border, all U's become D's and all D's become U's.\n\nThe robot then continues executing the modified script from the point where it couldn't move.\n\nThe script is executed $k$ times continuously.  \n\nHow many times does the robot return to the starting position $(0,0)$?"}, {"prompt_md5": "76702903", "template_md5": "465699a0", "result": "A robot moves on a grid based on a sequence of instructions (L, R, U, D). If the robot tries to move off the grid, the instructions are flipped (L becomes R, R becomes L, U becomes D, D becomes U). The instructions are repeated many times.  Count how many times the robot returns to the starting position."}]}