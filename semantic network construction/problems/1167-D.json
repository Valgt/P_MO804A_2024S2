{"uid": "1167-D", "url": "https://codeforces.com/contest/1167/problem/D", "tags": ["constructive algorithms", " greedy"], "title": "1167-D", "statement": "D. Bicolored RBStime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA string is calledbracket sequenceif it does not contain any characters other than \"(\" and \")\". A bracket sequence is calledregular(shortly, RBS) if it is possible to obtain correct arithmetic expression by inserting characters \"+\" and \"1\" into this sequence. For example, \"\", \"(())\" and \"()()\" are RBS and \")(\" and \"(()\" are not.We can see that each opening bracket in RBS is paired with some closing bracket, and, using this fact, we can definenesting depthof the RBS as maximum number of bracket pairs, such that the $$$2$$$-nd pair lies inside the $$$1$$$-st one, the $$$3$$$-rd one — inside the $$$2$$$-nd one and so on. For example, nesting depth of \"\" is $$$0$$$, \"()()()\" is $$$1$$$ and \"()((())())\" is $$$3$$$.Now, you are given RBS $$$s$$$ of even length $$$n$$$. You should color each bracket of $$$s$$$ into one of two colors: red or blue. Bracket sequence $$$r$$$, consisting only of red brackets, should be RBS, and bracket sequence, consisting only of blue brackets $$$b$$$, should be RBS. Any of them can be empty. You are not allowed to reorder characters in $$$s$$$, $$$r$$$ or $$$b$$$. No brackets can be left uncolored.Among all possible variants you should choose one thatminimizes maximumof $$$r$$$'s and $$$b$$$'s nesting depth. If there are multiple solutions you can print any of them.InputThe first line contains an even integer $$$n$$$ ($$$2 \\\\le n \\\\le 2 \\\\cdot 10^5$$$) — the length of RBS $$$s$$$.The second line contains regular bracket sequence $$$s$$$ ($$$|s| = n$$$, $$$s_i \\\\in \\\\{$$$\"(\", \")\"$$$\\\\}$$$).OutputPrint single string $$$t$$$ of length $$$n$$$ consisting of \"0\"-s and \"1\"-s. If $$$t_i$$$ is equal to0then character $$$s_i$$$ belongs to RBS $$$r$$$, otherwise $$$s_i$$$ belongs to $$$b$$$.ExamplesInput2 ()Output11Input4 (())Output0101Input10 ((()())())Output0110001111NoteIn the first example one of optimal solutions is $$$s = $$$ \"$$$\\\\color{blue}{()}$$$\". $$$r$$$ is empty and $$$b = $$$ \"$$$()$$$\". The answer is $$$\\\\max(0, 1) = 1$$$.In the second example it's optimal to make $$$s = $$$ \"$$$\\\\color{red}{(}\\\\color{blue}{(}\\\\color{red}{)}\\\\color{blue}{)}$$$\". $$$r = b = $$$ \"$$$()$$$\" and the answer is $$$1$$$.In the third example we can make $$$s = $$$ \"$$$\\\\color{red}{(}\\\\color{blue}{((}\\\\color{red}{)()}\\\\color{blue}{)())}$$$\". $$$r = $$$ \"$$$()()$$$\" and $$$b = $$$ \"$$$(()())$$$\" and the answer is $$$2$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "0d9acb36", "template_md5": "35d339e4", "result": "You are given a string of even length consisting only of \"(\" and \")\" characters.  This string is called a \"regular bracket sequence\" (RBS).\n\nYou need to divide this string into two parts:\n\n* **Part 1:**  Consists only of \"(\" and \")\" characters, and can be rearranged to form a valid arithmetic expression when \"+\" and \"1\" are inserted.\n* **Part 2:**  Consists only of \"(\" and \")\" characters, and can be rearranged to form a valid arithmetic expression when \"+\" and \"1\" are inserted.\n\nThe \"nesting depth\" of a RBS is the maximum number of nested pairs of brackets. For example, the nesting depth of \"()()\" is 1.\n\nYour goal is to divide the string into the two parts in a way that minimizes the maximum nesting depth of either part. \n\n**Input:**\n\n* The first line contains an even integer *n* (2 ≤ *n* ≤ 2 * 10^5), the length of the RBS.\n* The second line contains the RBS.\n\n**Output:**\n\n* A string of length *n* consisting of \"0\"s and \"1\"s. \n    * If *t<sub>i</sub>* is 0, then the *i*th character of the input RBS belongs to Part 1.\n    * If *t<sub>i</sub>* is 1, then the *i*th character of the input RBS belongs to Part 2."}, {"prompt_md5": "fb5e9724", "template_md5": "465699a0", "result": "You are given a string of parentheses.  You need to divide the parentheses into two groups, one red and one blue.  Each group must be a valid parenthesis sequence (meaning it can be turned into a correct mathematical expression).  Find a way to divide the parentheses that minimizes the maximum nesting depth of either the red or blue group."}]}