{"uid": "1625-E2", "url": "https://codeforces.com/contest/1625/problem/E2", "tags": ["binary search", " data structures", " dfs and similar", " graphs", " trees"], "title": "1625-E2", "statement": "E2. Cats on the Upgrade (hard version)time limit per test6 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the hard version of the problem. The only difference between the easy and the hard versions are removal queries, they are present only in the hard version.\"Interplanetary Software, Inc.\" together with \"Robots of Cydonia, Ltd.\" has developed and released robot cats. These electronic pets can meow, catch mice and entertain the owner in various ways.The developers from \"Interplanetary Software, Inc.\" have recently decided to release a software update for these robots. After the update, the cats must solve the problems about bracket sequences. One of the problems is described below.First, we need to learn a bit of bracket sequence theory. Consider the strings that contain characters \"(\", \")\" and \".\". Call a stringregular bracket sequence (RBS), if it can be transformed to an empty string by one or more operations of removing either single \".\" characters, or a continuous substring \"()\". For instance, the string \"(()(.))\" is an RBS, as it can be transformed to an empty string with the following sequence of removals:\"(()(.))\" $$$\\\\rightarrow$$$ \"(()())\" $$$\\\\rightarrow$$$ \"(())\" $$$\\\\rightarrow$$$ \"()\" $$$\\\\rightarrow$$$ \"\".We got an empty string, so the initial string was an RBS. At the same time, the string \")(\" is not an RBS, as it is not possible to apply such removal operations to it.An RBS issimpleif this RBS is not empty, doesn't start with \".\", and doesn't end with \".\".Denote thesubstringof the string $$$s$$$ as its sequential subsegment. In particular, $$$s[l\\\\dots r] = s_ls_{l+1}\\\\dots s_r$$$, where $$$s_i$$$ is the $$$i$$$-th character of the string $$$s$$$.Now, move on to the problem statement itself. You are given a string $$$s$$$, initially consisting of characters \"(\" and \")\". You need to answer the following queries:Given two indices, $$$l$$$ and $$$r$$$ ($$$1 \\\\le l < r \\\\le n$$$). It'sguaranteedthat the $$$l$$$-th character is equal to \"(\", the $$$r$$$-th character is equal to \")\", and the characters between them are equal to \".\". Then the $$$l$$$-th and the $$$r$$$-th characters must be set to \".\".Given two indices, $$$l$$$ and $$$r$$$ ($$$1 \\\\le l < r \\\\le n$$$), and it'sguaranteedthat the substring $$$s[l\\\\dots r]$$$ is asimple RBS. You need to find the number of substrings in $$$s[l\\\\dots r]$$$ such that they are simple RBS. In other words, find the number of index pairs $$$i$$$, $$$j$$$ such that $$$l \\\\le i < j \\\\le r$$$ and $$$s[i\\\\dots j]$$$ is a simple RBS.You are an employee in \"Interplanetary Software, Inc.\" and you were given the task to teach the cats to solve the problem above, after the update.InputThe first line contains two integers $$$n$$$ and $$$q$$$ ($$$2 \\\\le n \\\\le 3\\\\cdot10^5$$$, $$$1 \\\\le q \\\\le 3\\\\cdot10^5$$$), the length of the string, and the number of queries.The second line contains the string $$$s$$$, consisting of $$$n$$$ characters \"(\" and \")\".Each of the following $$$q$$$ lines contains three integers $$$t$$$, $$$l$$$ and $$$r$$$ ($$$t \\\\in \\\\{1, 2\\\\}$$$, $$$1 \\\\le l < r \\\\le n$$$), the queries you need to answer. It is guaranteed that all the queries are valid and correspond to the problem statements.OutputFor each query, print a single integer in a separate line, the number of substrings that are simple RBS. The answers must be printed in the same order as the queries are specified in the input.ExampleInput9 8 )(()())() 2 3 6 2 2 7 1 3 4 2 2 7 2 2 9 1 5 6 1 2 7 2 8 9Output3 4 2 4 1NoteConsider the example test case.The answer to the first query is $$$3$$$, as there are three suitable substrings: $$$s[3\\\\dots6]$$$, $$$s[3\\\\dots4]$$$ and $$$s[5\\\\dots6]$$$.The answer to the second query is $$$4$$$. The substrings are $$$s[3\\\\dots6]$$$, $$$s[3\\\\dots4]$$$, $$$s[5\\\\dots6]$$$ and $$$s[2\\\\dots7]$$$.After the third query, the string becomes \")(..())()\".The answer to the fourth query is $$$2$$$. The substrings are $$$s[5\\\\dots6]$$$ and $$$s[2\\\\dots7]$$$. Note that $$$s[3\\\\dots6]$$$ is not a simple RBS anymore, as it starts with \".\".The answer to the fifth query is $$$4$$$. The substrings are $$$s[5\\\\dots6]$$$, $$$s[2\\\\dots7]$$$, $$$s[8\\\\dots9]$$$ and $$$s[2\\\\dots9]$$$.After the sixth query, the string becomes \")(....)()\".After the seventh query, the string becomes \")......()\".The answer to the eighth query is $$$1$$$. The substring is $$$s[8\\\\dots9]$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "190e8508", "template_md5": "35d339e4", "result": "You are given a string $s$ consisting of \"(\" and \")\" characters. You need to answer queries of two types:\n\n**Type 1:**\n\nGiven two indices $l$ and $r$ ($1 \\le l < r$), where the $l$-th character is \"(\", the $r$-th character is \")\", and the characters between them are \".\", set the $l$-th and $r$-th characters to \".\".\n\n**Type 2:**\n\nGiven two indices $l$ and $r$ ($1 \\le l < r$), where the substring $s[l...r]$ is a \"simple RBS\" (see definition below), find the number of substrings in $s[l...r]$ that are also simple RBS.\n\n**Definition of a simple RBS:**\n\nA string is a \"simple RBS\" if it:\n\n* Is not empty.\n* Does not start with \".\".\n* Does not end with \".\".\n\n**Input:**\n\n* The first line contains two integers $n$ and $q$ ($2 \\le n \\le 3 \\cdot 10^5$, $1 \\le q \\le 3 \\cdot 10^5$), the length of the string and the number of queries.\n* The second line contains the string $s$.\n* Each of the following $q$ lines contains three integers $t$, $l$, and $r$ ($t \\in \\{1, 2\\}$, $1 \\le l < r \\le n$), representing the type of query and the indices.\n\n**Output:**\n\nFor each query, print a single integer in a separate line, the number of substrings that are simple RBS."}, {"prompt_md5": "51a0a7cd", "template_md5": "465699a0", "result": "You are given a string of parentheses.  You need to answer queries of two types:\n\n1. **Replace:** Change two specific parentheses in the string to dots.\n2. **Count:**  For a given range of the string, count how many substrings within that range are valid \"bracket sequences\" (can be reduced to empty by removing pairs of parentheses and dots)."}]}