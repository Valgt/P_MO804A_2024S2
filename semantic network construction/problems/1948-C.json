{"uid": "1948-C", "url": "https://codeforces.com/contest/1948/problem/C", "tags": ["brute force", " constructive algorithms", " dfs and similar", " dp", " graphs", " shortest paths"], "title": "1948-C", "statement": "C. Arrow Pathtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere is a grid, consisting of $$$2$$$ rows and $$$n$$$ columns. The rows are numbered from $$$1$$$ to $$$2$$$ from top to bottom. The columns are numbered from $$$1$$$ to $$$n$$$ from left to right. Each cell of the grid contains an arrow pointing either to the left or to the right. No arrow points outside the grid.There is a robot that starts in a cell $$$(1, 1)$$$. Every second, the following two actions happen one after another:Firstly, the robot moves left, right, down or up (it can't try to go outside the grid, and can't skip a move);then it moves along the arrow that is placed in the current cell (the cell it ends up after its move).Your task is to determine whether the robot can reach the cell $$$(2, n)$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of test cases.The first line of each test case contains a single integer ($$$2 \\\\le n \\\\le 2 \\\\cdot 10^5$$$).The second line contains a string consisting of exactly $$$n$$$ characters<and/or>— the first row of the grid.The third line contains a string consisting of exactly $$$n$$$ characters<and/or>— the second row of the grid.Additional constraints on the input:$$$n$$$ is even;there are no arrows pointing outside the grid;the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \\\\cdot 10^5$$$.OutputFor each test case, printYESif the robot can reach the cell $$$(2, n)$$$; otherwise, printNO.You can print each letter in any case. For example,yes,Yes,YeSwill all be recognized as positive answer.ExampleInput44>><<>>><2><><4>>><>><<6>><<><><>>><OutputYES YES NO YESNoteIn the first example, one of the possible paths looks as follows: $$$(1, 1) \\\\rightarrow (1, 2) \\\\rightarrow (1, 3) \\\\rightarrow (2, 3) \\\\rightarrow (2, 4)$$$.In the second example, one of the possible paths looks as follows: $$$(1, 1) \\\\rightarrow (2, 1) \\\\rightarrow (2, 2)$$$.In the third example, there is no way to reach the cell $$$(2, 4)$$$.In the fourth example, one of the possible paths looks as follows: $$$(1, 1) \\\\rightarrow (2, 1) \\\\rightarrow (2, 2) \\\\rightarrow (1, 2) \\\\rightarrow (1, 3) \\\\rightarrow (2, 3) \\\\rightarrow (2, 4) \\\\rightarrow (2, 5) \\\\rightarrow (2, 6)$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "46b09b6e", "template_md5": "35d339e4", "result": "You are given a 2 by $n$ grid. Each cell in the grid contains an arrow pointing either left or right.  A robot starts at cell $(1,1)$.  Every second, the robot does the following:\n\n1. Moves one cell in any direction (up, down, left, or right), staying within the grid.\n2. Moves one cell in the direction of the arrow in the cell it landed in.\n\nDetermine if the robot can reach cell $(2,n)$. \n\nInput:\n\n* The first line contains the number of test cases, $t$.\n* For each test case:\n    * The first line contains the number of columns, $n$.\n    * The second line contains a string of $n$ characters, representing the first row of the grid ('<' for left arrow, '>' for right arrow).\n    * The third line contains a string of $n$ characters, representing the second row of the grid.\n\nOutput:\n\nFor each test case, print \"YES\" if the robot can reach cell $(2,n)$, otherwise print \"NO\"."}, {"prompt_md5": "92fa28c2", "template_md5": "465699a0", "result": "A robot starts at the top left corner of a grid.  Each second, it moves in one of four directions (up, down, left, right) and then follows the direction of an arrow in its new location. Can the robot reach the bottom right corner of the grid?"}]}