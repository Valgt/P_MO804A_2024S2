{"uid": "1987-E", "url": "https://codeforces.com/contest/1987/problem/E", "tags": ["brute force", " data structures", " dfs and similar", " dsu", " greedy", " trees"], "title": "1987-E", "statement": "E. Wonderful Tree!time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputGod's Blessing on This ArrayForces!A Random PebbleYou are given a tree with $$$n$$$ vertices, rooted at vertex $$$1$$$. The $$$i$$$-th vertex has an integer $$$a_i$$$ written on it.Let $$$L$$$ be the set of all direct children$$$^{\\\\text{∗}}$$$ of $$$v$$$. A tree is calledwonderful, if for all vertices $$$v$$$ where $$$L$$$ is not empty, $$$$$$a_v \\\\le \\\\sum_{u \\\\in L}{a_u}.$$$$$$ In one operation, you choose any vertex $$$v$$$ and increase $$$a_v$$$ by $$$1$$$.Find the minimum number of operations needed to make the given treewonderful!$$$^{\\\\text{∗}}$$$ Vertex $$$u$$$ is called a direct child of vertex $$$v$$$ if:$$$u$$$ and $$$v$$$ are connected by an edge, and$$$v$$$ is on the (unique) path from $$$u$$$ to the root of the tree.InputEach test contains multiple test cases. The first line of input contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 1000$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$2 \\\\le n \\\\le 5000$$$) — the number of vertices in the tree.The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\\\ldots, a_n$$$ ($$$0 \\\\le a_i \\\\le 10^9$$$) — the values initially written on the vertices.The third line of each test case contains $$$n - 1$$$ integers $$$p_2, p_3 , \\\\ldots, p_n$$$ ($$$1 \\\\le p_i < i$$$), indicating that there is an edge from vertex $$$p_i$$$ to vertex $$$i$$$. It is guaranteed that the given edges form a tree.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5000$$$.OutputFor each test case, output a single integer — the minimum number of operations needed to make the treewonderful.ExampleInput459 3 4 1 21 1 3 325 31236 54130 0 01 2Output3 2 0 0NoteThe tree in the first test case:You can apply the operation once on vertex $$$5$$$ and twice on vertex $$$2$$$ to get awonderfultree.In the second test case, you can apply the operation twice on vertex $$$2$$$ to get awonderfultree.In the third and fourth test cases, the tree is alreadywonderful, so you don't need to apply any operations.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "47821243", "template_md5": "35d339e4", "result": "You are given a tree with $n$ vertices, rooted at vertex 1. Each vertex has an integer value $a_i$ written on it.\n\nA tree is considered \"wonderful\" if for every vertex $v$ that has children, the value on vertex $v$ is less than or equal to the sum of the values on its children.\n\nYou can perform an operation to increase the value on any vertex by 1.\n\nFind the minimum number of operations needed to make the tree wonderful.\n\n\n\nInput:\n\n* The first line contains the number of test cases, $t$.\n* For each test case:\n    * The first line contains the number of vertices, $n$.\n    * The second line contains the values on each vertex, $a_1, a_2, ..., a_n$.\n    * The third line contains $n-1$ integers, $p_2, p_3, ..., p_n$, representing the parent of each vertex (except the root, vertex 1).\n\nOutput:\n\nFor each test case, output the minimum number of operations needed to make the tree wonderful."}, {"prompt_md5": "887088ac", "template_md5": "465699a0", "result": "You are given a tree-like structure with numbered nodes. Each node has a value.  You can increase the value of any node by 1.  The tree is considered \"wonderful\" if for every node with children, the node's value is less than or equal to the sum of its children's values. Find the fewest operations needed to make the tree wonderful."}]}