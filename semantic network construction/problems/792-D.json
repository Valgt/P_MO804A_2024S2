{"uid": "792-D", "url": "https://codeforces.com/contest/792/problem/D", "tags": ["bitmasks", " trees"], "title": "792-D", "statement": "D. Paths in a Complete Binary Treetime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputTis a complete binary tree consisting ofnvertices. It means that exactly one vertex is a root, and each vertex is either a leaf (and doesn't have children) or an inner node (and has exactly two children). All leaves of a complete binary tree have the same depth (distance from the root). Sonis a number such thatn+ 1is a power of2.In the picture you can see a complete binary tree withn= 15.Vertices are numbered from1tonin a special recursive way: we recursively assign numbers to all vertices from the left subtree (if current vertex is not a leaf), then assign a number to the current vertex, and then recursively assign numbers to all vertices from the right subtree (if it exists). In the picture vertices are numbered exactly using this algorithm. It is clear that for each size of a complete binary tree exists exactly one way to give numbers to all vertices. This way of numbering is calledsymmetric.You have to write a program that for givennanswersqqueries to the tree.Each query consists of an integer numberui(1 ≤ui≤n) and a stringsi, whereuiis the number of vertex, andsirepresents the path starting from this vertex. Stringsidoesn't contain any characters other than 'L', 'R' and 'U', which mean traverse to the left child, to the right child and to the parent, respectively. Characters fromsihave to be processed from left to right, considering thatuiis the vertex where the path starts. If it's impossible to process a character (for example, to go to the left child of a leaf), then you have to skip it. The answer is the number of vertex where the path represented bysiends.For example, ifui= 4andsi=«UURL», then the answer is10.InputThe first line contains two integer numbersnandq(1 ≤n≤ 1018,q≥ 1).nis such thatn+ 1is a power of2.The next2qlines represent queries; each query consists of two consecutive lines. The first of these two lines containsui(1 ≤ui≤n), the second contains non-empty stringsi.sidoesn't contain any characters other than 'L', 'R' and 'U'.It is guaranteed that the sum of lengths ofsi(for eachisuch that1 ≤i≤q) doesn't exceed105.OutputPrintqnumbers,i-th number must be the answer to thei-th query.ExampleInput15 24UURL8LRLLLLLLLLOutput105", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "f0a70e30", "template_md5": "35d339e4", "result": "You are given a complete binary tree with $n$ vertices, where $n+1$ is a power of 2. The vertices are numbered from 1 to $n$ in a specific way:\n\n1. Recursively number the left subtree (if it exists).\n2. Number the current vertex.\n3. Recursively number the right subtree (if it exists).\n\nYou will receive $q$ queries. Each query consists of:\n\n* An integer $u$ (1 ≤ $u$ ≤ $n$) representing a vertex.\n* A string $s$ representing a path starting from vertex $u$. The string contains only the characters 'L', 'R', and 'U', meaning \"go to the left child\", \"go to the right child\", and \"go to the parent\", respectively.\n\nFor each query, determine the vertex number that the path $s$ starting from vertex $u$ ends at. If a character in $s$ cannot be processed (e.g., going left from a leaf), skip it.\n\nOutput $q$ numbers, where the $i$-th number is the answer to the $i$-th query."}, {"prompt_md5": "2a8647a6", "template_md5": "465699a0", "result": "You are given a special type of tree with a specific way of numbering its nodes. You need to process a series of queries. Each query consists of a node number and a sequence of directions ('L' for left, 'R' for right, 'U' for up).  You need to determine the final node reached by following these directions starting from the given node."}]}