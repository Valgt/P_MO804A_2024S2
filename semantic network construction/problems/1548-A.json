{"uid": "1548-A", "url": "https://codeforces.com/contest/1548/problem/A", "tags": ["brute force", " graphs", " greedy"], "title": "1548-A", "statement": "A. Web of Liestime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputWhen you play the game of thrones, you win, or you die. There is no middle ground.Cersei Lannister,A Game of Thronesby George R. R. MartinThere are $$$n$$$ nobles, numbered from $$$1$$$ to $$$n$$$. Noble $$$i$$$ has a power of $$$i$$$. There are also $$$m$$$ \"friendships\". A friendship between nobles $$$a$$$ and $$$b$$$ is always mutual.A noble is defined to bevulnerableif both of the following conditions are satisfied:the noble has at least one friend, andallof that noble's friends have a higher power.You will have to process the following three types of queries.Add a friendship between nobles $$$u$$$ and $$$v$$$.Remove a friendship between nobles $$$u$$$ and $$$v$$$.Calculate the answer to the following process.The process: all vulnerable nobles are simultaneously killed, and all their friendships end. Then, it is possible that new nobles become vulnerable. The process repeats itself until no nobles are vulnerable. It can be proven that the process will end in finite time. After the process is complete, you need to calculate the number of remaining nobles.Note that the results of the process arenotcarried over between queries, that is, every process starts with all nobles being alive!InputThe first line contains the integers $$$n$$$ and $$$m$$$ ($$$1 \\\\le n \\\\le 2\\\\cdot 10^5$$$, $$$0 \\\\le m \\\\le 2\\\\cdot 10^5$$$) — the number of nobles and number of original friendships respectively.The next $$$m$$$ lines each contain the integers $$$u$$$ and $$$v$$$ ($$$1 \\\\le u,v \\\\le n$$$, $$$u \\\\ne v$$$), describing a friendship. No friendship is listed twice.The next line contains the integer $$$q$$$ ($$$1 \\\\le q \\\\le 2\\\\cdot {10}^{5}$$$) — the number of queries.The next $$$q$$$ lines contain the queries themselves, each query has one of the following three formats.$$$1$$$ $$$u$$$ $$$v$$$ ($$$1 \\\\le u,v \\\\le n$$$, $$$u \\\\ne v$$$) — add a friendship between $$$u$$$ and $$$v$$$. It is guaranteed that $$$u$$$ and $$$v$$$ are not friends at this moment.$$$2$$$ $$$u$$$ $$$v$$$ ($$$1 \\\\le u,v \\\\le n$$$, $$$u \\\\ne v$$$) — remove a friendship between $$$u$$$ and $$$v$$$. It is guaranteed that $$$u$$$ and $$$v$$$ are friends at this moment.$$$3$$$ — print the answer to the process described in the statement.OutputFor each type $$$3$$$ query print one integer to a new line. It is guaranteed that there will be at least one type $$$3$$$ query.ExamplesInput4 3 2 1 1 3 3 4 4 3 1 2 3 2 3 1 3Output2 1Input4 3 2 3 3 4 4 1 1 3Output1NoteConsider the first example. In the first type 3 query, we have the diagram below.In the first round of the process, noble $$$1$$$ is weaker than all of his friends ($$$2$$$ and $$$3$$$), and is thus killed. No other noble is vulnerable in round 1. In round 2, noble $$$3$$$ is weaker than his only friend, noble $$$4$$$, and is therefore killed. At this point, the process ends, and the answer is $$$2$$$.In the second type 3 query, the only surviving noble is $$$4$$$.The second example consists of only one type $$$3$$$ query. In the first round, two nobles are killed, and in the second round, one noble is killed. The final answer is $$$1$$$, since only one noble survives.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "b20c4e02", "template_md5": "35d339e4", "result": "There are $n$ people, numbered from 1 to $n$. Each person has a power level equal to their number.  There are $m$ friendships between these people. A friendship is mutual, meaning if person $a$ is friends with person $b$, then person $b$ is also friends with person $a$.\n\nA person is considered \"vulnerable\" if they have at least one friend and all of their friends have a higher power level than them.\n\nYou will be given three types of queries:\n\n1. **Add friendship:** Add a friendship between person $u$ and person $v$.\n2. **Remove friendship:** Remove the friendship between person $u$ and person $v$.\n3. **Calculate remaining people:**\n\n   *  Identify all vulnerable people.\n   *  Simultaneously remove all vulnerable people from the network of friendships.\n   *  Repeat the process (identifying vulnerable people and removing them) until no one is vulnerable.\n   *  Count the number of people remaining.\n\nYou must answer the \"Calculate remaining people\" query for a given set of friendships. \n\n**Input:**\n\n* The first line contains two integers, $n$ and $m$ ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le m \\le 2 \\cdot 10^5$), representing the number of people and the number of friendships.\n* The next $m$ lines each contain two integers, $u$ and $v$ ($1 \\le u,v \\le n$, $u \\ne v$), representing a friendship between person $u$ and person $v$.\n* The next line contains an integer $q$ ($1 \\le q \\le 2 \\cdot 10^5$), representing the number of queries.\n* The next $q$ lines each contain a query in one of the following formats:\n    * `1 u v`: Add a friendship between person $u$ and person $v$.\n    * `2 u v`: Remove the friendship between person $u$ and person $v$.\n    * `3`: Calculate the number of remaining people.\n\n**Output:**\n\nFor each \"Calculate remaining people\" query, print a single integer representing the number of people remaining after the process described above."}, {"prompt_md5": "7172ff1d", "template_md5": "465699a0", "result": "You have a group of people. Some people are friends.  A person is vulnerable if they have at least one friend and all their friends have a higher ranking.\n\nYou can add or remove friendships.  \n\nFor each query, you need to determine the number of people remaining after repeatedly removing vulnerable people and their friends until no one is vulnerable anymore."}]}