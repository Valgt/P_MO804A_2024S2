{"uid": "1976-D", "url": "https://codeforces.com/contest/1976/problem/D", "tags": ["binary search", " combinatorics", " data structures", " divide and conquer", " implementation", " two pointers"], "title": "1976-D", "statement": "D. Invertible Bracket Sequencestime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters '1' and '+' between the original characters of the sequence. For example:bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\");bracket sequences \")(\", \"(\" and \")\" are not.Let's define theinverseof the bracket sequence as follows: replace all brackets '(' with ')', and vice versa (all brackets ')' with '('). For example, strings \"()((\" and \")())\" are inverses of each other.You are given a regular bracket sequence $$$s$$$. Calculate the number of pairs of integers $$$(l,r)$$$ ($$$1 \\\\le l \\\\le r \\\\le |s|$$$) such that if you replace the substring of $$$s$$$ from the $$$l$$$-th character to the $$$r$$$-th character (inclusive) with its inverse, $$$s$$$ will still be a regular bracket sequence.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of test cases.The only line of each test case contains a non-empty regular bracket sequence; it consists only of characters '(' and/or ')'.Additional constraint on the input: the total length of the regular bracket sequences over all test cases doesn't exceed $$$2 \\\\cdot 10^5$$$.OutputFor each test case, print a single integer — the number of pairs $$$(l,r)$$$ meeting the conditions from the statement.ExampleInput4(())()()()()(()())(())Output1 0 3 13NoteIn the first example, there is only one pair:$$$(2, 3)$$$:(())$$$\\\\rightarrow$$$()().In the second example, there are no pairs.In the third example, there are three pairs:$$$(2, 3)$$$:()()()$$$\\\\rightarrow$$$(())();$$$(4, 5)$$$:()()()$$$\\\\rightarrow$$$()(());$$$(2, 5)$$$:()()()$$$\\\\rightarrow$$$(()());", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "d423a26f", "template_md5": "35d339e4", "result": "You are given a string of parentheses, where each parenthesis is either '(' or ')'.  \n\nA valid string can be transformed into a correct mathematical expression by inserting '1' and '+' between the parentheses.\n\nThe inverse of a string is found by swapping all '(' with ')' and vice versa.\n\nFor each string, find the number of pairs of indices (l, r) where:\n\n*  1 ≤ l ≤ r ≤ length of the string\n\n*  If you replace the substring from index l to r (inclusive) with its inverse, the resulting string is still valid.\n\n\n\nOutput the count of such pairs for each input string."}, {"prompt_md5": "3a645daf", "template_md5": "465699a0", "result": "You are given a sequence of parentheses.  Find the number of pairs of positions in the sequence such that if you reverse the parentheses between those positions, the resulting sequence is still valid."}]}