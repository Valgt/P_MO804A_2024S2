{"uid": "177-D1", "url": "https://codeforces.com/contest/177/problem/D1", "tags": ["brute force"], "title": "177-D1", "statement": "D1. Encrypting Messagestime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutThe Smart Beaver from ABBYY invented a new message encryption method and now wants to check its performance. Checking it manually is long and tiresome, so he decided to ask the ABBYY Cup contestants for help.A message is a sequence ofnintegersa1,a2, ...,an. Encryption uses a key which is a sequence ofmintegersb1,b2, ...,bm(m≤n). All numbers from the message and from the key belong to the interval from0toc- 1, inclusive, and all the calculations are performed moduloc.Encryption is performed inn-m+ 1steps. On the first step we add to each numbera1,a2, ...,ama corresponding numberb1,b2, ...,bm. On the second step we add to each numbera2,a3, ...,am+ 1(changed on the previous step) a corresponding numberb1,b2, ...,bm. And so on: on step numberiwe add to each numberai,ai+ 1, ...,ai+m- 1a corresponding numberb1,b2, ...,bm. The result of the encryption is the sequencea1,a2, ...,anaftern-m+ 1steps.Help the Beaver to write a program that will encrypt messages in the described manner.InputThe first input line contains three integersn,mandc, separated by single spaces.The second input line containsnintegersai(0 ≤ai<c), separated by single spaces — the original message.The third input line containsmintegersbi(0 ≤bi<c), separated by single spaces — the encryption key.The input limitations for getting 30 points are:1 ≤m≤n≤ 1031 ≤c≤ 103The input limitations for getting 100 points are:1 ≤m≤n≤ 1051 ≤c≤ 103OutputPrintnspace-separated integers — the result of encrypting the original message.ExamplesInput4 3 21 1 1 11 1 1Output0 1 1 0Input3 1 51 2 34Output0 1 2NoteIn the first sample the encryption is performed in two steps: after the first stepa= (0, 0, 0, 1)(remember that the calculations are performed modulo 2), after the second stepa= (0, 1, 1, 0), and that is the answer.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "6989b741", "template_md5": "35d339e4", "result": "You are given a message consisting of $n$ integers $a_1, a_2, ..., a_n$ and a key consisting of $m$ integers $b_1, b_2, ..., b_m$.  Both the message and the key contain integers from 0 to $c-1$.\n\nThe message is encrypted in $n-m+1$ steps. In each step, you add the corresponding elements of the key to a segment of the message.  \n\n* Step 1: Add $b_1, b_2, ..., b_m$ to $a_1, a_2, ..., a_m$.\n* Step 2: Add $b_1, b_2, ..., b_m$ to $a_2, a_3, ..., a_{m+1}$.\n* ...\n* Step $n-m+1$: Add $b_1, b_2, ..., b_m$ to $a_{n-m+1}, a_{n-m+2}, ..., a_n$.\n\nThe result of the encryption is the sequence $a_1, a_2, ..., a_n$ after all the steps.\n\n**Input:**\n\n* The first line contains three integers $n$, $m$, and $c$.\n* The second line contains $n$ integers $a_1, a_2, ..., a_n$.\n* The third line contains $m$ integers $b_1, b_2, ..., b_m$.\n\n**Output:**\n\nPrint the $n$ integers that represent the encrypted message."}, {"prompt_md5": "de17f288", "template_md5": "465699a0", "result": "You are given a sequence of numbers and a shorter sequence of numbers.  You need to apply the shorter sequence to the longer sequence repeatedly, adding the corresponding numbers together at each step. The result of each addition is taken modulo a given value. Output the final sequence after all the additions are complete."}]}