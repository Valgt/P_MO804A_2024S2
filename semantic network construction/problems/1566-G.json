{"uid": "1566-G", "url": "https://codeforces.com/contest/1566/problem/G", "tags": ["constructive algorithms", " data structures", " graphs", " greedy", " implementation", " shortest paths"], "title": "1566-G", "statement": "G. Four Verticestime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an undirected weighted graph, consisting of $$$n$$$ vertices and $$$m$$$ edges.Some queries happen with this graph:Delete an existing edge from the graph.Add a non-existing edge to the graph.At the beginning and after each query, you should find fourdifferentvertices $$$a$$$, $$$b$$$, $$$c$$$, $$$d$$$ such that there exists a path between $$$a$$$ and $$$b$$$, there exists a path between $$$c$$$ and $$$d$$$, and the sum of lengths of two shortest paths from $$$a$$$ to $$$b$$$ and from $$$c$$$ to $$$d$$$ is minimal. The answer to the query is the sum of the lengths of these two shortest paths. The length of the path is equal to the sum of weights of edges in this path.InputThe first line contains two integers $$$n$$$ and $$$m$$$ $$$(4 \\\\le n, m \\\\le 10^5)$$$ — the number of vertices and edges in the graph respectively.Each of the next $$$m$$$ lines contain three integers $$$v$$$, $$$u$$$, $$$w$$$ ($$$1 \\\\le v, u \\\\le n, v \\\\neq u$$$, $$$1 \\\\le w \\\\le 10^9$$$) — this triple means that there is an edge between vertices $$$v$$$ and $$$u$$$ with weight $$$w$$$.The next line contains a single integer $$$q$$$ $$$(0 \\\\le q \\\\le 10^5)$$$ — the number of queries.The next $$$q$$$ lines contain the queries of two types:$$$0$$$ $$$v$$$ $$$u$$$ — this query means deleting an edge between $$$v$$$ and $$$u$$$ $$$(1 \\\\le v, u \\\\le n, v \\\\neq u)$$$. It is guaranteed that such edge exists in the graph.$$$1$$$ $$$v$$$ $$$u$$$ $$$w$$$ — this query means adding an edge between vertices $$$v$$$ and $$$u$$$ with weight $$$w$$$ ($$$1 \\\\le v, u \\\\le n, v \\\\neq u$$$, $$$1 \\\\le w \\\\le 10^9$$$). It is guaranteed that there was no such edge in the graph.It is guaranteed that the initial graph does not contain multiple edges.At the beginning and after each query, the graphdoesn't needto be connected.It is guaranteed that at each moment the number of edgeswill be at least $$$4$$$. It can be proven, that at each moment there exist some four vertices $$$a$$$, $$$b$$$, $$$c$$$, $$$d$$$ such that there exists a path between vertices $$$a$$$ and $$$b$$$, and there exists a path between vertices $$$c$$$ and $$$d$$$.OutputPrint $$$q + 1$$$ integers — the minimal sum of lengths of shortest paths between chosen pairs of vertices before the queries and after each of them.ExampleInput6 6 1 3 6 4 3 1 1 4 1 2 6 4 2 4 2 5 4 3 4 1 2 5 2 0 1 4 0 3 4 1 6 1 3Output4 3 3 7 5NoteBefore the queries you can choose vertices $$$(a, b) = (3, 2)$$$ and $$$(c, d) = (1, 4)$$$. The sum of lengths of two shortest paths is $$$3 + 1 = 4$$$.After the first query you can choose vertices $$$(a, b) = (2, 5)$$$ and $$$(c, d) = (1, 4)$$$. The sum of lengths of two shortest paths is $$$2 + 1 = 3$$$.After the second query you can choose vertices $$$(a, b) = (3, 4)$$$ and $$$(c, d) = (2, 5)$$$. The sum of lengths of two shortest paths is $$$1 + 2 = 3$$$.After the third query, you can choose vertices $$$(a, b) = (2, 6)$$$ and $$$(c, d) = (4, 5)$$$. The sum of lengths of two shortest paths is $$$4 + 3 = 7$$$.After the last query you can choose vertices $$$(a, b) = (1, 6)$$$ and $$$(c, d) = (2, 5)$$$. The sum of lengths of two shortest paths is $$$3 + 2 = 5$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "3331888f", "template_md5": "35d339e4", "result": "You are given a graph with $n$ vertices and $m$ edges. Each edge has a weight. You will be given a series of queries:\n\n* **Type 0:** Delete an existing edge between two vertices.\n* **Type 1:** Add a new edge between two vertices with a given weight.\n\nAfter each query, you need to find four distinct vertices $a$, $b$, $c$, and $d$ such that:\n\n* There is a path between vertices $a$ and $b$.\n* There is a path between vertices $c$ and $d$.\n\nThe answer to each query is the sum of the lengths of the two shortest paths: one from $a$ to $b$ and one from $c$ to $d$. The length of a path is the sum of the weights of its edges.\n\n**Input:**\n\n* The first line contains two integers $n$ and $m$ ($4 \\le n, m \\le 10^5$), the number of vertices and edges.\n* The next $m$ lines describe the edges, each with three integers $v$, $u$, and $w$ ($1 \\le v, u \\le n$, $v \\neq u$, $1 \\le w \\le 10^9$), representing an edge between vertices $v$ and $u$ with weight $w$.\n* The next line contains an integer $q$ ($0 \\le q \\le 10^5$), the number of queries.\n* The next $q$ lines describe the queries:\n    * `0 v u`: Delete the edge between vertices $v$ and $u$.\n    * `1 v u w`: Add an edge between vertices $v$ and $u$ with weight $w$.\n\n**Output:**\n\nPrint $q + 1$ integers, representing the minimum sum of shortest path lengths:\n\n* The first integer is the minimum sum before any queries.\n* The next $q$ integers are the minimum sums after each query."}, {"prompt_md5": "aaa99c0a", "template_md5": "465699a0", "result": "You are given a network of connected points with varying distances between them. You can add or remove connections between points. After each change, find four different points where there are paths between each pair and output the shortest distance between each pair."}]}