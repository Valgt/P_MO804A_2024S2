{"uid": "1685-D2", "url": "https://codeforces.com/contest/1685/problem/D2", "tags": ["constructive algorithms", " greedy"], "title": "1685-D2", "statement": "D2. Permutation Weight (Hard Version)time limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is a hard version of the problem. The difference between the easy and hard versions is that in this version, you have to output the lexicographically smallest permutation with the smallest weight.You are given a permutation $$$p_1, p_2, \\\\ldots, p_n$$$ of integers from $$$1$$$ to $$$n$$$.Let's define the weight of the permutation $$$q_1, q_2, \\\\ldots, q_n$$$ of integers from $$$1$$$ to $$$n$$$ as $$$$$$|q_1 - p_{q_{2}}| + |q_2 - p_{q_{3}}| + \\\\ldots + |q_{n-1} - p_{q_{n}}| + |q_n - p_{q_{1}}|$$$$$$You want your permutation to be as lightweight as possible. Among the permutations $$$q$$$ with the smallest possible weight, find the lexicographically smallest.Permutation $$$a_1, a_2, \\\\ldots, a_n$$$ is lexicographically smaller than permutation $$$b_1, b_2, \\\\ldots, b_n$$$, if there exists some $$$1 \\\\le i \\\\le n$$$ such that $$$a_j = b_j$$$ for all $$$1 \\\\le j < i$$$ and $$$a_i<b_i$$$.InputThe first line of the input contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 100$$$)  — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$2 \\\\le n \\\\le 200$$$)  — the size of the permutation.The second line of each test case contains $$$n$$$ integers $$$p_1, p_2, \\\\ldots, p_n$$$ ($$$1 \\\\le p_i \\\\le n$$$, all $$$p_i$$$ are distinct)  — the elements of the permutation.The sum of $$$n$$$ over all test cases doesn't exceed $$$400$$$.OutputFor each test case, output $$$n$$$ integers $$$q_1, q_2, \\\\ldots, q_n$$$ ($$$1 \\\\le q_i \\\\le n$$$, all $$$q_i$$$ are distinct)  — the lexicographically smallest permutation with the smallest weight.ExampleInput322 142 3 1 455 4 3 2 1Output1 2  1 3 4 2  1 3 4 2 5NoteIn the first test case, there are two permutations of length $$$2$$$: $$$(1, 2)$$$ and $$$(2, 1)$$$. Permutation $$$(1, 2)$$$ has weight $$$|1 - p_2| + |2 - p_1| = 0$$$, and the permutation $$$(2, 1)$$$ has the same weight: $$$|2 - p_1| + |1 - p_2| = 0$$$. In this version, you have to output the lexicographically smaller of them  — $$$(1, 2)$$$.In the second test case, the weight of the permutation $$$(1, 3, 4, 2)$$$ is $$$|1 - p_3| + |3 - p_4| + |4 - p_2| + |2 - p_1| = |1 - 1| + |3 - 4| + |4 - 3| + |2 - 2| = 2$$$. There are no permutations with smaller weights.In the third test case, the weight of the permutation $$$(1, 3, 4, 2, 5)$$$ is $$$|1 - p_3| + |3 - p_4| + |4 - p_2| + |2 - p_5| + |5 - p_1| = |1 - 3| + |3 - 2| + |4 - 4| + |2 - 1| + |5 - 5| = 4$$$. There are no permutations with smaller weights.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "3fd436af", "template_md5": "35d339e4", "result": "You are given a permutation of numbers from 1 to *n*.  A permutation is a way to order the numbers.\n\nThe weight of a permutation is calculated as follows:\n\n*  For each number in the permutation, find the number at its corresponding position in the original permutation.\n*  Calculate the absolute difference between these two numbers.\n*  Sum up all these differences.\n\nYou need to find the permutation with the smallest possible weight.  If there are multiple permutations with the same smallest weight, you need to output the one that comes first alphabetically. \n\n**Input:**\n\n* The first line contains the number of test cases *t*.\n* For each test case:\n    * The first line contains the size of the permutation *n*.\n    * The second line contains the *n* numbers of the permutation.\n\n**Output:**\n\n* For each test case, output the *n* numbers of the lexicographically smallest permutation with the smallest weight."}, {"prompt_md5": "f5f25ac8", "template_md5": "465699a0", "result": "You are given a list of numbers.  You need to rearrange this list into a new list. The goal is to find the rearrangement that results in the smallest possible sum of differences between each number and the number at its corresponding position in the original list.  Out of all the rearrangements that have the smallest sum, you need to find the one that comes first alphabetically."}]}