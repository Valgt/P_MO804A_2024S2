{"uid": "1670-E", "url": "https://codeforces.com/contest/1670/problem/E", "tags": ["bitmasks", " constructive algorithms", " dfs and similar", " trees"], "title": "1670-E", "statement": "E. Hemose on the Treetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputAfter the last regional contest, Hemose and his teammates finally qualified to the ICPC World Finals, so for this great achievement and his love of trees, he gave you this problem as the name of his team \"Hemose 3al shagra\" (Hemose on the tree).You are given a tree of $$$n$$$ vertices where $$$n$$$ is a power of $$$2$$$. You have to give each node and edge an integer value in the range $$$[1,2n -1]$$$ (inclusive), where all the values are distinct.After giving each node and edge a value, you should select some root for the tree such that the maximum cost of any simple path starting from the root and ending at anynode or edgeis minimized.The cost of the path between two nodes $$$u$$$ and $$$v$$$ or any node $$$u$$$ and edge $$$e$$$ is defined as thebitwise XORof all the node's and edge's values between them, including the endpoints (note that in a tree there is only one simple path between two nodes or between a node and an edge).InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 5\\\\cdot 10^4$$$) — the number of test cases. Then $$$t$$$ test cases follow.The first line of each test case contains a single integer $$$p$$$ ($$$1 \\\\le p \\\\le 17$$$), where $$$n$$$ (the number of vertices in the tree) is equal to $$$2^p$$$.Each of the next $$$n−1$$$ lines contains two integers $$$u$$$ and $$$v$$$ ($$$1 \\\\le u,v \\\\le n$$$) meaning that there is an edge between the vertices $$$u$$$ and $$$v$$$ in the tree.It is guaranteed that the given graph is a tree.It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$3\\\\cdot 10^5$$$.OutputFor each test case on the first line print the chosen root.On the second line, print $$$n$$$ integers separated by spaces, where the $$$i$$$-th integer represents the chosen value for the $$$i$$$-th node.On the third line, print $$$n-1$$$ integers separated by spaces, where the $$$i$$$-th integer represents the chosen value for the $$$i$$$-th edge. The edges are numerated in the order of their appearance in the input data.If there are multiple solutions, you may output any.ExampleInput221 22 33 431 22 33 41 51 65 75 8Output3 5 1 3 6 4 2 7 5 1 2 8 11 4 13 9 15 6 14 3 7 10 5 12NoteThe tree in the first test case with the weights of all nodes and edges is shown in the picture.The costs of all paths are:$$$3$$$;$$$3\\\\oplus 7=4$$$;$$$3\\\\oplus 7\\\\oplus 6=2$$$;$$$3\\\\oplus 2=1$$$;$$$3\\\\oplus 2\\\\oplus 1=0$$$;$$$3\\\\oplus 2\\\\oplus 1\\\\oplus 4=4$$$;$$$3\\\\oplus 2\\\\oplus 1\\\\oplus 4\\\\oplus 5=1$$$.The maximum cost of all these paths is $$$4$$$. We can show that it is impossible to assign the values and choose the root differently to achieve a smaller maximum cost of all paths.The tree in the second test case:", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "7c7aa254", "template_md5": "465699a0", "result": "You are given a tree with a specific number of nodes (a power of 2). You need to assign a unique number to each node and edge in the tree, from 1 to twice the number of nodes minus 1.  Then, you need to choose a starting point (root) in the tree. The goal is to minimize the maximum sum of the numbers along any path from the root to any node or edge in the tree.  The sum is calculated by taking the bitwise XOR of all the numbers along the path. \n\n\nYou need to output the chosen root and the assigned numbers for each node and edge."}, {"prompt_md5": "fcadc7d5", "template_md5": "35d339e4", "result": "You are given a tree with $n$ vertices, where $n$ is a power of 2.  You need to assign a distinct integer value between 1 and $2n-1$ to each node and edge of the tree.  \n\nThen, you need to choose a root node in the tree. The goal is to minimize the maximum cost of any simple path in the tree.\n\nThe cost of a path between two nodes $u$ and $v$ or between a node $u$ and an edge $e$ is the bitwise XOR of all the node and edge values along that path, including the endpoints.\n\nFor each test case, output:\n\n1. The chosen root node.\n2. The assigned values for each node.\n3. The assigned values for each edge.\n\n\n\nLet me know if you'd like me to elaborate on any part of the problem statement."}]}