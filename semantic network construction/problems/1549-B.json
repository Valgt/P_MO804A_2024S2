{"uid": "1549-B", "url": "https://codeforces.com/contest/1549/problem/B", "tags": ["dfs and similar", " dp", " flows", " graph matchings", " graphs", " greedy", " implementation"], "title": "1549-B", "statement": "B. Gregor and the Pawn Gametime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere is a chessboard of size $$$n$$$ by $$$n$$$. The square in the $$$i$$$-th row from top and $$$j$$$-th column from the left is labelled $$$(i,j)$$$.Currently, Gregor has some pawns in the $$$n$$$-th row. There are also enemy pawns in the $$$1$$$-st row. On one turn, Gregor moves one ofhispawns. A pawn can move one square up (from $$$(i,j)$$$ to $$$(i-1,j)$$$) if there is no pawn in the destination square. Additionally, a pawn can move one square diagonally up (from $$$(i,j)$$$ to either $$$(i-1,j-1)$$$ or $$$(i-1,j+1)$$$) if and only if there is an enemy pawn in that square. The enemy pawn is also removed.Gregor wants to know what is the maximum number of his pawns that can reach row $$$1$$$?Note that only Gregor takes turns in this game, andthe enemy pawns never move. Also, when Gregor's pawn reaches row $$$1$$$, it is stuck and cannot make any further moves.InputThe first line of the input contains one integer $$$t$$$ ($$$1\\\\le t\\\\le 2\\\\cdot 10^4$$$) — the number of test cases. Then $$$t$$$ test cases follow.Each test case consists of three lines. The first line contains a single integer $$$n$$$ ($$$2\\\\le n\\\\le 2\\\\cdot{10}^{5}$$$) — the size of the chessboard.The second line consists of a string of binary digits of length $$$n$$$, where a $$$1$$$ in the $$$i$$$-th position corresponds to an enemy pawn in the $$$i$$$-th cell from the left, and $$$0$$$ corresponds to an empty cell.The third line consists of a string of binary digits of length $$$n$$$, where a $$$1$$$ in the $$$i$$$-th position corresponds to a Gregor's pawn in the $$$i$$$-th cell from the left, and $$$0$$$ corresponds to an empty cell.It is guaranteed that the sum of $$$n$$$ across all test cases is less than $$$2\\\\cdot{10}^{5}$$$.OutputFor each test case, print one integer: themaximumnumber of Gregor's pawns which can reach the $$$1$$$-st row.ExampleInput4 3 000 111 4 1111 1111 3 010 010 5 11001 00000Output3 4 0 0NoteIn the first example, Gregor can simply advance all $$$3$$$ of his pawns forward. Thus, the answer is $$$3$$$.In the second example, Gregor can guarantee that all $$$4$$$ of his pawns reach the enemy row, by following the colored paths as demonstrated in the diagram below. Remember, only Gregor takes turns in this \"game\"!In the third example, Gregor's only pawn is stuck behind the enemy pawn, and cannot reach the end.In the fourth example, Gregor has no pawns, so the answer is clearly $$$0$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "187905bd", "template_md5": "35d339e4", "result": "You are given a chessboard of size $n \\times n$. There are pawns in the $n$th row and enemy pawns in the 1st row.  \n\nOn each turn, you can move one of your pawns:\n\n* One square up (from $(i,j)$ to $(i-1,j)$) if the destination is empty.\n* One square diagonally up (from $(i,j)$ to $(i-1,j-1)$ or $(i-1,j+1)$) if there is an enemy pawn in that square. The enemy pawn is removed.\n\nYour goal is to find the maximum number of your pawns that can reach the 1st row. \n\n**Input:**\n\n* The first line contains the number of test cases, $t$.\n* For each test case:\n    * The first line contains the size of the chessboard, $n$.\n    * The second line contains a binary string of length $n$ representing the enemy pawns (1 for pawn, 0 for empty).\n    * The third line contains a binary string of length $n$ representing your pawns (1 for pawn, 0 for empty).\n\n**Output:**\n\nFor each test case, print the maximum number of your pawns that can reach the 1st row."}, {"prompt_md5": "9a36fedf", "template_md5": "465699a0", "result": "You have a grid of squares. Some squares have pieces on them.  You can move your pieces up one square or diagonally up to an occupied square, removing the other piece.  What is the maximum number of your pieces that can reach the top row?"}]}