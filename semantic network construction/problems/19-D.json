{"uid": "19-D", "url": "https://codeforces.com/contest/19/problem/D", "tags": ["data structures"], "title": "19-D", "statement": "D. Pointstime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutPete and Bob invented a new interesting game. Bob takes a sheet of paper and locates a Cartesian coordinate system on it as follows: point(0, 0)is located in the bottom-left corner,Oxaxis is directed right,Oyaxis is directed up. Pete gives Bob requests of three types:add x y— on the sheet of paper Bob marks a point with coordinates(x,y). For each request of this type it's guaranteed that point(x,y)is not yet marked on Bob's sheet at the time of the request.remove x y— on the sheet of paper Bob erases the previously marked point with coordinates(x,y). For each request of this type it's guaranteed that point(x,y)is already marked on Bob's sheet at the time of the request.find x y— on the sheet of paper Bob finds all the marked points, lying strictly above and strictly to the right of point(x,y). Among these points Bob chooses the leftmost one, if it is not unique, he chooses the bottommost one, and gives its coordinates to Pete.Bob managed to answer the requests, when they were 10, 100 or 1000, but when their amount grew up to2·105, Bob failed to cope. Now he needs a program that will answer all Pete's requests. Help Bob, please!InputThe first input line contains numbern(1 ≤n≤ 2·105) — amount of requests. Then there follownlines — descriptions of the requests.add x ydescribes the request to add a point,remove x y— the request to erase a point,find x y— the request to find the bottom-left point. All the coordinates in the input file are non-negative and don't exceed109.OutputFor each request of typefind x youtput in a separate line the answer to it — coordinates of the bottommost among the leftmost marked points, lying strictly above and to the right of point(x,y). If there are no points strictly above and to the right of point(x,y), output-1.ExamplesInput7add 1 1add 3 4find 0 0remove 1 1find 0 0add 1 1find 0 0Output1 13 41 1Input13add 5 5add 5 6add 5 7add 6 5add 6 6add 6 7add 7 5add 7 6add 7 7find 6 6remove 7 7find 6 6find 4 4Output7 7-15 5", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "cec6a3f9", "template_md5": "35d339e4", "result": "You are given a 2D coordinate system.  There are three types of operations:\n\n1. **add x y**: Add a point at coordinates ($x$, $y$).\n2. **remove x y**: Remove the point at coordinates ($x$, $y$).\n3. **find x y**: Find the bottom-leftmost point that is both strictly above and to the right of the point at coordinates ($x$, $y$). If there are no such points, output -1.\n\nProcess a series of these operations and output the result for each \"find\" operation."}, {"prompt_md5": "52011808", "template_md5": "465699a0", "result": "A program processes a list of commands. Commands can be:\n\n* **add x y:** Mark a point on a grid at coordinates (x, y).\n* **remove x y:** Remove the point at coordinates (x, y).\n* **find x y:** Find the bottom-most, left-most point on the grid that is both above and to the right of the point (x, y). If no such point exists, return -1."}]}