{"uid": "1140-B", "url": "https://codeforces.com/contest/1140/problem/B", "tags": ["implementation", " strings"], "title": "1140-B", "statement": "B. Good Stringtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou have a string $$$s$$$ of length $$$n$$$ consisting of only characters>and<. You may do some operations with this string, for each operation you have to choose some character that still remains in the string. If you choose a character>, the character that comes right after it is deleted (if the character you chose was the last one, nothing happens). If you choose a character<, the character that comes right before it is deleted (if the character you chose was the first one, nothing happens).For example, if we choose character>in string>>< >, the string will become to> > >. And if we choose character<in string><, the string will become to<.The string is good if there is a sequence of operations such that after performing it only one character will remain in the string. For example, the strings>,> >are good.Before applying the operations, you may remove any number of characters from the given string (possibly none, possibly up to $$$n - 1$$$, but not the whole string). You need to calculate the minimum number of characters to be deleted from string $$$s$$$ so that it becomes good.InputThe first line contains one integer $$$t$$$ ($$$1 \\\\le t \\\\le 100$$$) – the number of test cases. Each test case is represented by two lines.The first line of $$$i$$$-th test case contains one integer $$$n$$$ ($$$1 \\\\le n \\\\le 100$$$) – the length of string $$$s$$$.The second line of $$$i$$$-th test case contains string $$$s$$$, consisting of only characters>and<.OutputFor each test case print one line.For $$$i$$$-th test case print the minimum number of characters to be deleted from string $$$s$$$ so that it becomes good.ExampleInput3 2 <> 3 ><< 1 >Output1 0 0NoteIn the first test case we can delete any character in string<>.In the second test case we don't need to delete any characters. The string> < <is good, because we can perform the following sequence of operations:><<$$$\\\\rightarrow$$$<<$$$\\\\rightarrow$$$<.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "249fdc9a", "template_md5": "35d339e4", "result": "You are given a string of characters '>' and '<'. You can perform operations on the string:\n\n* Choosing a '>' deletes the character to its right (if it exists).\n* Choosing a '<' deletes the character to its left (if it exists).\n\nYou can also remove any number of characters from the string before performing operations.\n\nDetermine the minimum number of characters you need to remove from the string so that you can perform a sequence of operations that leaves only one character remaining."}, {"prompt_md5": "543cc772", "template_md5": "465699a0", "result": "You are given a string of \">\" and \"<\" characters. You can delete characters from the string and perform operations:\n\n* Choosing \">\" deletes the next character.\n* Choosing \"<\" deletes the previous character.\n\nThe goal is to find the fewest characters you need to delete so that you can eventually be left with only one character in the string using these operations."}]}