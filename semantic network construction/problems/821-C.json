{"uid": "821-C", "url": "https://codeforces.com/contest/821/problem/C", "tags": ["data structures", " greedy", " trees"], "title": "821-C", "statement": "C. Okabe and Boxestime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputOkabe and Super Hacker Daru are stacking and removing boxes. There arenboxes numbered from1ton. Initially there are no boxes on the stack.Okabe, being a control freak, gives Daru2ncommands:nof which are to add a box to the top of the stack, andnof which are to remove a box from the top of the stack and throw it in the trash. Okabe wants Daru to throw away the boxes in the order from1ton. Of course, this means that it might be impossible for Daru to perform some of Okabe'sremovecommands, because the required box is not on the top of the stack.That's why Daru can decide to wait until Okabe looks away and then reorder the boxes in the stack in any way he wants. He can do it at any point of time between Okabe's commands, but he can't add or remove boxes while he does it.Tell Daru the minimum number of times he needs to reorder the boxes so that he can successfully complete all of Okabe's commands. It is guaranteed that every box is added before it is required to be removed.InputThe first line of input contains the integern(1 ≤n≤ 3·105) — the number of boxes.Each of the next2nlines of input starts with a string \"add\" or \"remove\". If the line starts with the \"add\", an integerx(1 ≤x≤n) follows, indicating that Daru should add the box with numberxto the top of the stack.It is guaranteed that exactlynlines contain \"add\" operations, all the boxes added are distinct, andnlines contain \"remove\" operations. It is also guaranteed that a box is always added before it is required to be removed.OutputPrint the minimum number of times Daru needs to reorder the boxes to successfully complete all of Okabe's commands.ExamplesInput3add 1removeadd 2add 3removeremoveOutput1Input7add 3add 2add 1removeadd 4removeremoveremoveadd 6add 7add 5removeremoveremoveOutput2NoteIn the first sample, Daru should reorder the boxes after adding box3to the stack.In the second sample, Daru should reorder the boxes after adding box4and box7to the stack.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "88088fe9", "template_md5": "35d339e4", "result": "You are given a sequence of $2n$ commands, where $n$ is the number of boxes. Each command is either \"add $x$\" or \"remove\".  \"add $x$\" means to add box $x$ to the top of a stack, and \"remove\" means to remove the top box from the stack.\n\nThe goal is to determine the minimum number of times you need to rearrange the boxes in the stack to ensure that all \"remove\" commands can be successfully executed, given that a box must be removed in the order it was added. \n\nYou can rearrange the boxes at any time between commands, but not while executing a command."}, {"prompt_md5": "eb9acf4f", "template_md5": "465699a0", "result": "You are given a sequence of \"add\" and \"remove\" commands.  \"Add\" commands specify a number to be placed on top of a stack, and \"remove\" commands specify a number to be taken from the top of the stack.  You can rearrange the stack at any time before a \"remove\" command, but not during the execution of the commands. Find the minimum number of times you need to rearrange the stack to successfully complete all the commands."}]}