{"uid": "1766-C", "url": "https://codeforces.com/contest/1766/problem/C", "tags": ["dp", " implementation"], "title": "1766-C", "statement": "C. Hamiltonian Walltime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputSir Monocarp Hamilton is planning to paint his wall. The wall can be represented as a grid, consisting of $$$2$$$ rows and $$$m$$$ columns. Initially, the wall is completely white.Monocarp wants to paint a black picture on the wall. In particular, he wants cell $$$(i, j)$$$ (the $$$j$$$-th cell in the $$$i$$$-th row) to be colored black, if $$$c_{i, j} =$$$ 'B', and to be left white, if $$$c_{i, j} =$$$ 'W'. Additionally, he wants each column to have at least one black cell, so, for each $$$j$$$, the following constraint is satisfied: $$$c_{1, j}$$$, $$$c_{2, j}$$$ or both of them will be equal to 'B'.In order for the picture to turn out smooth, Monocarp wants to place down a paint brush in some cell $$$(x_1, y_1)$$$ and move it along the path $$$(x_1, y_1), (x_2, y_2), \\\\dots, (x_k, y_k)$$$ so that:for each $$$i$$$, $$$(x_i, y_i)$$$ and $$$(x_{i+1}, y_{i+1})$$$ share a common side;all black cells appear in the pathexactly once;white cells don't appear in the path.Determine if Monocarp can paint the wall.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of testcases.The first line of each testcase contains a single integer $$$m$$$ ($$$1 \\\\le m \\\\le 2 \\\\cdot 10^5$$$) — the number of columns in the wall.The $$$i$$$-th of the next two lines contains a string $$$c_i$$$, consisting of $$$m$$$ characters, where each character is either 'B' or 'W'. $$$c_{i, j}$$$ is 'B', if the cell $$$(i, j)$$$ should be colored black, and 'W', if the cell $$$(i, j)$$$ should be left white.Additionally, for each $$$j$$$, the following constraint is satisfied: $$$c_{1, j}$$$, $$$c_{2, j}$$$ or both of them are equal to 'B'.The sum of $$$m$$$ over all testcases doesn't exceed $$$2 \\\\cdot 10^5$$$.OutputFor each testcase, print \"YES\" if Monocarp can paint a wall. Otherwise, print \"NO\".ExampleInput63WBBBBW1BB5BWBWBBBBBB2BWWB5BBBBWBWBBB6BWBBWBBBBBBBOutputYES YES NO NO NO YESNoteIn the first testcase, Monocarp can follow a path $$$(2, 1)$$$, $$$(2, 2)$$$, $$$(1, 2)$$$, $$$(1, 3)$$$ with his brush. All black cells appear in the path exactly once, no white cells appear in the path.In the second testcase, Monocarp can follow a path $$$(1, 1)$$$, $$$(2, 1)$$$.In the third testcase:the path $$$(1, 1)$$$, $$$(2, 1)$$$, $$$(2, 2)$$$, $$$(2, 3)$$$, $$$(1, 3)$$$, $$$(2, 4)$$$, $$$(2, 5)$$$, $$$(1, 5)$$$ doesn't suffice because a pair of cells $$$(1, 3)$$$ and $$$(2, 4)$$$ doesn't share a common side;the path $$$(1, 1)$$$, $$$(2, 1)$$$, $$$(2, 2)$$$, $$$(2, 3)$$$, $$$(1, 3)$$$, $$$(2, 3)$$$, $$$(2, 4)$$$, $$$(2, 5)$$$, $$$(1, 5)$$$ doesn't suffice because cell $$$(2, 3)$$$ is visited twice;the path $$$(1, 1)$$$, $$$(2, 1)$$$, $$$(2, 2)$$$, $$$(2, 3)$$$, $$$(2, 4)$$$, $$$(2, 5)$$$, $$$(1, 5)$$$ doesn't suffice because a black cell $$$(1, 3)$$$ doesn't appear in the path;the path $$$(1, 1)$$$, $$$(2, 1)$$$, $$$(2, 2)$$$, $$$(2, 3)$$$, $$$(2, 4)$$$, $$$(2, 5)$$$, $$$(1, 5)$$$, $$$(1, 4)$$$, $$$(1, 3)$$$ doesn't suffice because a white cell $$$(1, 4)$$$ appears in the path.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "15df0994", "template_md5": "35d339e4", "result": "You are given a grid of size $2 \\times m$ where each cell can be either 'B' (black) or 'W' (white).  \n\nYou need to determine if it's possible to paint a picture on the grid following these rules:\n\n* Each column must have at least one black cell.\n* You start at a cell and move to an adjacent cell (horizontally or vertically) in a path.\n* You must visit every black cell exactly once.\n* You cannot visit any white cells.\n\nIf it's possible to paint the picture according to these rules, output \"YES\". Otherwise, output \"NO\"."}, {"prompt_md5": "ffc2a28a", "template_md5": "465699a0", "result": "You are given a grid of cells, some black and some white.  You must find a path that visits every black cell exactly once, and only moves between cells that share a side.  Can you do this?"}]}