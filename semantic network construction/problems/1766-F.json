{"uid": "1766-F", "url": "https://codeforces.com/contest/1766/problem/F", "tags": ["flows"], "title": "1766-F", "statement": "F. MCFtime limit per test4 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou are given a graph consisting of $$$n$$$ vertices and $$$m$$$ directed arcs. The $$$i$$$-th arc goes from the vertex $$$x_i$$$ to the vertex $$$y_i$$$, has capacity $$$c_i$$$ and weight $$$w_i$$$. No arc goes into the vertex $$$1$$$, and no arc goes from the vertex $$$n$$$. There are no cycles of negative weight in the graph (it is impossible to travel from any vertex to itself in such a way that the total weight of all arcs you go through is negative).You have to assign each arc a flow (an integer between $$$0$$$ and its capacity, inclusive). For every vertexexcept $$$1$$$ and $$$n$$$, the total flow on the arcs going to this vertex must be equal to the total flow on the arcs going from that vertex. Let the flow on the $$$i$$$-th arc be $$$f_i$$$, then the cost of the flow is equal to $$$\\\\sum \\\\limits_{i = 1}^{m} f_i w_i$$$. You have to find a flow whichminimizesthe cost.Sounds classical, right? Well, we have some additional constraints on the flow on every edge:if $$$c_i$$$ is even, $$$f_i$$$ must be even;if $$$c_i$$$ is odd, $$$f_i$$$ must be odd.Can you solve this problem?InputThe first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\\\le n \\\\le 100$$$; $$$1 \\\\le m \\\\le 200$$$).Then $$$m$$$ lines follow. The $$$i$$$-th of them contains four integers $$$x_i$$$, $$$y_i$$$, $$$c_i$$$, and $$$w_i$$$ ($$$1 \\\\le x_i \\\\le n - 1$$$; $$$2 \\\\le y_i \\\\le n$$$; $$$x_i \\\\ne y_i$$$; $$$1 \\\\le c_i \\\\le 100$$$; $$$-100 \\\\le w_i \\\\le 100$$$). These integers describe the $$$i$$$-th arc.Additional constraints on the input:there are no negative cycles in the graph.OutputIf a flow satisfying all of the constraints does not exist, printImpossible.Otherwise, print two lines:the first line should contain one wordPossible;the second line should contain $$$m$$$ integers $$$f_1, f_2, \\\\dots, f_m$$$.If there are multiple answers, print any of them. Note that the cost of the flow should be minimized.ExamplesInput3 3 1 2 3 -10 1 2 3 -15 2 3 2 0OutputPossible 1 1 2Input3 3 1 2 3 -10 1 2 3 -15 2 3 3 0OutputImpossibleInput3 3 1 2 3 -10 1 2 3 -15 2 3 4 0OutputPossible 1 3 4Input6 7 5 6 9 -40 1 2 3 -10 1 4 5 20 4 5 7 30 2 5 1 -15 1 3 3 5 3 5 3 0OutputPossible 5 1 1 1 1 3 3", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "2c3da8e6", "template_md5": "35d339e4", "result": "You are given a directed graph with $n$ vertices and $m$ edges. Each edge has a capacity $c_i$ and a weight $w_i$.  No edges go into vertex 1 or out of vertex $n$.  \n\nYou need to assign a flow to each edge, where the flow is an integer between 0 and the edge's capacity.  The flow into each vertex (except 1 and $n$) must equal the flow out of that vertex. The cost of the flow is the sum of the products of each edge's flow and its weight.\n\nThere are additional constraints on the flow:\n\n* If the capacity of an edge is even, its flow must also be even.\n* If the capacity of an edge is odd, its flow must also be odd.\n\nFind a flow that minimizes the cost. If no such flow exists, output \"Impossible\". Otherwise, output \"Possible\" followed by the flow values for each edge."}, {"prompt_md5": "5e6abdbc", "template_md5": "465699a0", "result": "You have a network of one-way connections with capacities and weights.  Each connection can have a flow of a certain amount. The total flow into a node (except the start and end nodes) must equal the total flow out of that node.  \n\nYou need to find the flow that minimizes the total weight of the flow, while also ensuring that the flow on each connection is either even or odd depending on the connection's capacity. \n\n\nIf no such flow exists, say \"Impossible\"."}]}