{"uid": "804-C", "url": "https://codeforces.com/contest/804/problem/C", "tags": ["constructive algorithms", " dfs and similar", " greedy"], "title": "804-C", "statement": "C. Ice cream coloringtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputIsart and Modsart were trying to solve an interesting problem when suddenly Kasra arrived. Breathless, he asked: \"Can you solve a problem I'm stuck at all day?\"We have a treeTwithnvertices andmtypes of ice cream numerated from1tom. Each vertexihas a set ofsitypes of ice cream. Vertices which have thei-th (1 ≤i≤m) type of ice cream form a connected subgraph. We build a new graphGwithmvertices. We put an edge between thev-th and theu-th (1 ≤u,v≤m,u≠v) vertices inGif and only if there exists a vertex inTthat has both thev-th and theu-th types of ice cream in its set. The problem is to paint the vertices ofGwith minimum possible number of colors in a way that no adjacent vertices have the same color.Please note that we consider that empty set of vertices form a connected subgraph in this problem.As usual, Modsart don't like to abandon the previous problem, so Isart wants you to solve the new problem.InputThe first line contains two integernandm(1 ≤n,m≤ 3·105) — the number of vertices inTand the number of ice cream types.nlines follow, thei-th of these lines contain single integersi(0 ≤si≤ 3·105) and thensidistinct integers, each between1andm— the types of ice cream in thei-th vertex. The sum ofsidoesn't exceed5·105.n- 1lines follow. Each of these lines describes an edge of the tree with two integersuandv(1 ≤u,v≤n) — the indexes of connected by this edge vertices.OutputPrint single integercin the first line — the minimum number of colors to paint the vertices in graphG.In the second line printmintegers, thei-th of which should be the color of thei-th vertex. The colors should be between1andc. If there are some answers, print any of them.ExamplesInput3 31 12 2 31 21 22 3Output21 1 2Input4 501 11 33 2 4 52 13 24 3Output31 1 1 2 3NoteIn the first example the first type of ice cream is present in the first vertex only, so we can color it in any color. The second and the third ice cream are both presented in the second vertex, so we should paint them in different colors.In the second example the colors of the second, the fourth and the fifth ice cream should obviously be distinct.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "ab37b01b", "template_md5": "35d339e4", "result": "You are given a tree with $n$ vertices and $m$ types of ice cream. Each vertex has a set of ice cream types. Vertices with the same ice cream type form a connected subgraph.\n\nA new graph $G$ is created with $m$ vertices. There is an edge between vertices $u$ and $v$ in $G$ if and only if there exists a vertex in the tree that has both the $u$-th and $v$-th types of ice cream.\n\nThe problem is to color the vertices of graph $G$ with the minimum number of colors such that no adjacent vertices have the same color.\n\n**Input:**\n\n* The first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 3 \\cdot 10^5$) - the number of vertices in the tree and the number of ice cream types.\n* The next $n$ lines describe the vertices of the tree. The $i$-th line contains an integer $s_i$ ( $0 \\le s_i \\le 3 \\cdot 10^5$) and then $s_i$ distinct integers between 1 and $m$ - the types of ice cream in the $i$-th vertex.\n* The next $n-1$ lines describe the edges of the tree with two integers $u$ and $v$ ( $1 \\le u, v \\le n$) - the indexes of connected vertices.\n\n**Output:**\n\n* Print a single integer $c$ - the minimum number of colors.\n* Print $m$ integers, the $i$-th of which should be the color of the $i$-th vertex in graph $G$. The colors should be between 1 and $c$."}, {"prompt_md5": "b1c3b578", "template_md5": "465699a0", "result": "You are given a tree with nodes, each node having a set of colors.  A new graph is created where nodes represent colors, and an edge exists between two color nodes if there is a node in the tree with both of those colors.  Find the minimum number of colors needed to color the nodes in the new graph so that no adjacent nodes have the same color."}]}