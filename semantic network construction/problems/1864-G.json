{"uid": "1864-G", "url": "https://codeforces.com/contest/1864/problem/G", "tags": ["combinatorics", " constructive algorithms", " implementation"], "title": "1864-G", "statement": "G. Magic Squaretime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputAquamoon has a Rubik's Square which can be seen as an $$$n \\\\times n$$$ matrix, the elements of the matrix constitute a permutation of numbers $$$1, \\\\ldots, n^2$$$.Aquamoon can perform two operations on the matrix:Row shift, i.e. shift an entire row of the matrix several positions (at least $$$1$$$ and at most $$$n-1$$$) to the right. The elements that come out of the right border of the matrix are moved to the beginning of the row. For example, shifting a row $$$\\\\begin{pmatrix} a & b & c \\\\end{pmatrix}$$$ by $$$2$$$ positions would result in $$$\\\\begin{pmatrix} b & c & a \\\\end{pmatrix}$$$;Column shift, i.e. shift an entire column of the matrix several positions (at least $$$1$$$ and at most $$$n-1$$$) downwards. The elements that come out of the lower border of the matrix are moved to the beginning of the column. For example, shifting a column $$$\\\\begin{pmatrix} a \\\\\\\\ b \\\\\\\\ c \\\\end{pmatrix}$$$ by $$$2$$$ positions would result in $$$\\\\begin{pmatrix} b\\\\\\\\c\\\\\\\\a \\\\end{pmatrix}$$$.The rows are numbered from $$$1$$$ to $$$n$$$ from top to bottom, the columns are numbered from $$$1$$$ to $$$n$$$ from left to right. The cell at the intersection of the $$$x$$$-th row and the $$$y$$$-th column is denoted as $$$(x, y)$$$.Aquamoon can perform several (possibly, zero) operations, but she has to obey the following restrictions:each row and each column can be shifted at most once;each integer of the matrix can be moved at most twice;the offsets of any two integers moved twice cannot be the same. Formally, if integers $$$a$$$ and $$$b$$$ have been moved twice, assuming $$$a$$$ has changed its position from $$$(x_1,y_1)$$$ to $$$(x_2,y_2)$$$, and $$$b$$$ has changed its position from $$$(x_3,y_3)$$$ to $$$(x_4,y_4)$$$, then $$$x_2-x_1 \\\\not\\\\equiv x_4-x_3 \\\\pmod{n}$$$ or $$$y_2-y_1 \\\\not\\\\equiv y_4-y_3 \\\\pmod{n}$$$.Aquamoon wonders in how many ways she can transform the Rubik's Square from the given initial state to a given target state. Two ways are considered different if the sequences of applied operations are different. Since the answer can be very large, print the result modulo $$$998\\\\,244\\\\,353$$$.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 2\\\\cdot 10^4$$$). The description of the test cases follows.The first line of each test case contains an integer $$$n$$$ ($$$3\\\\le n \\\\le 500$$$).The $$$i$$$-th of the following $$$n$$$ lines contains $$$n$$$ integers $$$a_{i1}, \\\\ldots, a_{in}$$$, representing the $$$i$$$-th row of the initial matrix ($$$1 \\\\le a_{ij} \\\\le n^2$$$).The $$$i$$$-th of the following $$$n$$$ lines contains $$$n$$$ integers $$$b_{i1}, \\\\ldots, b_{in}$$$, representing the $$$i$$$-th row of the target matrix ($$$1 \\\\le b_{ij} \\\\le n^2$$$).It is guaranteed that both the elements of the initial matrix and the elements of the target matrix constitute a permutation of numbers $$$1, \\\\ldots, n^2$$$.It is guaranteed that the sum of $$$n^2$$$ over all test cases does not exceed $$$250\\\\,000$$$.OutputFor each test case, if it is possible to convert the initial state to the target state respecting all the restrictions, output one integer — the number of ways to do so, modulo $$$998\\\\,244\\\\,353$$$.If there is no solution, print a single integer $$$0$$$.ExampleInput431 2 34 5 67 8 97 2 31 4 56 8 931 2 34 5 67 8 93 2 16 5 49 7 831 2 34 5 67 8 97 8 12 3 45 6 931 2 34 5 67 8 93 8 45 1 97 6 2Output1 0 0 4NoteIn the first test case, the only way to transform the initial matrix to the target one is to shift the second row by $$$1$$$ position to the right, and then shift the first column by $$$1$$$ position downwards.In the second test case, it can be shown that there is no correct way to transform the matrix, thus, the answer is $$$0$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "f1408608", "template_md5": "35d339e4", "result": "You are given an $n \\times n$ matrix where each cell contains a unique number from 1 to $n^2$. You can perform two types of operations on the matrix:\n\n* **Row shift:** Shift an entire row of the matrix $k$ positions to the right (where $1 \\le k \\le n-1$). Elements that go off the right end wrap around to the beginning of the row.\n* **Column shift:** Shift an entire column of the matrix $k$ positions down (where $1 \\le k \\le n-1$). Elements that go off the bottom wrap around to the top of the column.\n\nYou are given an initial matrix and a target matrix.  You want to find out how many ways you can transform the initial matrix into the target matrix by performing the allowed operations, following these rules:\n\n* Each row and each column can be shifted at most once.\n* Each number in the matrix can be moved at most twice.\n* If two numbers are moved twice, the difference in their row positions after the shift must not be the same as the difference in their column positions after the shift.\n\nThe answer may be very large, so print it modulo 998244353. If it is impossible to transform the initial matrix into the target matrix, print 0."}, {"prompt_md5": "cbd067a9", "template_md5": "465699a0", "result": "You are given two square grids of numbers.  Each number in the grids is between 1 and the square of the grid size. The goal is to transform the first grid into the second grid by performing a limited number of row and column shifts.  Each row and column can only be shifted once, and each number can only be moved twice.  The shifts must follow specific rules to avoid moving numbers in the same way twice.  Count the number of ways to transform the first grid into the second grid, and output the result modulo 998244353. If it's impossible to transform the grids, output 0."}]}