{"uid": "843-D", "url": "https://codeforces.com/contest/843/problem/D", "tags": ["graphs", " shortest paths"], "title": "843-D", "statement": "D. Dynamic Shortest Pathtime limit per test10 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou are given a weighted directed graph, consisting ofnvertices andmedges. You should answerqqueries of two types:1 v— find the length of shortest path from vertex1to vertexv.2 cl1l2...lc— add1to weights of edges with indicesl1,l2, ...,lc.InputThe first line of input data contains integersn,m,q(1 ≤n,m≤ 105,1 ≤q≤ 2000) — the number of vertices and edges in the graph, and the number of requests correspondingly.Nextmlines of input data contain the descriptions of edges:i-th of them contains description of edge with indexi— three integersai,bi,ci(1 ≤ai,bi≤n,0 ≤ci≤ 109) — the beginning and the end of edge, and its initial weight correspondingly.Nextqlines of input data contain the description of edges in the format described above (1 ≤v≤n,1 ≤lj≤m). It's guaranteed that inside single query allljare distinct. Also, it's guaranteed that a total number of edges in all requests of the second type does not exceed106.OutputFor each query of first type print the length of the shortest path from1tovin a separate line. Print-1, if such path does not exists.ExamplesInput3 2 91 2 02 3 02 1 21 31 22 1 11 31 22 2 1 21 31 2Output102142Input5 4 92 3 12 4 13 4 11 2 01 51 42 1 22 1 21 42 2 1 31 42 1 41 4Output-11234NoteThe description of changes of the graph in the first sample case:The description of changes of the graph in the second sample case:", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "47d65d98", "template_md5": "35d339e4", "result": "You are given a directed graph with $n$ vertices and $m$ edges. Each edge has a weight. You need to answer $q$ queries:\n\n* **Query Type 1:** Find the shortest path from vertex 1 to vertex $v$ and output its length. If no path exists, output -1.\n* **Query Type 2:**  Increase the weight of edges with indices $l_1$, $l_2$, ..., $l_c$ by 1.\n\n**Input:**\n\n* The first line contains three integers: $n$, $m$, and $q$.\n* The next $m$ lines describe the edges, each line containing three integers: $a_i$, $b_i$, and $c_i$ representing the start vertex, end vertex, and initial weight of the $i$-th edge.\n* The next $q$ lines describe the queries. Each query is either of the form \"1 $v$\" (for Query Type 1) or \"c $l_1$ $l_2$ ... $l_c$\" (for Query Type 2).\n\n**Output:**\n\n* For each Query Type 1, output the length of the shortest path from vertex 1 to vertex $v$ in a separate line. If no path exists, output -1."}, {"prompt_md5": "6e967811", "template_md5": "465699a0", "result": "You are given a network of connected points. Each connection has a weight. You need to find the shortest path between two points and update the weights of some connections.  You will be asked to find shortest paths multiple times after some connections have had their weights changed."}]}