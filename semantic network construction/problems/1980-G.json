{"uid": "1980-G", "url": "https://codeforces.com/contest/1980/problem/G", "tags": ["bitmasks", " data structures", " dfs and similar", " graphs", " greedy", " strings", " trees"], "title": "1980-G", "statement": "G. Yasya and the Mysterious Treetime limit per test2.5 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYasya was walking in the forest and accidentally found a tree with $$$n$$$ vertices. A tree is a connected undirected graph with no cycles.Next to the tree, the girl found an ancient manuscript with $$$m$$$ queries written on it. The queries can be of two types.The first type of query is described by the integer $$$y$$$. The weight ofeachedge in the tree is replaced by thebitwise exclusive ORof the weight of that edge and the integer $$$y$$$.The second type is described by the vertex $$$v$$$ and the integer $$$x$$$. Yasya chooses a vertex $$$u$$$ ($$$1 \\\\le u \\\\le n$$$, $$$u \\\\neq v$$$) and mentally draws a bidirectional edge of weight $$$x$$$ from $$$v$$$ to $$$u$$$ in the tree.Then Yasya finds a simple cycle in the resulting graph and calculates thebitwise exclusive ORof all the edges in it. She wants to choose a vertex $$$u$$$ such that the calculated value ismaximum. This calculated value will be the answer to the query. It can be shown that such a cycle exists and is unique under the given constraints (independent of the choice of $$$u$$$). If an edge between $$$v$$$ and $$$u$$$ already existed, a simple cycle is the path $$$v \\\\to u \\\\to v$$$.Note that the second type of query is performedmentally, meaning the tree doesnotchange in any way after it.Help Yasya answer all the queries.InputThe first line contains an integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of test cases.The descriptions of the test cases follow.The first line of each test case contains two integers $$$n$$$, $$$m$$$ ($$$2 \\\\le n \\\\le 2 \\\\cdot 10^5$$$, $$$1 \\\\le m \\\\le 2 \\\\cdot 10^5$$$) — the number of vertices in the tree and the number of queries.The next $$$n - 1$$$ lines of each test case contain three integers $$$v$$$, $$$u$$$, $$$w$$$ ($$$1 \\\\le v, u \\\\le n$$$, $$$1 \\\\le w \\\\le 10^9$$$) — the ends of some edge in the tree and its weight.It is guaranteed that the given set of edges forms a tree.The next $$$m$$$ lines of each test case describe the queries:^$$$y$$$ ($$$1 \\\\le y \\\\le 10^9$$$) — parameter of the first type query;?$$$v$$$ $$$x$$$ ($$$1 \\\\le v \\\\le n$$$, $$$1 \\\\le x \\\\le 10^9$$$) — parameters of the second type query.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\\\cdot 10^5$$$. The same is guaranteed for $$$m$$$.OutputFor each test case, output the answers to the queries of the second type.ExamplesInput23 71 2 13 1 8^ 5? 2 9^ 1? 1 10^ 6? 3 1? 2 95 61 2 7773 2 28124 1 165 3 1000000000^ 4? 3 123? 5 1000000000^ 1000000000? 1 908070? 2 1Output13 15 11 10  1000000127 2812 999756331 999999756Input38 48 6 36 3 42 5 47 6 27 1 104 1 45 1 2^ 4^ 7? 7 8? 4 105 63 1 42 3 94 3 65 2 10? 5 7^ 1^ 8? 4 10? 1 9? 3 64 22 1 44 3 52 3 4^ 13? 1 10Output14 13  13 8 11 11  10", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "aa4347b1", "template_md5": "35d339e4", "result": "You are given a tree with $n$ vertices. Each edge has a weight. There are $m$ queries.\n\n**Query Type 1:**\n\n* Input: An integer $y$.\n* Operation: For each edge in the tree, update its weight by performing a bitwise XOR operation with $y$.\n\n**Query Type 2:**\n\n* Input: Two integers $v$ and $x$.\n* Operation:  Imagine adding a new bidirectional edge between vertex $v$ and a vertex $u$ (where $u$ is different from $v$) with weight $x$. Find the simple cycle formed by this new edge and existing edges in the tree. Calculate the bitwise XOR of the weights of all edges in this cycle.\n\nFor each Query Type 2, output the maximum possible value of the bitwise XOR of the cycle edges. \n\n**Input:**\n\n* The first line contains the number of test cases $t$.\n* For each test case:\n    * The first line contains two integers $n$ and $m$ (the number of vertices and queries).\n    * The next $n-1$ lines describe the edges of the tree with three integers each: $v$, $u$, and $w$ (the endpoints of the edge and its weight).\n    * The next $m$ lines describe the queries.\n\n**Output:**\n\n* For each test case, output the answers to the Query Type 2 queries."}, {"prompt_md5": "c362457b", "template_md5": "465699a0", "result": "You are given a tree with weighted edges. There are two types of queries:\n\n1. Modify the weight of each edge by performing a bitwise XOR operation with a given number.\n2.  Choose a vertex and add a new edge with a given weight to another vertex.  Find the maximum bitwise XOR of all edge weights in the resulting cycle. \n\nAnswer all the queries of the second type."}]}