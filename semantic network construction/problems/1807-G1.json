{"uid": "1807-G1", "url": "https://codeforces.com/contest/1807/problem/G1", "tags": ["brute force", " data structures", " dp", " greedy", " implementation", " sortings"], "title": "1807-G1", "statement": "G1. Subsequence Addition (Easy Version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe only difference between the two versions is that in this version, the constraints are lower.Initially, array $$$a$$$ contains just the number $$$1$$$. You can perform several operations in order to change the array. In an operation, you can select some subsequence$$$^{\\\\dagger}$$$ of $$$a$$$ and add into $$$a$$$ an element equal to the sum of all elements of the subsequence.You are given a final array $$$c$$$. Check if $$$c$$$ can be obtained from the initial array $$$a$$$ by performing some number (possibly 0) of operations on the initial array.$$$^{\\\\dagger}$$$ A sequence $$$b$$$ is a subsequence of a sequence $$$a$$$ if $$$b$$$ can be obtained from $$$a$$$ by the deletion of several (possibly zero, but not all) elements. In other words, select $$$k$$$ ($$$1 \\\\leq k \\\\leq |a|$$$) distinct indices $$$i_1, i_2, \\\\dots, i_k$$$ and insert anywhere into $$$a$$$ a new element with the value equal to $$$a_{i_1} + a_{i_2} + \\\\dots + a_{i_k}$$$.InputThe first line of the input contains an integer $$$t$$$ ($$$1 \\\\leq t \\\\leq 1000$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \\\\leq n \\\\leq 5000$$$)  — the number of elements the final array $$$c$$$ should have.The second line of each test case contains $$$n$$$ space-separated integers $$$c_i$$$ ($$$1 \\\\leq c_i \\\\leq 5000$$$)  — the elements of the final array $$$c$$$ that should be obtained from the initial array $$$a$$$.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5000$$$.OutputFor each test case, output \"YES\" (without quotes) if such a sequence of operations exists, and \"NO\" (without quotes) otherwise.You can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).ExampleInput6111255 1 3 2 157 1 5 2 131 1 151 1 4 2 1OutputYES NO YES NO YES YESNoteFor the first test case, the initial array $$$a$$$ is already equal to $$$[1]$$$, so the answer is \"YES\".For the second test case, performing any amount of operations will change $$$a$$$ to an array of size at least two which doesn't only have the element $$$2$$$, thus obtaining the array $$$[2]$$$ is impossible and the answer is \"NO\".For the third test case, we can perform the following operations in order to obtain the final given array $$$c$$$:Initially, $$$a = [1]$$$.By choosing the subsequence $$$[1]$$$, and inserting $$$1$$$ in the array, $$$a$$$ changes to $$$[1, 1]$$$.By choosing the subsequence $$$[1, 1]$$$, and inserting $$$1+1=2$$$ in the middle of the array, $$$a$$$ changes to $$$[1, 2, 1]$$$.By choosing the subsequence $$$[1, 2]$$$, and inserting $$$1+2=3$$$ after the first $$$1$$$ of the array, $$$a$$$ changes to $$$[1, 3, 2, 1]$$$.By choosing the subsequence $$$[1, 3, 1]$$$ and inserting $$$1+3+1=5$$$ at the beginning of the array, $$$a$$$ changes to $$$[5, 1, 3, 2, 1]$$$ (which is the array we needed to obtain).", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "57c62d9c", "template_md5": "465699a0", "result": "You start with a list containing only the number 1. You can repeatedly take a portion of the list, add up the numbers in that portion, and insert the sum into the list.  Given a final list, determine if it's possible to create that list using this process."}, {"prompt_md5": "f3c806e7", "template_md5": "35d339e4", "result": "You are given an array $c$ of integers. You start with an array containing only the number 1. You can perform operations on the array. In each operation, you choose a subsequence of the current array and add the sum of the elements in that subsequence to the array. \n\nDetermine if it is possible to obtain the array $c$ from the initial array by performing some number of these operations. \n\n**Input:**\n\n* The first line contains the number of test cases, $t$.\n* For each test case:\n    * The first line contains the number of elements in the final array, $n$.\n    * The second line contains the $n$ elements of the final array, $c_i$.\n\n**Output:**\n\nFor each test case, output \"YES\" if it is possible to obtain the array $c$ and \"NO\" otherwise."}]}