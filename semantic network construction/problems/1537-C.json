{"uid": "1537-C", "url": "https://codeforces.com/contest/1537/problem/C", "tags": ["constructive algorithms", " greedy", " implementation", " math"], "title": "1537-C", "statement": "C. Challenging Cliffstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are a game designer and want to make an obstacle course. The player will walk from left to right. You have $$$n$$$ heights of mountains already selected and want to arrange them so that the absolute difference of the heights of the first and last mountains is as small as possible.In addition, you want to make the game difficult, and since walking uphill or flat is harder than walking downhill, the difficulty of the level will be the number of mountains $$$i$$$ ($$$1 \\\\leq i < n$$$) such that $$$h_i \\\\leq h_{i+1}$$$ where $$$h_i$$$ is the height of the $$$i$$$-th mountain. You don't want to waste any of the mountains you modelled, so you have to use all of them.From all the arrangements that minimize $$$|h_1-h_n|$$$, find one that is the most difficult. If there are multiple orders that satisfy these requirements, you may find any.InputThe first line will contain a single integer $$$t$$$ ($$$1 \\\\leq t \\\\leq 100$$$) — the number of test cases. Then $$$t$$$ test cases follow.The first line of each test case contains a single integer $$$n$$$ ($$$2 \\\\leq n \\\\leq 2 \\\\cdot 10^5$$$) — the number of mountains.The second line of each test case contains $$$n$$$ integers $$$h_1,\\\\ldots,h_n$$$ ($$$1 \\\\leq h_i \\\\leq 10^9$$$), where $$$h_i$$$ is the height of the $$$i$$$-th mountain.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\\\cdot 10^5$$$.OutputFor each test case, output $$$n$$$ integers — the given heights in an order that maximizes the difficulty score among all orders that minimize $$$|h_1-h_n|$$$.If there are multiple orders that satisfy these requirements, you may output any.ExampleInput2 4 4 2 1 2 2 3 1Output2 4 1 2  1 3NoteIn the first test case:The player begins at height $$$2$$$, next going up to height $$$4$$$ increasing the difficulty by $$$1$$$. After that he will go down to height $$$1$$$ and the difficulty doesn't change because he is going downhill. Finally the player will go up to height $$$2$$$ and the difficulty will increase by $$$1$$$. The absolute difference between the starting height and the end height is equal to $$$0$$$ and it's minimal. The difficulty is maximal.In the second test case:The player begins at height $$$1$$$, next going up to height $$$3$$$ increasing the difficulty by $$$1$$$. The absolute difference between the starting height and the end height is equal to $$$2$$$ and it's minimal as they are the only heights. The difficulty is maximal.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "603eef65", "template_md5": "35d339e4", "result": "You are given $n$ mountain heights, $h_1, h_2, ..., h_n$.  You need to arrange these heights in a sequence from left to right.\n\nThe goal is to find an arrangement that:\n\n1. Minimizes the absolute difference between the height of the first mountain ($h_1$) and the last mountain ($h_n$).\n2. Maximizes the number of times the height increases consecutively.  \n\nAn increase happens when $h_i \\le h_{i+1}$.\n\nOutput the arrangement of mountain heights that satisfies these conditions. If there are multiple valid arrangements, any one will do."}, {"prompt_md5": "b05cf263", "template_md5": "465699a0", "result": "You are given a list of mountain heights.  Rearrange the mountains so that the difference between the highest and lowest mountains is as small as possible.  Also, arrange the mountains in a way that maximizes the number of times the player goes uphill."}]}