{"uid": "5-C", "url": "https://codeforces.com/contest/5/problem/C", "tags": ["constructive algorithms", " data structures", " dp", " greedy", " sortings", " strings"], "title": "5-C", "statement": "C. Longest Regular Bracket Sequencetime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutThis is yet another problem dealing with regular bracket sequences.We should remind you that a bracket sequence is called regular, if by inserting «+» and «1» into it we can get a correct mathematical expression. For example, sequences «(())()», «()» and «(()(()))» are regular, while «)(», «(()» and «(()))(» are not.You are given a string of «(» and «)» characters. You are to find its longest substring that is a regular bracket sequence. You are to find the number of such substrings as well.InputThe first line of the input file contains a non-empty string, consisting of «(» and «)» characters. Its length does not exceed106.OutputPrint the length of the longest substring that is a regular bracket sequence, and the number of such substrings. If there are no such substrings, write the only line containing \"0 1\".ExamplesInput)((())))(()())Output6 2Input))(Output0 1", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "83f67d48", "template_md5": "35d339e4", "result": "You are given a string containing only '(' and ')' characters.  Find the length of the longest substring within the string that is a valid bracket sequence. A valid bracket sequence is one that can be transformed into a correct mathematical expression by inserting '+' and '1' characters. \n\nFor example:\n\n* \"(()())\" is a valid bracket sequence.\n* \")(\" is not a valid bracket sequence.\n\nOutput the length of the longest valid bracket sequence and the number of such sequences found in the string. If there are no valid bracket sequences, output \"0 1\"."}, {"prompt_md5": "d0d98be7", "template_md5": "465699a0", "result": "Given a string of parentheses, find the length of the longest sequence of parentheses that forms a valid grouping and the number of such sequences.  If no valid sequences exist, output 0 1."}]}