{"uid": "1987-B", "url": "https://codeforces.com/contest/1987/problem/B", "tags": ["greedy"], "title": "1987-B", "statement": "B. K-Sorttime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an array of integers $$$a$$$ of length $$$n$$$.You can apply the following operation any number of times (maybe, zero):First, choose an integer $$$k$$$ such that $$$1 \\\\le k \\\\le n$$$ and pay $$$k + 1$$$ coins.Then, chooseexactly$$$k$$$ indices such that $$$1 \\\\le i_1 < i_2 < \\\\ldots < i_k \\\\le n$$$.Then, for each $$$x$$$ from $$$1$$$ to $$$k$$$, increase $$$a_{i_x}$$$ by $$$1$$$.Find the minimum number of coins needed to make $$$a$$$ non-decreasing. That is, $$$a_1 \\\\le a_2 \\\\le \\\\ldots \\\\le a_n$$$.InputEach test contains multiple test cases. The first line of input contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 10^5$$$) — the length of the array $$$a$$$.The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\\\ldots, a_n$$$ ($$$1 \\\\le a_i \\\\le 10^9$$$) — the elements of the array $$$a$$$.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.OutputFor each test case, output a single integer — the minimum number of coins needed to make $$$a$$$ non-decreasing.ExampleInput531 7 952 1 4 7 641 3 2 411799344 12 37 60 311 613 365 328 675Output0 3 2 0 1821NoteIn the first test case, $$$a$$$ is already sorted, so you don't have to spend any coins.In the second test case, the optimal sequence of operations is:Choose $$$k = 2$$$ and the indices $$$2$$$ and $$$5$$$: $$$[ 2, \\\\color{red}{1}, 4, 7, \\\\color{red}{6} ] \\\\rightarrow [2, 2, 4, 7, 7]$$$. This costs $$$3$$$ coins.It can be proven that it is not possible to make $$$a$$$ non-decreasing by spending less than $$$3$$$ coins.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "6ca258ba", "template_md5": "35d339e4", "result": "You are given an array of integers $a$ of length $n$. You can perform the following operation any number of times:\n\n1. Choose an integer $k$ where $1 \\le k \\le n$ and pay $k+1$ coins.\n2. Choose exactly $k$ indices $i_1, i_2, ..., i_k$ where $1 \\le i_1 < i_2 < ... < i_k \\le n$.\n3. For each $x$ from 1 to $k$, increase $a_{i_x}$ by 1.\n\nFind the minimum number of coins needed to make the array $a$ non-decreasing (i.e., $a_1 \\le a_2 \\le ... \\le a_n$). \n\n\nInput:\n\n* The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$).\n* For each test case:\n    * The first line contains the length of the array $n$ ($1 \\le n \\le 10^5$).\n    * The second line contains the $n$ integers of the array $a$ ($1 \\le a_i \\le 10^9$).\n\nOutput:\n\n* For each test case, output the minimum number of coins needed."}, {"prompt_md5": "e58e3b65", "template_md5": "465699a0", "result": "You have a list of numbers. You can repeatedly choose a number and increase a few specific numbers in the list by 1, paying a cost based on the number you chose. What is the least amount you have to pay to make the list of numbers non-decreasing?"}]}