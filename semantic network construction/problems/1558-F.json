{"uid": "1558-F", "url": "https://codeforces.com/contest/1558/problem/F", "tags": ["data structures", " sortings"], "title": "1558-F", "statement": "F. Strange Sorttime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou have a permutation: an array $$$a = [a_1, a_2, \\\\ldots, a_n]$$$ of distinct integers from $$$1$$$ to $$$n$$$. The length of the permutation $$$n$$$ is odd.Consider the following algorithm of sorting the permutation in increasing order.A helper procedure of the algorithm, $$$f(i)$$$, takes a single argument $$$i$$$ ($$$1 \\\\le i \\\\le n-1$$$) and does the following. If $$$a_i > a_{i+1}$$$, the values of $$$a_i$$$ and $$$a_{i+1}$$$ are exchanged. Otherwise, the permutation doesn't change.The algorithm consists of iterations, numbered with consecutive integers starting with $$$1$$$. On the $$$i$$$-th iteration, the algorithm does the following:if $$$i$$$ is odd, call $$$f(1), f(3), \\\\ldots, f(n - 2)$$$;if $$$i$$$ is even, call $$$f(2), f(4), \\\\ldots, f(n - 1)$$$.It can be proven that after a finite number of iterations the permutation will be sorted in increasing order.After how many iterations will this happen for the first time?InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$). Description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$3 \\\\le n \\\\le 2 \\\\cdot 10^5 - 1$$$; $$$n$$$ is odd) — the length of the permutation.The second line contains $$$n$$$ distinct integers $$$a_1, a_2, \\\\ldots, a_n$$$ ($$$1 \\\\le a_i \\\\le n$$$) — the permutation itself.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\\\cdot 10^5 - 1$$$.OutputFor each test case print the number of iterations after which the permutation will become sorted in increasing order for the first time.If the given permutation is already sorted, print $$$0$$$.ExampleInput3 3 3 2 1 7 4 5 7 1 3 2 6 5 1 2 3 4 5Output3 5 0NoteIn the first test case, the permutation will be changing as follows:after the $$$1$$$-st iteration: $$$[2, 3, 1]$$$;after the $$$2$$$-nd iteration: $$$[2, 1, 3]$$$;after the $$$3$$$-rd iteration: $$$[1, 2, 3]$$$.In the second test case, the permutation will be changing as follows:after the $$$1$$$-st iteration: $$$[4, 5, 1, 7, 2, 3, 6]$$$;after the $$$2$$$-nd iteration: $$$[4, 1, 5, 2, 7, 3, 6]$$$;after the $$$3$$$-rd iteration: $$$[1, 4, 2, 5, 3, 7, 6]$$$;after the $$$4$$$-th iteration: $$$[1, 2, 4, 3, 5, 6, 7]$$$;after the $$$5$$$-th iteration: $$$[1, 2, 3, 4, 5, 6, 7]$$$.In the third test case, the permutation is already sorted and the answer is $$$0$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "395ae650", "template_md5": "35d339e4", "result": "You are given a list of distinct numbers from 1 to $n$ (where $n$ is odd).  This list is a permutation, meaning the numbers are in a specific order.\n\nYou have an algorithm that repeatedly swaps numbers in the list based on the following rules:\n\n* **Odd Iteration:** Swap the numbers at positions 1, 3, 5, ... , $n-2$.\n* **Even Iteration:** Swap the numbers at positions 2, 4, 6, ... , $n-1$.\n\nThe algorithm continues until the list is sorted in increasing order.\n\nFor a given list, determine the number of iterations it takes for the list to become sorted. If the list is already sorted, the answer is 0."}, {"prompt_md5": "9abf01a4", "template_md5": "465699a0", "result": "You are given a list of numbers that are out of order.  There is a special sorting algorithm that swaps pairs of numbers in the list based on their values. The algorithm alternates between swapping pairs of numbers at odd and even positions.  Find the fewest number of times the algorithm needs to run until the list is sorted."}]}