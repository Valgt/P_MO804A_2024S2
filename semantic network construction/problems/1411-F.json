{"uid": "1411-F", "url": "https://codeforces.com/contest/1411/problem/F", "tags": ["greedy", " math"], "title": "1411-F", "statement": "F. The Thorny Pathtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputAccording to a legend the Hanoi Temple holds a permutation of integers from $$$1$$$ to $$$n$$$. There are $$$n$$$ stones of distinct colors lying in one line in front of the temple. Monks can perform the following operation on stones: choose a position $$$i$$$ ($$$1 \\\\le i \\\\le n$$$) and cyclically shift stones at positions $$$i$$$, $$$p[i]$$$, $$$p[p[i]]$$$, .... That is, a stone from position $$$i$$$ will move to position $$$p[i]$$$, a stone from position $$$p[i]$$$ will move to position $$$p[p[i]]$$$, and so on, a stone from position $$$j$$$, such that $$$p[j] = i$$$, will move to position $$$i$$$.Each day the monks must obtain a new arrangement of stones using an arbitrary number of these operations. When all possible arrangements will have been obtained, the world will end. You are wondering, what if some elements of the permutation could be swapped just before the beginning? How many days would the world last?You want to get a permutation that will allow the world to last as long as possible, using the minimum number of exchanges of two elements of the permutation.Two arrangements of stones are considered different if there exists a position $$$i$$$ such that the colors of the stones on that position are different in these arrangements.InputEach test consists of multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\leq t \\\\leq 10^3$$$). Description of the test cases follows.The first line of each test case contains $$$n$$$ ($$$3 \\\\leq n \\\\leq 10^6$$$). The next line contains $$$n$$$ integers $$$p_1, \\\\dots, p_n$$$ ($$$1 \\\\le p_i \\\\le n$$$). It is guaranteed that $$$p$$$ is a permutation.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^6$$$.OutputFor each of the $$$t$$$ test cases, print two integers on a new line: the largest possible number of days the world can last, modulo $$$10^9 + 7$$$, and the minimum number of exchanges required for that.ExamplesInput3 3 2 3 1 3 2 1 3 3 1 2 3Output3 0 3 1 3 2Input5 4 2 3 4 1 4 2 3 1 4 4 2 1 4 3 4 2 1 3 4 4 1 2 3 4Output4 0 4 1 4 0 4 1 4 2NoteLet's label the colors of the stones with letters. Explanations for the first two test cases of the first example:Using the permutation $$$[2, 3, 1]$$$, we can additionally obtain the arrangementsCABandBCAfromABC. This is already the maximum possible result.Using the permutation $$$[2, 1, 3]$$$, the onlyBACcan be obtained fromABC. As we saw in the previous case, two arrangements are not the maximum possible number of distinct arrangements for $$$n = 3$$$. To get an optimal permutation, for example, we can swap $$$1$$$ and $$$3$$$, so we will get the permutation $$$[2, 3, 1]$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "d759d7d7", "template_md5": "35d339e4", "result": "You are given a permutation $p$ of length $n$.  The permutation describes the cyclic shift operation on $n$ stones.  \n\nYou can swap any two elements of the permutation before the operation begins.  \n\nThe operation works as follows:\n\n1. Starting at position $i$, move the stone at position $i$ to position $p[i]$.\n2. Move the stone at position $p[i]$ to position $p[p[i]]$.\n3. Continue this process until you return to position $i$.\n\nThe goal is to find the permutation that will result in the maximum number of unique arrangements of the stones, using the minimum number of swaps.\n\n**Input:**\n\n* $t$ - the number of test cases\n* For each test case:\n    * $n$ - the length of the permutation\n    * $p_1, p_2, ..., p_n$ - the permutation\n\n**Output:**\n\n* For each test case:\n    * The maximum number of unique arrangements modulo $10^9 + 7$\n    * The minimum number of swaps required to achieve the maximum number of arrangements"}, {"prompt_md5": "e912163a", "template_md5": "465699a0", "result": "You are given a sequence of numbers. You can swap any two numbers in the sequence.  The goal is to find the sequence that will result in the longest possible number of unique rearrangements of the numbers after repeatedly applying a cyclic shift operation. The cyclic shift operation takes a position in the sequence and moves each number in the sequence according to a predefined rule based on the position.  Output the maximum number of unique rearrangements and the minimum number of swaps needed to achieve this."}]}