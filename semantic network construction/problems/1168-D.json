{"uid": "1168-D", "url": "https://codeforces.com/contest/1168/problem/D", "tags": ["dp", " implementation", " trees"], "title": "1168-D", "statement": "D. Anagram Pathstime limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputToad Ilya has a rooted binary tree with vertex $$$1$$$ being the root. A tree is a connected graph without cycles. A tree is rooted if one vertex is selected and called the root. A vertex $$$u$$$ is a child of a vertex $$$v$$$ if $$$u$$$ and $$$v$$$ are connected by an edge and $$$v$$$ is closer to the root than $$$u$$$. A leaf is a non-root vertex that has no children.In the tree Ilya has each vertex hasat most twochildren, and each edge has some character written on it. The character can be a lowercase English letter or the question mark '?'.Ilya will $$$q$$$ times update the tree a bit. Each update will replace exactly one character on some edge. After each update Ilya needs to find if the tree isanagrammableand if yes, find itsanagramnityfor each letter. Well, that's difficult to explain, but we'll try.To start with, a string $$$a$$$ is ananagramof a string $$$b$$$ if it is possible to rearrange letters in $$$a$$$ (without changing the letters itself) so that it becomes $$$b$$$. For example, the string \"fortyfive\" is an anagram of the string \"overfifty\", but the string \"aabb\" is not an anagram of the string \"bbba\".Consider a path from the root of the tree to a leaf. The characters on the edges on this path form a string, we say that this string is associated with this leaf. The tree isanagrammableif and only if it is possible to replace each question mark with a lowercase English letter so that for all pair of leaves the associated strings for these leaves are anagrams of each other.If the tree isanagrammable, then itsanagramnityfor the letter $$$c$$$ is the maximum possible number of letters $$$c$$$ in a string associated with some leaf in a valid replacement of all question marks.Please after each update find if the tree isanagrammableand if yes, find the $$$\\\\sum{f(c) \\\\cdot ind(c)}$$$ for all letters $$$c$$$, where $$$f(c)$$$ is theanagramnityfor the letter $$$c$$$, and $$$ind(x)$$$ is the index of this letter in the alphabet ($$$ind($$$\"a\"$$$) = 1$$$, $$$ind($$$\"b\"$$$) = 2$$$, ..., $$$ind($$$\"z\"$$$) = 26$$$).InputThe first line of input contains two integers $$$n$$$ and $$$q$$$ ($$$2 \\\\leq n \\\\leq 150\\\\,000$$$, $$$1 \\\\leq q \\\\leq 150\\\\,000$$$) — the number of vertices in the tree and the number of queries.The next $$$n-1$$$ lines describe the initial tree. The $$$i$$$-th of them contains an integer $$$p_i$$$ and a character $$$c_i$$$ ($$$1 \\\\leq p_i \\\\leq i$$$, $$$c_i$$$ is a lowercase English letter or the question mark '?') describing an edge between vertices $$$p_i$$$ and $$$i+1$$$ with character $$$c_i$$$ written on it.The root of this tree is the vertex $$$1$$$, and each vertex has at most two children.The next $$$q$$$ lines describe the queries. The $$$i$$$-th of them contains two integers $$$v$$$ and $$$c$$$ ($$$2 \\\\leq v \\\\leq n$$$, $$$c$$$ is a lowercase English letter or the question mark '?'), meaning that updated character on the edge between $$$p_{v-1}$$$ to $$$v$$$ is $$$c$$$. The updated character can be the same as was written before.OutputOutput $$$q$$$ lines. In the $$$i$$$-th of them print \"Fou\" if the tree isnotanagrammableafter the first $$$i$$$ updates.Otherwise output \"Shi\" and the $$$\\\\sum{f(c) \\\\cdot ind(c)}$$$ for all letters $$$c$$$.ExamplesInput3 4 1 ? 1 ? 2 ? 2 a 3 b 2 bOutputShi 351 Shi 1 Fou Shi 2Input5 2 1 ? 1 ? 2 ? 3 ? 4 a 5 bOutputShi 352 Shi 3NoteIn the first example after the first query, for each character, you can set all edges equal to that character, and you will get $$$1$$$ such character on each path, so the answer is $$$1 \\\\cdot (1+2+\\\\ldots+26) = 351$$$.In the first example after the second query, you know that all paths should be an anagram of \"a\", so all paths should be \"a\", so the answer is $$$1 \\\\cdot 1 = 1$$$.In the first example after the third query, you have two paths with strings \"a\" and \"b\", but these strings are not anagrams, so the answer is \"Fou\".In the first example after the fourth query, you know that all paths should be \"b\", so the answer is $$$1 \\\\cdot 2 = 2$$$.In the second example after the first query, you know that $$$f($$$'a'$$$) = 2$$$ and $$$f(c) = 1$$$ for all other characters, so the answer is $$$1 \\\\cdot (2 + 3 + \\\\ldots + 26) + 2 = 352$$$.In the second example after the second query, you know that each path should contain one 'a' and one 'b', so the answer is $$$1 \\\\cdot 1 + 1 \\\\cdot 2 = 3$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "2b67224e", "template_md5": "35d339e4", "result": "You are given a rooted binary tree with $n$ vertices ($2 \\le n \\le 150,000$). Each edge has a character on it, which can be a lowercase English letter or '?'.\n\nYou will perform $q$ updates ($1 \\le q \\le 150,000$) on the tree. Each update replaces a character on a single edge with a lowercase English letter or '?'.\n\nAfter each update, you need to determine if the tree is \"anagrammable\". A tree is anagrammable if you can replace all '?' characters with lowercase English letters such that for any two leaves in the tree, the string of characters along the path from the root to each leaf are anagrams of each other.\n\nIf the tree is anagrammable, calculate the \"anagramnity\" for each letter. The anagramnity of a letter $c$ is the maximum number of times that letter appears in a string associated with a leaf in a valid replacement of all '?' characters.\n\nFinally, for each update, output \"Fou\" if the tree is not anagrammable. Otherwise, output \"Shi\" followed by the sum of  $f(c) \\cdot ind(c)$ for all letters $c$, where $f(c)$ is the anagramnity of letter $c$ and $ind(c)$ is the index of the letter in the alphabet (a=1, b=2, ..., z=26)."}, {"prompt_md5": "4309f1fc", "template_md5": "465699a0", "result": "You are given a tree with labeled edges.  You can change some of the labels.  After each change, determine if all paths from the root to a leaf form anagrams of each other. If they do, calculate the sum of  (frequency of letter * alphabetical position of letter) for each letter."}]}