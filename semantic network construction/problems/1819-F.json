{"uid": "1819-F", "url": "https://codeforces.com/contest/1819/problem/F", "tags": ["data structures", " dp"], "title": "1819-F", "statement": "F. Willy-nilly, Crack, Into Release!time limit per test3 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputYou have long dreamed of working in a large IT company and finally got a job there. You have studied all existing modern technologies for a long time and are ready to apply all your knowledge in practice. But then you sit down at your desk and see a sheet of paper with the company's motto printed in large letters:abcdabcdabcdabcd....The company's motto contains four main principles—a(Willi),b(Nilli),c(Crack),d(Release). Therefore, you consider strings of length $$$n$$$ consisting of these four Latin letters.Unorderedpairs of letters \"ab\", \"bc\", \"cd\", and \"da\" in this motto are adjacent, so we will call such pairs of symbolsgood. So, if you are given a string $$$s$$$ of length $$$n$$$, and it is known that the unordered pair of symbols $$$\\\\{ x, y \\\\}$$$ is good, then you can perform one of the following operations on the string:if $$$s_n = x$$$, then you are allowed to replace this symbol with $$$y$$$,if there exists $$$1 \\\\le i < n$$$ such that $$$s_i = x$$$ and $$$s_{i+1} = \\\\ldots = s_n = y$$$, then you are allowed to replace the $$$i$$$-th symbol of the string with $$$y$$$, and all subsequent symbols with $$$x$$$.For example, the stringbacddcan be replaced with one of the stringsbacda,bacdc, orbadcc, and the stringaaccan be replaced withaaboraad.A non-empty sequence of operations for the string $$$s$$$ will be calledcorrectif the following two conditions are met:after performing all operations, the string becomes $$$s$$$ again,no string, except for $$$s$$$, will occur more than once during the operations. At the same time, the string $$$s$$$ can occur exactly twice - before the start of the operations and after performing all operations.Now we are ready to move on to the problem statement! You have a set of strings that is initially empty. Then, each of $$$q$$$ queries adds another string $$$t_i$$$ to the set, or removes the string $$$t_i$$$ from the set. After each query, you need to output the minimum and maximum size of a correct sequence of operations in which each word occurs at least once. The choice of the initial string $$$s$$$ is up to you.InputThe first line contains two integers $$$n$$$ and $$$q$$$ ($$$1 \\\\le n \\\\le 20$$$, $$$1 \\\\le q \\\\le 100\\\\,000$$$) — the length of the strings under consideration and the number of queries to modify the set of strings.Each of the next $$$q$$$ lines contains a string $$$t_i$$$ ($$$\\\\lvert t_i \\\\rvert = n$$$). All strings consist of characters \"a\", \"b\", \"c\" and \"d\". If the string $$$t_i$$$ was not in the set before the query, it is added to the set, otherwise it is removed from the set.OutputFor each of the $$$q$$$ queries, output two integers: the minimum and maximum size of a correct sequence of operations in which each word from the set appears at least once.If there is no sequence of operations that satisfies the condition of the problem, output a single number $$$-1$$$.ExamplesInput2 4 aa ac dd acOutput2 12 4 4 -1 12 12Input3 2 acc bddOutput2 44 28 44NoteLet's consider the first test example.After the first query, the set of important words is equal to $$$\\\\{$$$aa$$$\\\\}$$$, the minimum sequence of actions has the following form:aa,ab,aa. The maximum sequence of actions that fits isaa,ab,ba,bb,bc,cb,cc,cd,dc,dd,da,ad,aa.After the second query, the set of important words is equal to $$$\\\\{$$$aa, ac$$$\\\\}$$$. The minimum and maximum sequences of actions are:aa,ab,ac,ad,aa.After the third query, the set of important words is equal to $$$\\\\{$$$aa, ac, dd$$$\\\\}$$$. There is no sequence of actions that fits the condition, so $$$-1$$$ should be outputted.After the fourth query, the set of important words is equal to $$$\\\\{$$$aa, dd$$$\\\\}$$$. The minimum and maximum sequences of actions are as follows:aa,ab,ba,bb,bc,cb,cc,cd,dc,dd,da,ad,aa.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "2e1bb361", "template_md5": "35d339e4", "result": "You are given a set of strings of length $n$. Each string consists of the characters 'a', 'b', 'c', and 'd'.  \n\nYou can perform the following operations on a string:\n\n* If the last character of the string is 'x', you can replace it with 'y' if the pair '{x, y}' is one of the good pairs ('ab', 'bc', 'cd', or 'da').\n* If there exists a position 'i' in the string where the character is 'x' and all characters from position 'i' to the end are 'y', you can replace the 'i'-th character with 'y' and all subsequent characters with 'x'.\n\nA sequence of operations is considered \"correct\" if:\n\n1. After all operations, the string is the same as it was originally.\n2. No string (except the original) appears more than once during the operations.\n\nFor each query, you are given a string. If the string is not already in the set, add it. If it is in the set, remove it. After each query, find the minimum and maximum size of a correct sequence of operations where every string in the set is used at least once. If no such sequence exists, output -1."}, {"prompt_md5": "9cdf0fb2", "template_md5": "465699a0", "result": "You are given a set of strings.  Each string is made up of four letters: a, b, c, and d.  You can perform operations on the strings to change them.  \n\nFor each operation, you can replace a letter in a string with another letter, following specific rules.\n\nAfter each change to the set of strings, you need to find the smallest and largest number of operations needed to transform all the strings back to their original form, ensuring each string is used at least once in the process. If this is not possible, output -1."}]}