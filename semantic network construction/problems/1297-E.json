{"uid": "1297-E", "url": "https://codeforces.com/contest/1297/problem/E", "tags": ["*special", " dfs and similar", " trees"], "title": "1297-E", "statement": "E. Modernization of Treelandtime limit per test5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputTreeland consists of $$$n$$$ cities and $$$n-1$$$ two-way roads connecting pairs of cities. From every city, you can reach every other city moving only by the roads. You are right, the system of cities and roads in this country forms an undirected tree.The government has announced a program for the modernization of urban infrastructure of some cities. You have been assigned to select an arbitrary subset of cities $$$S$$$ to upgrade (potentially all the cities) that satisfies the following requirements:the subset of cities must be \"connected\", that is, from any city of the subset $$$S$$$ you can get to any other city of the subset $$$S$$$ by roads, moving only through cities from $$$S$$$,the number of \"dead-ends\" in $$$S$$$ must be equal to the given number $$$k$$$. A city is a \"dead-end\" if it is the only city in $$$S$$$ or connected to exactly one another city from $$$S$$$.This shows one of the possible ways to select $$$S$$$ (blue vertices) for a given configuration and $$$k=4$$$. Dead-ends are vertices with numbers $$$1$$$, $$$4$$$, $$$6$$$ and $$$7$$$.Help Treeland upgrade its cities. Find any of the possible subsets $$$S$$$ or determine that such a subset does not exist.InputThe first line contains an integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of test cases in the input. This is followed by the test cases themselves.Each test case begins with a line that contains two integers $$$n$$$ and $$$k$$$ ($$$2 \\\\le n \\\\le 3 \\\\cdot 10^5$$$, $$$1 \\\\le k \\\\le n$$$) — the number of cities in Treeland and the number of \"dead-end\" cities required in the subset $$$S$$$.This is followed by $$$n-1$$$ lines with road descriptions. Each road is given by two integers $$$x$$$ and $$$y$$$ ($$$1 \\\\le x, y \\\\le n$$$; $$$x \\\\ne y$$$) — the numbers of the cities that are connected by this road. It is guaranteed that from every city you can reach any other, moving only by the roads.The sum of the values of $$$n$$$ for all test cases in the input does not exceed $$$3 \\\\cdot 10^5$$$.OutputFor each test case printYesorNo(in any case, upper or lower), depending on whether the answer exists or not. If the answer exists, then print an integer $$$m$$$ ($$$1 \\\\le m \\\\le n$$$) — the number of cities in the found subset. Then print $$$m$$$ different numbers from $$$1$$$ to $$$n$$$ — the numbers of the cities in the found subset. City numbers can be printed in any order. If there are several answers, print any of them.ExampleInput4 10 4 4 5 5 2 2 1 1 3 1 9 9 10 2 7 7 8 5 6 4 3 1 2 2 3 3 4 5 3 1 2 1 3 1 4 1 5 4 1 1 2 2 4 2 3OutputYes 9 1 2 4 5 6 7 8 9 10  No Yes 4 1 3 4 5  Yes 1 4", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "aa3ad54a", "template_md5": "35d339e4", "result": "You are given a tree with $n$ cities and $n-1$ roads connecting them.  You need to choose a subset of cities $S$ to upgrade, following these rules:\n\n* All cities in $S$ must be connected to each other by roads within the subset.\n* The subset $S$ must have exactly $k$ \"dead-end\" cities. A dead-end city is a city that is either the only city in $S$ or is connected to only one other city in $S$.\n\nDetermine if a valid subset $S$ exists. If it does, output \"Yes\" followed by the size of the subset $m$ and the $m$ cities in the subset. If no such subset exists, output \"No\"."}, {"prompt_md5": "c710817d", "template_md5": "465699a0", "result": "You are given a tree with a certain number of nodes. You need to choose a subset of nodes that meets two conditions:\n\n1. All nodes in the subset are connected (you can reach any node in the subset from any other node in the subset by following the tree's edges).\n2. There are a specific number of \"dead-end\" nodes in the subset. A dead-end node is a node that is only connected to one other node in the subset.\n\nDetermine if such a subset exists and, if so, output the number of nodes in the subset and the nodes themselves."}]}