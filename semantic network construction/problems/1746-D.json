{"uid": "1746-D", "url": "https://codeforces.com/contest/1746/problem/D", "tags": ["dfs and similar", " dp", " greedy", " sortings", " trees"], "title": "1746-D", "statement": "D. Paths on the Treetime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a rooted tree consisting of $$$n$$$ vertices. The vertices are numbered from $$$1$$$ to $$$n$$$, and the root is the vertex $$$1$$$. You are also given a score array $$$s_1, s_2, \\\\ldots, s_n$$$.A multiset of $$$k$$$ simple paths is called valid if the following two conditions are both true.Each path starts from $$$1$$$.Let $$$c_i$$$ be the number of paths covering vertex $$$i$$$. For each pair of vertices $$$(u,v)$$$ ($$$2\\\\le u,v\\\\le n$$$) that have the same parent, $$$|c_u-c_v|\\\\le 1$$$ holds.Thevalueof the path multiset is defined as $$$\\\\sum\\\\limits_{i=1}^n c_i s_i$$$.It can be shown that it is always possible to find at least one valid multiset. Find the maximumvalueamong all valid multisets.InputEach test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\\\leq t \\\\leq 10^4$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains two space-separated integers $$$n$$$ ($$$2 \\\\le n \\\\le 2 \\\\cdot 10^5$$$) and $$$k$$$ ($$$1 \\\\le k \\\\le 10^9$$$) — the size of the tree and the required number of paths.The second line contains $$$n - 1$$$ space-separated integers $$$p_2,p_3,\\\\ldots,p_n$$$ ($$$1\\\\le p_i\\\\le n$$$), where $$$p_i$$$ is the parent of the $$$i$$$-th vertex. It is guaranteed that this value describe a valid tree with root $$$1$$$.The third line contains $$$n$$$ space-separated integers $$$s_1,s_2,\\\\ldots,s_n$$$ ($$$0 \\\\le s_i \\\\le 10^4$$$) — the scores of the vertices.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\\\cdot 10 ^ 5$$$.OutputFor each test case, print a single integer — the maximumvalueof a path multiset.ExampleInput25 41 2 1 36 2 1 5 75 31 2 1 36 6 1 4 10Output54 56NoteIn the first test case, one of optimal solutions is four paths $$$1 \\\\to 2 \\\\to 3 \\\\to 5$$$, $$$1 \\\\to 2 \\\\to 3 \\\\to 5$$$, $$$1 \\\\to 4$$$, $$$1 \\\\to 4$$$, here $$$c=[4,2,2,2,2]$$$. The value equals to $$$4\\\\cdot 6+ 2\\\\cdot 2+2\\\\cdot 1+2\\\\cdot 5+2\\\\cdot 7=54$$$.In the second test case, one of optimal solution is three paths $$$1 \\\\to 2 \\\\to 3 \\\\to 5$$$, $$$1 \\\\to 2 \\\\to 3 \\\\to 5$$$, $$$1 \\\\to 4$$$, here $$$c=[3,2,2,1,2]$$$. The value equals to $$$3\\\\cdot 6+ 2\\\\cdot 6+2\\\\cdot 1+1\\\\cdot 4+2\\\\cdot 10=56$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "3e2965d2", "template_md5": "35d339e4", "result": "You are given a tree with $n$ nodes, numbered from 1 to $n$. Each node has a score $s_i$.  \n\nYou need to find the maximum possible sum of scores, where the sum is calculated by:\n\n* Choosing $k$ paths in the tree.\n* Each path must start at node 1 (the root).\n* For each node $i$ in the tree, let $c_i$ be the number of paths that include node $i$.\n* For any two nodes $u$ and $v$ that have the same parent, the absolute difference between $c_u$ and $c_v$ must be at most 1.\n\nThe maximum sum you can achieve is the sum of  $c_i * s_i$ for all nodes $i$. \n\n\n\nInput:\n\n* The first line contains the number of test cases $t$.\n* For each test case:\n    * The first line contains two integers $n$ (number of nodes) and $k$ (number of paths).\n    * The second line contains $n-1$ integers representing the parent of each node (except the root, which is node 1).\n    * The third line contains $n$ integers representing the scores of each node.\n\nOutput:\n\n* For each test case, print the maximum possible sum."}, {"prompt_md5": "ec7907e7", "template_md5": "465699a0", "result": "You have a tree-shaped structure with numbered nodes. Each node has a score. You need to choose a set of paths that start at the root and visit some nodes. The paths can overlap.  The goal is to maximize the sum of the scores of the nodes visited by the paths, while ensuring that for any two nodes with the same parent, the difference in the number of paths visiting them is at most 1."}]}