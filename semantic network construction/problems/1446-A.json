{"uid": "1446-A", "url": "https://codeforces.com/contest/1446/problem/A", "tags": ["constructive algorithms", " greedy", " sortings"], "title": "1446-A", "statement": "A. Knapsacktime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou have a knapsack with the capacity of $$$W$$$. There are also $$$n$$$ items, the $$$i$$$-th one has weight $$$w_i$$$.You want to put some of these items into the knapsack in such a way that their total weight $$$C$$$ is at least half of its size, but (obviously) does not exceed it. Formally, $$$C$$$ should satisfy: $$$\\\\lceil \\\\frac{W}{2}\\\\rceil \\\\le C \\\\le W$$$.Output the list of items you will put into the knapsack or determine that fulfilling the conditions is impossible.If there are several possible lists of items satisfying the conditions, you can output any. Note that youdon'thave to maximize the sum of weights of items in the knapsack.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$). Description of the test cases follows.The first line of each test case contains integers $$$n$$$ and $$$W$$$ ($$$1 \\\\le n \\\\le 200\\\\,000$$$, $$$1\\\\le W \\\\le 10^{18}$$$).The second line of each test case contains $$$n$$$ integers $$$w_1, w_2, \\\\dots, w_n$$$ ($$$1 \\\\le w_i \\\\le 10^9$$$) — weights of the items.The sum of $$$n$$$ over all test cases does not exceed $$$200\\\\,000$$$.OutputFor each test case, if there is no solution, print a single integer $$$-1$$$.If there exists a solution consisting of $$$m$$$ items, print $$$m$$$ in the first line of the output and $$$m$$$ integers $$$j_1$$$, $$$j_2$$$, ..., $$$j_m$$$ ($$$1 \\\\le j_i \\\\le n$$$,all $$$j_i$$$ are distinct) in the second line of the output  — indices of the items you would like to pack into the knapsack.If there are several possible lists of items satisfying the conditions, you can output any. Note that youdon'thave to maximize the sum of weights items in the knapsack.ExampleInput3 1 3 3 6 2 19 8 19 69 9 4 7 12 1 1 1 17 1 1 1Output1 1 -1 6 1 2 3 5 6 7NoteIn the first test case, you can take the item of weight $$$3$$$ and fill the knapsack just right.In the second test case, all the items are larger than the knapsack's capacity. Therefore, the answer is $$$-1$$$.In the third test case, you fill the knapsack exactly in half.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "78dcc738", "template_md5": "35d339e4", "result": "You have a knapsack with a maximum weight capacity of $W$. There are $n$ items, each with a weight $w_i$.  \n\nYou need to choose some items to put in the knapsack so that:\n\n* The total weight of the items in the knapsack ($C$) is at least half the knapsack's capacity: $\\lceil \\frac{W}{2} \\rceil \\le C$\n* The total weight of the items in the knapsack does not exceed the knapsack's capacity: $C \\le W$\n\nOutput a list of the indices of the items you choose to put in the knapsack. If it's impossible to find a set of items that meet these conditions, output -1. \n\n**Input:**\n\n* The first line contains the number of test cases, $t$.\n* For each test case:\n    * The first line contains two integers, $n$ (the number of items) and $W$ (the knapsack's capacity).\n    * The second line contains $n$ integers, $w_1, w_2, ..., w_n$ (the weights of the items).\n\n**Output:**\n\n* For each test case:\n    * If no solution exists, output -1.\n    * If a solution exists, output:\n        * The number of items chosen, $m$.\n        * A list of $m$ integers, $j_1, j_2, ..., j_m$ (the indices of the chosen items)."}, {"prompt_md5": "e4e94916", "template_md5": "465699a0", "result": "You have a container with a maximum weight limit. You have a list of items, each with a weight.  \n\nChoose some items to put in the container so that their total weight is at least half the container's limit, but not more than the limit. \n\nIf you can't find a combination of items that meets these conditions, say so. If you can, list the items you chose."}]}