{"uid": "1385-D", "url": "https://codeforces.com/contest/1385/problem/D", "tags": ["bitmasks", " brute force", " divide and conquer", " dp", " implementation"], "title": "1385-D", "statement": "D. a-Good Stringtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a string $$$s[1 \\\\dots n]$$$ consisting of lowercase Latin letters. It is guaranteed that $$$n = 2^k$$$ for some integer $$$k \\\\ge 0$$$.The string $$$s[1 \\\\dots n]$$$ is called$$$c$$$-goodifat least oneof the following three conditions is satisfied:The length of $$$s$$$ is $$$1$$$, and it consists of the character $$$c$$$ (i.e. $$$s_1=c$$$);The length of $$$s$$$ is greater than $$$1$$$, the first half of the string consists of only the character $$$c$$$ (i.e. $$$s_1=s_2=\\\\dots=s_{\\\\frac{n}{2}}=c$$$) and the second half of the string (i.e. the string $$$s_{\\\\frac{n}{2} + 1}s_{\\\\frac{n}{2} + 2} \\\\dots s_n$$$) is a$$$(c+1)$$$-goodstring;The length of $$$s$$$ is greater than $$$1$$$, the second half of the string consists of only the character $$$c$$$ (i.e. $$$s_{\\\\frac{n}{2} + 1}=s_{\\\\frac{n}{2} + 2}=\\\\dots=s_n=c$$$) and the first half of the string (i.e. the string $$$s_1s_2 \\\\dots s_{\\\\frac{n}{2}}$$$) is a$$$(c+1)$$$-goodstring.For example: \"aabc\" is'a'-good, \"ffgheeee\" is'e'-good.In one move, you can choose one index $$$i$$$ from $$$1$$$ to $$$n$$$ and replace $$$s_i$$$ with any lowercase Latin letter (any character from 'a' to 'z').Your task is to find the minimum number of moves required to obtain an'a'-goodstring from $$$s$$$ (i.e.$$$c$$$-good stringfor $$$c=$$$ 'a'). It is guaranteed that the answer always exists.You have to answer $$$t$$$ independent test cases.Another example of an'a'-goodstring is as follows. Consider the string $$$s = $$$\"cdbbaaaa\". It is an'a'-goodstring, because:the second half of the string (\"aaaa\") consists of only the character 'a';the first half of the string (\"cdbb\") is'b'-goodstring, because:the second half of the string (\"bb\") consists of only the character 'b';the first half of the string (\"cd\") is'c'-goodstring, because:the first half of the string (\"c\") consists of only the character 'c';the second half of the string (\"d\") is'd'-goodstring.InputThe first line of the input contains one integer $$$t$$$ ($$$1 \\\\le t \\\\le 2 \\\\cdot 10^4$$$) — the number of test cases. Then $$$t$$$ test cases follow.The first line of the test case contains one integer $$$n$$$ ($$$1 \\\\le n \\\\le 131~072$$$) — the length of $$$s$$$. It is guaranteed that $$$n = 2^k$$$ for some integer $$$k \\\\ge 0$$$. The second line of the test case contains the string $$$s$$$ consisting of $$$n$$$ lowercase Latin letters.It is guaranteed that the sum of $$$n$$$ does not exceed $$$2 \\\\cdot 10^5$$$ ($$$\\\\sum n \\\\le 2 \\\\cdot 10^5$$$).OutputFor each test case, print the answer — the minimum number of moves required to obtain an'a'-goodstring from $$$s$$$ (i.e.$$$c$$$-good stringwith $$$c =$$$ 'a'). It is guaranteed that the answer exists.ExampleInput6 8 bbdcaaaa 8 asdfghjk 8 ceaaaabb 8 bbaaddcc 1 z 2 acOutput0 7 4 5 1 1", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "7a5f6431", "template_md5": "35d339e4", "result": "You are given a string of lowercase letters. The length of the string is a power of 2 (like 1, 2, 4, 8, 16, etc.).\n\nA string is considered \"a-good\" if:\n\n* It has only one letter, and that letter is 'a'.\n* It has more than one letter, and the first half of the string is all 'a's, and the second half is a \" (a+1)-good\" string.\n* It has more than one letter, and the second half of the string is all 'a's, and the first half is a \" (a+1)-good\" string.\n\nYou can change one letter in the string at a time.  \n\nFind the fewest changes needed to make the string \"a-good\". \n\n\nYou will be given multiple test cases, each with a different string."}, {"prompt_md5": "8f178333", "template_md5": "465699a0", "result": "You are given a string of lowercase letters. The string's length is a power of 2.  You can change one letter at a time.  Find the fewest changes needed to make the string \"good\". A string is \"good\" if:\n\n* It has only one letter.\n* It's split in half, and the first half is all the same letter, and the second half is a \"good\" string.\n* It's split in half, and the second half is all the same letter, and the first half is a \"good\" string."}]}