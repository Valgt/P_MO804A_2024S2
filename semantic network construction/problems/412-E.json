{"uid": "412-E", "url": "https://codeforces.com/contest/412/problem/E", "tags": ["implementation"], "title": "412-E", "statement": "E. E-mail Addressestime limit per test1 secondmemory limit per test256 megabytesinputstdinoutputstdoutOne of the most important products of the R1 company is a popular @r1.com mail service. The R1 mailboxes receive and send millions of emails every day.Today, the online news thundered with terrible information. The R1 database crashed and almost no data could be saved except for one big string. The developers assume that the string contains the letters of some users of the R1 mail. Recovering letters is a tedious mostly manual work. So before you start this process, it was decided to estimate the difficulty of recovering. Namely, we need to calculate the number of different substrings of the saved string that form correct e-mail addresses.We assume that valid addresses are only the e-mail addresses which meet the following criteria:the address should begin with a non-empty sequence of letters, numbers, characters '_', starting with a letter;then must go character '@';then must go a non-empty sequence of letters or numbers;then must go character '.';the address must end with a non-empty sequence of letters.You got lucky again and the job was entrusted to you! Please note that the substring is several consecutive characters in a string. Two substrings, one consisting of the characters of the string with numbersl1,l1+ 1,l1+ 2, ...,r1and the other one consisting of the characters of the string with numbersl2,l2+ 1,l2+ 2, ...,r2, are considered distinct ifl1≠l2orr1≠r2.InputThe first and the only line contains the sequence of characterss1s2...sn(1 ≤n≤ 106)— the saved string. It is guaranteed that the given string contains only small English letters, digits and characters '.', '_', '@'.OutputPrint in a single line the number of substrings that are valid e-mail addresses.ExamplesInput[email protected]Output18Input[email protected]@[email protected]Output8Input[email protected]Output1Input.asd123__..@Output0NoteIn the first test case all the substrings that are correct e-mail addresses begin from one of the letters of the word agapov and end in one of the letters of the word com.In the second test case note that the e-mail[email protected]is considered twice in the answer. Note that in this example the e-mail entries overlap inside the string.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "1e73b616", "template_md5": "35d339e4", "result": "You are given a string of characters.  Find the number of substrings within the string that form valid email addresses. \n\nA valid email address must follow this structure:\n\n* Start with one or more letters, numbers, or underscores, starting with a letter.\n* Followed by the \"@\" symbol.\n* Followed by one or more letters or numbers.\n* Followed by a \".\" symbol.\n* Followed by one or more letters.\n\n\n\nFor example:\n\n* \"john.doe@example.com\" is a valid email address.\n* \"123@example\" is not a valid email address (missing the domain extension).\n* \"john@example\" is not a valid email address (missing the domain extension). \n\n\nLet me know if you'd like help with the code to solve this problem!"}, {"prompt_md5": "036fbecc", "template_md5": "465699a0", "result": "Count the number of valid email addresses that can be formed from a given string.  A valid email address must have the following structure:\n\n* Start with one or more letters, numbers, or underscores, starting with a letter.\n* Followed by \"@\".\n* Followed by one or more letters or numbers.\n* Followed by \".\".\n* Followed by one or more letters."}]}