{"uid": "1681-E", "url": "https://codeforces.com/contest/1681/problem/E", "tags": ["data structures", " dp", " matrices", " shortest paths"], "title": "1681-E", "statement": "E. Labyrinth Adventurestime limit per test6 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou found a map of a weirdly shaped labyrinth. The map is a grid, consisting of $$$n$$$ rows and $$$n$$$ columns. The rows of the grid are numbered from $$$1$$$ to $$$n$$$ from bottom to top. The columns of the grid are numbered from $$$1$$$ to $$$n$$$ from left to right.The labyrinth has $$$n$$$ layers. The first layer is the bottom left corner (cell $$$(1, 1)$$$). The second layer consists of all cells that are in the grid and adjacent to the first layer by a side or a corner. The third layer consists of all cells that are in the grid and adjacent to the second layer by a side or a corner. And so on.The labyrinth with $$$5$$$ layers, for example, is shaped as follows:The layers are separated from one another with walls. However, there are doors in these walls.Each layer (except for layer $$$n$$$) has exactly two doors to the next layer. One door is placed on the top wall of the layer and another door is placed on the right wall of the layer. For each layer from $$$1$$$ to $$$n-1$$$ you are given positions of these two doors. The doors can be passed in both directions: either from layer $$$i$$$ to layer $$$i+1$$$ or from layer $$$i+1$$$ to layer $$$i$$$.If you are standing in some cell, you can move to an adjacent by a side cell if a wall doesn't block your move (e.g. you can't move to a cell in another layer if there is no door between the cells).Now you have $$$m$$$ queries of sort: what's the minimum number of moves one has to make to go from cell $$$(x_1, y_1)$$$ to cell $$$(x_2, y_2)$$$.InputThe first line contains a single integer $$$n$$$ ($$$2 \\\\le n \\\\le 10^5$$$) — the number of layers in the labyrinth.The $$$i$$$-th of the next $$$n-1$$$ lines contains four integers $$$d_{1,x}, d_{1,y}, d_{2,x}$$$ and $$$d_{2,y}$$$ ($$$1 \\\\le d_{1,x}, d_{1,y}, d_{2,x}, d_{2,y} \\\\le n$$$) — the coordinates of the doors. Both cells are on the $$$i$$$-th layer. The first cell is adjacent to the top wall of the $$$i$$$-th layer by a side — that side is where the door is. The second cell is adjacent to the right wall of the $$$i$$$-th layer by a side — that side is where the door is.The next line contains a single integer $$$m$$$ ($$$1 \\\\le m \\\\le 2 \\\\cdot 10^5$$$) — the number of queries.The $$$j$$$-th of the next $$$m$$$ lines contains four integers $$$x_1, y_1, x_2$$$ and $$$y_2$$$ ($$$1 \\\\le x_1, y_1, x_2, y_2 \\\\le n$$$) — the coordinates of the cells in the $$$j$$$-th query.OutputFor each query, print a single integer — the minimum number of moves one has to make to go from cell $$$(x_1, y_1)$$$ to cell $$$(x_2, y_2)$$$.ExamplesInput2 1 1 1 1 10 1 1 1 1 1 1 1 2 1 1 2 1 1 1 2 2 1 2 1 2 1 2 2 1 1 2 2 2 2 1 2 1 2 1 2 2 2 2 2 2Output0 1 1 2 0 2 1 0 1 0Input4 1 1 1 1 2 1 2 2 3 2 1 3 5 2 4 4 3 4 4 3 3 1 2 3 3 2 2 4 4 1 4 2 3Output3 4 3 6 2NoteHere is the map of the labyrinth from the second example. The doors are marked red.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "4f7ec3e1", "template_md5": "35d339e4", "result": "You are given a grid of size $n \\times n$ representing a labyrinth with $n$ layers. \n\n* Each layer is connected to the next layer by two doors: one on the top wall and one on the right wall.\n* You are given the coordinates of these doors for each layer.\n* You can move to an adjacent cell (up, down, left, right) if there is no wall blocking the way.\n\nFor each query, you are given two cells $(x_1, y_1)$ and $(x_2, y_2)$ in the labyrinth. Find the minimum number of moves required to travel from cell $(x_1, y_1)$ to cell $(x_2, y_2)$."}, {"prompt_md5": "a8cbd919", "template_md5": "465699a0", "result": "You have a grid with multiple layers. Each layer has two doors, one on the top and one on the right, connecting it to the next layer. You are given the positions of these doors for each layer. You need to find the minimum number of moves required to travel from one cell to another cell in the grid."}]}