{"uid": "1357-D1", "url": "https://codeforces.com/contest/1357/problem/D1", "tags": [], "title": "1357-D1", "statement": "D1. Quantum Classification - Dataset 3time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given atraining dataset, in which each entry is a features vector (an array of 2 real numbers) and a label 0 or 1 indicating the class to which this vector belongs.Your goal is to use this dataset to train a quantum classification model that will accurately classify a validation dataset - a different dataset generated using the same data distribution as the training one. The error rate of classifying the validation dataset using your model (the percentage of incorrectly classified samples) should be less than 5%.The quantum classification library that will use your model to classify the data is documentedhere.This tutorialhas an end-to-end example of training a model using this library as a Python notebook.Thewarmup round editorialdiscusses solving easier problems features in the warmup round.You can find the exact implementation of the testing harness for the D problems of this round, including the preprocessing methods,here.You can find examples of training a model and using it for classificationhere.InputYour code will not be given any inputs. Instead, you should use theprovided dataset fileto train your model.The training dataset is represented as a JSON file and consists of two arrays, \"Features\" and \"Labels\". Each array has exactly 400 elements. Each element of the \"Features\" array is an array with 2 elements, each of them a floating-point number. Each element of the \"Labels\" array is the label of the class to which the corresponding element of the \"Features\" array belongs, 0 or 1.OutputYour code should return the description of the model you'd like to use in the following format:The model is described using a tuple((Int, Double[]), ControlledRotation[], (Double[], Double)).The first element of the tuple describes the classical preprocessing you perform on the data before encoding it into the quantum classifier.The second element of the tuple describes circuit geometry of the model as an array of controlled rotation gates.The third element of the tuple describes numeric parameters of the model and is a tuple of an array of rotation angles used by the gates and the bias used to decide the class of the model.Your code should have the following signature:namespace Solution {open Microsoft.Quantum.MachineLearning;operation Solve () : ((Int, Double[]), ControlledRotation[], (Double[], Double)) {// your code here}}Classical preprocessingThis step allows you to add new features to the data before encoding it in the quantum state and feeding it into the classifier circuit. To do this, you need to pick one of the available preprocessing methods and return a tuple of its index and its parameters. The parameters of all methods areDouble[].Method 1: padding.The resulting data is a concatenation of the parameters and the features.Method 2: tensor product.The resulting data is an array of pairwise products of the elements of the parameters and the features.Method 3: fanout.The resulting data is a tensor product of the parameters, the features and the features (so that you have access to all pairwise products of features).Method 4: split fanout.The resulting data is tensor product of (concatenation of the left halves of parameters and features) and (concatenation of the right halves).Default method: no preprocessing.The features remain unchanged, the parameters are ignored. This method is used when any index other than 1-4 is returned.After the preprocessing step the resulting data is encoded in the quantum state using amplitudes encoding: element $$$j$$$ of the data is encoded in the amplitude of basis state $$$|j\\\\rangle$$$. If the length of the data array is not a power of 2, it is right-padded with $$$0$$$s to the nearest power of two; the number of qubits used for encoding is the exponent of that power.NoteNote that majority of the data analysis is going to happen \"offline\" before you submit the solution. The solution has to contain only the description of the trained model, not the training code itself - if you attempt to train the model \"online\" in your submitted code during the evaluation process, it will very likely time out.Training your model offline is likely to involve:Defining the circuit structure that your model will use.Generating several parameter seed vectors - the values from which training the model will start.Selecting appropriate hyperparameters of the training process (learning rate, batch size, tolerance, maximal number of iterations etc.)Training a number of classification models (one per each seed vector and hyperparameter combination)Selecting the best trained model and submitting it.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "231d3bf8", "template_md5": "35d339e4", "result": "You are given a training dataset with 400 data points. Each data point consists of a 2-dimensional feature vector and a label (0 or 1). Your goal is to train a quantum classification model that can accurately classify a separate validation dataset (also with 400 data points) with an error rate less than 5%.\n\nYou can use a provided quantum classification library to train your model. The library allows you to:\n\n* **Preprocess the data:** You can choose from four preprocessing methods:\n    * **Padding:** Add extra features to the data.\n    * **Tensor product:** Create new features by multiplying existing features together.\n    * **Fanout:** Create features by taking all pairwise products of the features.\n    * **Split fanout:** Similar to fanout, but splits the features into two parts and creates products between them.\n    * **No preprocessing:** Use the original features without any changes.\n* **Define the model structure:** You can design a quantum circuit with controlled rotation gates.\n* **Set model parameters:** You need to specify the rotation angles for the gates and a bias value used for classification.\n\nYou need to submit a description of your trained model in a specific format:\n\n`( (preprocessing_method_index, preprocessing_parameters), controlled_rotation_gates, (rotation_angles, bias) )`\n\n**Important Notes:**\n\n* You cannot train the model during the submission process. You need to train it offline and submit the trained model description.\n* The training process involves selecting appropriate hyperparameters (learning rate, batch size, etc.) and training multiple models with different parameter seeds and hyperparameter combinations.\n* The best performing model should be selected and submitted."}, {"prompt_md5": "53b79c4c", "template_md5": "465699a0", "result": "You are given a dataset of data points with labels. Your task is to create a model that can classify new data points into the correct label. You must use a quantum model and the provided library. The model must have an error rate of less than 5% on a separate validation dataset."}]}