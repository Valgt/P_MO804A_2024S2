{"uid": "1097-C", "url": "https://codeforces.com/contest/1097/problem/C", "tags": ["greedy", " implementation"], "title": "1097-C", "statement": "C. Yuhao and a Parenthesistime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputOne day, Yuhao came across a problem about checking if some bracket sequences are correct bracket sequences.A bracket sequence is any non-empty sequence of opening and closing parentheses. A bracket sequence is called acorrect bracket sequenceif it's possible to obtain a correct arithmetic expression by inserting characters \"+\" and \"1\" into this sequence. For example, the sequences \"(())()\", \"()\" and \"(()(()))\" are correct, while the bracket sequences \")(\", \"(()\" and \"(()))(\" are not correct.Yuhao found this problem too simple for him so he decided to make the problem harder. You are given many (not necessarily correct) bracket sequences. The task is to connect some of them into ordered pairs so that each bracket sequence occurs in at most one pair and the concatenation of the bracket sequences in each pair is a correct bracket sequence. The goal is to create as many pairs as possible.This problem unfortunately turned out to be too difficult for Yuhao. Can you help him and solve it?InputThe first line contains one integer $$$n$$$ ($$$1 \\\\leq n \\\\leq 10^5$$$) — the number of bracket sequences.Each of the following $$$n$$$ lines contains one bracket sequence — a non-empty string which consists only of characters \"(\" and \")\".The sum of lengths of all bracket sequences in the input is at most $$$5 \\\\cdot 10^5$$$.Note that a bracket sequence may appear in the input multiple times. In this case, you can use each copy of the sequence separately. Also note that the order in which strings appear in the input doesn't matter.OutputPrint a single integer — the maximum number of pairs which can be made, adhering to the conditions in the statement.ExamplesInput7 )()) ) (( (( ( ) )Output2Input4 ( (( ((( (())Output0Input2 (()) ()Output1NoteIn the first example, it's optimal to construct two pairs: \"((     )())\" and \"(     )\".", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "43334c05", "template_md5": "35d339e4", "result": "You are given a list of bracket sequences, each consisting only of \"(\" and \")\".  \n\nYour task is to pair up these sequences so that:\n\n* Each sequence is used in at most one pair.\n* When two sequences are paired together and concatenated (joined end-to-end), the resulting sequence forms a valid bracket sequence. A valid bracket sequence can be transformed into a correct arithmetic expression by inserting \"+\" and \"1\" characters.\n\nFind the maximum number of pairs you can create."}, {"prompt_md5": "ed7ed630", "template_md5": "465699a0", "result": "You are given a list of strings, each consisting only of parentheses.  Determine the maximum number of pairs of strings you can make, where each string appears in at most one pair, and the concatenation of the strings in each pair forms a valid parenthesis sequence."}]}