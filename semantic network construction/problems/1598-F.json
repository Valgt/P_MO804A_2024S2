{"uid": "1598-F", "url": "https://codeforces.com/contest/1598/problem/F", "tags": ["binary search", " bitmasks", " brute force", " data structures", " dp"], "title": "1598-F", "statement": "F. RBStime limit per test3 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputA bracket sequence is a string containing only characters \"(\" and \")\". A regular bracket sequence (or, shortly, an RBS) is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"1\" and \"+\" between the original characters of the sequence. For example:bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\");bracket sequences \")(\", \"(\" and \")\" are not.Let's denote the concatenation of two strings $$$x$$$ and $$$y$$$ as $$$x+y$$$. For example, \"()()\" $$$+$$$ \")(\" $$$=$$$ \"()())(\".You are given $$$n$$$ bracket sequences $$$s_1, s_2, \\\\dots, s_n$$$. You can rearrange them in any order (you can rearrange only the strings themselves, but not the characters in them).Your task is to rearrange the strings in such a way that the string $$$s_1 + s_2 + \\\\dots + s_n$$$ has as many non-empty prefixes that are RBS as possible.InputThe first line contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 20$$$).Then $$$n$$$ lines follow, the $$$i$$$-th of them contains $$$s_i$$$ — a bracket sequence (a string consisting of characters \"(\" and/or \")\". All sequences $$$s_i$$$ are non-empty, their total length does not exceed $$$4 \\\\cdot 10^5$$$.OutputPrint one integer — the maximum number of non-empty prefixes that are RBS for the string $$$s_1 + s_2 + \\\\dots + s_n$$$, if the strings $$$s_1, s_2, \\\\dots, s_n$$$ can be rearranged arbitrarily.ExamplesInput2 ( )Output1Input4 ()()()) ( ( )Output4Input1 (())Output1Input1 )(()Output0NoteIn the first example, you can concatenate the strings as follows: \"(\" $$$+$$$ \")\" $$$=$$$ \"()\", the resulting string will have one prefix, that is an RBS: \"()\".In the second example, you can concatenate the strings as follows: \"(\" $$$+$$$ \")\" $$$+$$$ \"()()())\" $$$+$$$ \"(\" $$$=$$$ \"()()()())(\", the resulting string will have four prefixes that are RBS: \"()\", \"()()\", \"()()()\", \"()()()()\".The third and the fourth examples contain only one string each, so the order is fixed.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "b1f0b4ab", "template_md5": "35d339e4", "result": "You are given $n$ bracket sequences. Each sequence is a string containing only \"(\" and \")\".  \n\nA valid bracket sequence can be turned into a mathematical expression by inserting \"1\" and \"+\" between the brackets. For example, \"()\" can be turned into \"(1+1)\".\n\nYou can rearrange the given sequences in any order.  \n\nYour task is to find the maximum number of prefixes in the combined sequence that are valid bracket sequences. \n\n**Input:**\n\n* The first line contains an integer $n$ (1 ≤ $n$ ≤ 20), the number of sequences.\n* The next $n$ lines each contain a bracket sequence.\n\n**Output:**\n\n* Print a single integer, the maximum number of valid prefixes."}, {"prompt_md5": "657ae7ce", "template_md5": "465699a0", "result": "You are given a list of bracket sequences. You can rearrange the sequences in any order.  Find the arrangement that creates the longest possible string with the most valid prefixes (prefixes that can be turned into a correct mathematical expression)."}]}