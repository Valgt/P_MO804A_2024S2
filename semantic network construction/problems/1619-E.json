{"uid": "1619-E", "url": "https://codeforces.com/contest/1619/problem/E", "tags": ["constructive algorithms", " data structures", " dp", " greedy", " implementation", " math", " sortings"], "title": "1619-E", "statement": "E. MEX and Incrementstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputDmitry has an array of $$$n$$$ non-negative integers $$$a_1, a_2, \\\\dots, a_n$$$.In one operation, Dmitry can choose any index $$$j$$$ ($$$1 \\\\le j \\\\le n$$$) and increase the value of the element $$$a_j$$$ by $$$1$$$. He can choose the same index $$$j$$$ multiple times.For each $$$i$$$ from $$$0$$$ to $$$n$$$, determine whether Dmitry can make the $$$\\\\mathrm{MEX}$$$ of the array equal to exactly $$$i$$$. If it is possible, then determine the minimum number of operations to do it.The $$$\\\\mathrm{MEX}$$$ of the array is equal to the minimum non-negative integer that is not in the array. For example, the $$$\\\\mathrm{MEX}$$$ of the array $$$[3, 1, 0]$$$ is equal to $$$2$$$, and the array $$$[3, 3, 1, 4]$$$ is equal to $$$0$$$.InputThe first line of input data contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$) — the number of test cases in the input.The descriptions of the test cases follow.The first line of the description of each test case contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 2 \\\\cdot 10^5$$$) — the length of the array $$$a$$$.The second line of the description of each test case contains $$$n$$$ integers $$$a_1, a_2, \\\\dots, a_n$$$ ($$$0 \\\\le a_i \\\\le n$$$) — elements of the array $$$a$$$.It is guaranteed that the sum of the values $$$n$$$ over all test cases in the test does not exceed $$$2\\\\cdot10^5$$$.OutputFor each test case, output $$$n + 1$$$ integer — $$$i$$$-th number is equal to the minimum number of operations for which you can make the array $$$\\\\mathrm{MEX}$$$ equal to $$$i$$$ ($$$0 \\\\le i \\\\le n$$$), or-1if this cannot be done.ExampleInput5 3 0 1 3 7 0 1 2 3 4 3 2 4 3 0 0 0 7 4 6 2 3 5 0 5 5 4 0 1 0 4Output1 1 0 -1  1 1 2 2 1 0 2 6  3 0 1 4 3  1 0 -1 -1 -1 -1 -1 -1  2 1 0 2 -1 -1NoteIn the first set of example inputs, $$$n=3$$$:to get $$$\\\\mathrm{MEX}=0$$$, it is enough to perform one increment: $$$a_1$$$++;to get $$$\\\\mathrm{MEX}=1$$$, it is enough to perform one increment: $$$a_2$$$++;$$$\\\\mathrm{MEX}=2$$$ for a given array, so there is no need to perform increments;it is impossible to get $$$\\\\mathrm{MEX}=3$$$ by performing increments.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "10e21b3d", "template_md5": "35d339e4", "result": "You are given an array of $n$ non-negative integers $a_1, a_2, ..., a_n$. You can perform an operation where you choose an index $j$ and increase the value of $a_j$ by 1. You can choose the same index multiple times.\n\nFor each integer $i$ from 0 to $n$, determine if it is possible to make the MEX of the array equal to $i$ by performing these operations. If it is possible, determine the minimum number of operations required.\n\nThe MEX (Minimum Excluded) of an array is the smallest non-negative integer that is not present in the array.\n\n\nFor example, the MEX of the array $[3, 1, 0]$ is 2, and the MEX of the array $[3, 3, 1, 4]$ is 0."}, {"prompt_md5": "f77bfe90", "template_md5": "465699a0", "result": "You are given a list of numbers. You can increase any number in the list by 1, any number of times.  For each number from 0 up to the length of the list, determine if it's possible to make the smallest missing number in the list equal to that number. If it's possible, also determine the fewest increases needed."}]}