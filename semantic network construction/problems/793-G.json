{"uid": "793-G", "url": "https://codeforces.com/contest/793/problem/G", "tags": ["data structures", " divide and conquer", " flows", " graph matchings"], "title": "793-G", "statement": "G. Oleg and chesstime limit per test6.5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputOleg the bank client solves an interesting chess problem: place onn×nchessboard the maximum number of rooks so that they don't beat each other. Of course, no two rooks can share the same cell.Remind that a rook standing in the cell(a,b)beats a rook standing in the cell(x,y)if and only ifa=xorb=y.Unfortunately (of fortunately?) for Oleg the answer in this problem was alwaysn, so the task bored Oleg soon. He decided to make it more difficult by removing some cells from the board. If a cell is deleted, Oleg can't put a rook there, but rooks do beat each other \"through\" deleted cells.Oleg deletes the cells in groups, namely, he repeatedly choose a rectangle with sides parallel to the board sides and deletes all the cells inside the rectangle. Formally, if he chooses a rectangle, lower left cell of which has coordinates(x1,y1), and upper right cell of which has coordinates(x2,y2), then he deletes all such cells with coordinates(x,y)thatx1≤x≤x2andy1≤y≤y2. It is guaranteed that no cell is deleted twice, i.e. the chosen rectangles do not intersect.This version of the problem Oleg can't solve, and his friend Igor is busy at a conference, so he can't help Oleg.You are the last hope for Oleg! Help him: given the size of the board and the deleted rectangles find the maximum possible number of rooks that could be placed on the board so that no two rooks beat each other.InputThe first line contains single integern(1  ≤n≤  10000) — the size of the board.The second line contains single integerq(0  ≤q≤  10000) — the number of deleted rectangles.The nextqlines contain the information about the deleted rectangles.Each of these lines contains four integersx1,y1,x2andy2(1  ≤x1≤x2≤n,1  ≤y1≤y2≤n) — the coordinates of the lower left and the upper right cells of a deleted rectangle.If is guaranteed that the rectangles do not intersect.OutputIn the only line print the maximum number of rooks Oleg can place on the board so that no two rooks beat each other.ExamplesInput551 1 2 11 3 1 54 1 5 52 5 2 53 2 3 5Output3Input842 2 4 61 8 1 87 1 8 25 4 6 8Output8NoteHere is the board and the example of rooks placement in the first example:", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "759de5ef", "template_md5": "35d339e4", "result": "You are given an $n \\times n$ chessboard. Some cells on the board are removed, forming rectangles.  \n\nDetermine the maximum number of rooks that can be placed on the board such that no two rooks attack each other. Two rooks attack each other if they share the same row or column.  \n\n**Input:**\n\n* The first line contains an integer $n$ (1 ≤ $n$ ≤ 10000), the size of the chessboard.\n* The second line contains an integer $q$ (0 ≤ $q$ ≤ 10000), the number of removed rectangles.\n* The next $q$ lines each contain four integers $x_1$, $y_1$, $x_2$, and $y_2$ (1 ≤ $x_1$ ≤ $x_2$ ≤ $n$, 1 ≤ $y_1$ ≤ $y_2$ ≤ $n$), representing the coordinates of the lower-left and upper-right corners of each removed rectangle.\n\n**Output:**\n\n* Print a single integer, the maximum number of rooks that can be placed on the board."}, {"prompt_md5": "d6137ee0", "template_md5": "465699a0", "result": "You are given a square grid of a certain size. Some cells in the grid are removed, forming rectangles.  Determine the maximum number of objects that can be placed on the grid so that no two objects can \"attack\" each other. Objects can only attack if they are in the same row or column."}]}