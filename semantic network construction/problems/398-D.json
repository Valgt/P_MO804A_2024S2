{"uid": "398-D", "url": "https://codeforces.com/contest/398/problem/D", "tags": ["data structures"], "title": "398-D", "statement": "D. Instant Messangertime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutUser ainta decided to make a new instant messenger called \"aintalk\". With aintalk, each user can chat with other people. User ainta made the prototype of some functions to implement this thing.login(u): Userulogins into aintalk and becomes online.logout(u): Userulogouts and becomes offline.add_friend(u,v): Useruand uservbecome friends. It means,uandvcan talk with each other. The friendship is bidirectional.del_friend(u,v): Unfriend useruand userv. It means,uandvcannot talk with each other from then.count_online_friends(u): The function returns the number of friends of useruwho are online at the moment.Because the messenger is being tested by some users numbered from1ton, there is no register method. This means, at the beginning, some users may be online, and some users may have friends.User ainta is going to make these functions, but before making the messenger public, he wants to know whether he is correct. Help ainta verify his code.InputThe first line contains three space-separated integersn,mandq(1 ≤n≤ 50000;1 ≤m≤ 150000;1 ≤q≤ 250000) — the number of users, the number of pairs of friends, and the number of queries.The second line contains an integero(1 ≤o≤n)— the number of online users at the beginning. The third line containsospace-separated integersx1,x2, ...,xo(1 ≤xi≤n) — the ids of the online users. It is guaranteed that these values are distinct.Each of the nextmlines contains two space-separated integersaiandbi(1 ≤ai,bi≤n;ai≠bi) — the ids of two users who are friends at the beginning. It is guaranteed there are no multiple friendship given in the input. Note that the friendship is bidirectional.Nextqlines describe theqqueries in the format:\"Ou\" (1 ≤u≤n) : Callonline(u). It is guaranteed that useruwas offline just before the function call.\"Fu\" (1 ≤u≤n) : Calloffline(u). It is guaranteed that useruwas online just before the function call.\"Auv\" (1 ≤u,v≤n;u≠v) : Calladd_friend(u,v). It is guaranteed that these two users weren't friends just before the function call.\"Duv\" (1 ≤u,v≤n;u≠v) : Calldel_friend(u,v). It is guaranteed that these two users were friends just before the function call.\"Cu\" (1 ≤u≤n) : Callcount_online_friends(u)and print the result in a single line.OutputFor eachcount_online_friends(u)query, print the required answer in a single line.ExamplesInput5 2 9141 33 4C 3A 2 5O 1D 1 3A 1 2A 4 2C 2F 4C 2Output121", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "3e245157", "template_md5": "35d339e4", "result": "You are given a social network with $n$ users. Initially, $o$ users are online. You are also given $m$ pairs of friends. \n\nYou will be given $q$ queries of the following types:\n\n* **O u**: User $u$ logs in.\n* **F u**: User $u$ logs out.\n* **A u v**: Users $u$ and $v$ become friends.\n* **D u v**: Users $u$ and $v$ unfriend each other.\n* **C u**: Return the number of friends of user $u$ who are currently online.\n\nProcess each query and output the result for each **C u** query."}, {"prompt_md5": "d1d20c9c", "template_md5": "465699a0", "result": "You are given a list of users and their initial friendships.  You will be given commands to add or remove friendships, log users in and out, and ask for the number of online friends a user has at a given time.  Output the number of online friends for each query."}]}