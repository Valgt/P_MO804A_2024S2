{"uid": "1750-E", "url": "https://codeforces.com/contest/1750/problem/E", "tags": ["binary search", " data structures", " divide and conquer", " dp", " greedy", " strings"], "title": "1750-E", "statement": "E. Bracket Costtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputDaemon Targaryen decided to stop looking like a Metin2 character. He turned himself into the most beautiful thing, a bracket sequence.For a bracket sequence, we can do two kind of operations:Select one of its substrings$$$^\\\\dagger$$$ and cyclic shift it to the right. For example, after a cyclic shift to the right, \"(())\" will become \")(()\";Insert any bracket, opening '(' or closing ')', wherever you want in the sequence.We define thecostof a bracket sequence as theminimumnumber of such operations to make it balanced$$$^\\\\ddagger$$$.Given a bracket sequence $$$s$$$ of length $$$n$$$, find the sum of costs across all its $$$\\\\frac{n(n+1)}{2}$$$ non-empty substrings. Note that for each substring we calculate the costindependently.$$$^\\\\dagger$$$ A string $$$a$$$ is a substring of a string $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.$$$^\\\\ddagger$$$ A sequence of brackets is called balanced if one can turn it into a valid math expression by adding characters $$$+$$$ and $$$1$$$. For example, sequences \"(())()\", \"()\", and \"(()(()))\" are balanced, while \")(\", \"(()\", and \"(()))(\" are not.InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\\\leq t \\\\leq 10^5$$$) — the number of test cases. The description of test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 2 \\\\cdot 10^5$$$) — the length of the bracket sequence.The second line of each test case contains a string $$$s$$$, consisting only of characters '(' and ')', of length $$$n$$$ — the bracket sequence.It is guaranteed that sum of $$$n$$$ across all test cases does not exceed $$$2 \\\\cdot 10^5$$$.OutputFor each test case, print a single integer — the sum of costs of all substrings of $$$s$$$.ExampleInput51)4)()(3())5(((((10)(())))())Output1 9 6 35 112NoteIn the first test case, there is the only substring \")\". Its cost is $$$1$$$ because we can insert '(' to the beginning of this substring and get a string \"()\", that is a balanced string.In the second test case, the cost of each substring of length one is $$$1$$$. The cost of a substring \")(\" is $$$1$$$ because we can cyclically shift it to right and get a string \"()\". The cost of strings \")()\" and \"()(\" is $$$1$$$ because its enough to insert one bracket to each of them. The cost of substring \")()(\" is $$$1$$$ because we can cyclically shift it to right and get a string \"()()\". So there are $$$4 + 2 + 2 + 1 = 9$$$ substring of cost $$$1$$$ and $$$1$$$ substring of cost $$$0$$$. So the sum of the costs is $$$9$$$.In the third test case,\"(\", the cost is $$$1$$$;\"()\", the cost is $$$0$$$;\"())\", the cost is $$$1$$$;\")\", the cost is $$$1$$$;\"))\", the cost is $$$2$$$;\")\", the cost is $$$1$$$.So the sum of the costs is $$$6$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "a3b21cae", "template_md5": "35d339e4", "result": "You are given a string of parentheses, consisting only of '(' and ')'.  \n\nYou can perform two operations on this string:\n\n1. **Cyclic Shift:** Choose a substring of the string and shift it one position to the right. For example, \"(())\" cyclically shifted to the right becomes \")(()\".\n2. **Insert Bracket:** Insert either a '(' or ')' anywhere in the string.\n\nThe **cost** of a string is the minimum number of operations needed to make it balanced. A balanced string can be transformed into a valid mathematical expression by adding '+' and '1' characters.\n\nFor each non-empty substring of the given string, calculate its cost independently. Then, sum up the costs of all substrings.\n\n**Input:**\n\n* The first line contains the number of test cases,  *t*.\n* For each test case:\n    * The first line contains the length of the string, *n*.\n    * The second line contains the string of parentheses.\n\n**Output:**\n\nFor each test case, print the sum of the costs of all substrings."}, {"prompt_md5": "e441513f", "template_md5": "465699a0", "result": "You are given a string of parentheses.  Find the total number of operations needed to make all substrings of the string balanced.  An operation can be either:\n\n1. Cyclically shifting a substring to the right.\n2. Inserting a parenthesis (either opening or closing) anywhere in the string. \n\n\nThe cost of a substring is the minimum number of operations needed to balance it."}]}