{"uid": "382-D", "url": "https://codeforces.com/contest/382/problem/D", "tags": ["dfs and similar", " graphs", " implementation", " trees"], "title": "382-D", "statement": "D. Ksenia and Pawnstime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutKsenia has a chessboard of sizen×m. Each cell of the chessboard contains one of the characters: \"<\", \">\", \"^\", \"v\", \"#\". The cells that contain character \"#\" are blocked. We know that all chessboard cells that touch the border are blocked.Ksenia is playing with two pawns on this chessboard. Initially, she puts the pawns on the chessboard. One cell of the chessboard can contain two pawns if and only if the cell is blocked. In other cases two pawns can not stand in one cell. The game begins when Ksenia put pawns on the board. In one move, Ksenia moves each pawn to a side adjacent cell in the direction of arrows painted on the cell on which the corresponding pawn sits (if the pawn sits on \"#\", it does not move). Assume that Ksenia moves pawns simultaneously (see the second test case).Of course, Ksenia plays for points. How can one calculate the points per game? Very simply! Let's count how many movements the first pawn made and how many movements the second pawn made, sum these two numbers — it will be the resulting score of the game.Ksenia wonders: what is the maximum number of points she can earn (for that, she should place the pawns optimally well early in the game). Help her and find that number.InputThe first line contains two integers,nandm(1 ≤n,m≤ 2000)— the sizes of the board. Each of the followingnlines containsmcharacters – the board's description. Each character is one of the characters: \"<\", \">\", \"^\", \"v\", \"#\".It is guaranteed that the border cells of the table are blocked cells (with character \"#\").OutputIf Ksenia can get infinitely many points, print -1. Otherwise, print the maximum number of points she can get.ExamplesInput1 1#Output0Input3 4#####>^#####Output3Input3 4#####><#####Output-1Input7 5#######v####v#########^####^#######Output4Input7 5#######v####v####<####^####^#######Output5", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "1e6eb9a8", "template_md5": "35d339e4", "result": "You are given a 2D grid of size $n \\times m$. Each cell in the grid can contain one of the following characters:\n\n* \"<\":  The pawn moves left.\n* \">\":  The pawn moves right.\n* \"^\":  The pawn moves up.\n* \"v\":  The pawn moves down.\n* \"#\":  The cell is blocked, and a pawn cannot move there.\n\nThe border cells of the grid are always blocked.\n\nTwo pawns are placed on the grid initially. In each move, each pawn moves to an adjacent cell in the direction indicated by the character in its current cell, if possible. Pawns cannot move into blocked cells.\n\nThe goal is to determine the maximum number of moves both pawns can make combined. \n\n**Input:**\n\n* The first line contains two integers, $n$ and $m$, representing the size of the grid.\n* The following $n$ lines each contain $m$ characters, representing the grid.\n\n**Output:**\n\n* If the pawns can make an infinite number of moves, print \"-1\".\n* Otherwise, print the maximum number of moves both pawns can make combined."}, {"prompt_md5": "b61bb58c", "template_md5": "465699a0", "result": "You are given a grid of cells. Some cells have arrows pointing in different directions, and some cells are blocked. Two pawns start on the grid and can move one cell at a time in the direction of the arrow on their cell. Pawns cannot occupy the same cell.  Find the maximum number of moves both pawns can make before they are unable to move."}]}