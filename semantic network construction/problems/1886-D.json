{"uid": "1886-D", "url": "https://codeforces.com/contest/1886/problem/D", "tags": ["combinatorics", " data structures", " math"], "title": "1886-D", "statement": "D. Monocarp and the Settime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputMonocarp has $$$n$$$ numbers $$$1, 2, \\\\dots, n$$$ and a set (initially empty). He adds his numbers to this set $$$n$$$ times in some order. During each step, he adds a new number (which has not been present in the set before). In other words, the sequence of added numbers is a permutation of length $$$n$$$.Every time Monocarp adds an element into the setexcept for the first time, he writes out a character:if the element Monocarp is trying to insert becomes the maximum element in the set, Monocarp writes out the character>;if the element Monocarp is trying to insert becomes the minimum element in the set, Monocarp writes out the character<;if none of the above, Monocarp writes out the character?.You are given a string $$$s$$$ of $$$n-1$$$ characters, which represents the characters written out by Monocarp (in the order he wrote them out). You have to process $$$m$$$ queries to the string. Each query has the following format:$$$i$$$ $$$c$$$ — replace $$$s_i$$$ with the character $$$c$$$.Both before processing the queries and after each query, you have to calculate the number of different ways to order the integers $$$1, 2, 3, \\\\dots, n$$$ such that, if Monocarp inserts the integers into the set in that order, he gets the string $$$s$$$. Since the answers might be large, print them modulo $$$998244353$$$.InputThe first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\\\le n \\\\le 3 \\\\cdot 10^5$$$; $$$1 \\\\le m \\\\le 3 \\\\cdot 10^5$$$).The second line contains the string $$$s$$$, consisting of exactly $$$n-1$$$ characters<,>and/or?.Then $$$m$$$ lines follow. Each of them represents a query. Each line contains an integer $$$i$$$ and a character $$$c$$$ ($$$1 \\\\le i \\\\le n-1$$$; $$$c$$$ is either<,>, or?).OutputBoth before processing the queries and after each query, print one integer — the number of ways to order the integers $$$1, 2, 3, \\\\dots, n$$$ such that, if Monocarp inserts the integers into the set in that order, he gets the string $$$s$$$. Since the answers might be large, print them modulo $$$998244353$$$.ExamplesInput6 4 <?>?> 1 ? 4 < 5 < 1 >Output3 0 0 0 1Input2 2 > 1 ? 1 <Output1 0 1NoteIn the first example, there are three possible orderings before all queries:$$$3, 1, 2, 5, 4, 6$$$;$$$4, 1, 2, 5, 3, 6$$$;$$$4, 1, 3, 5, 2, 6$$$.After the last query, there is only one possible ordering:$$$3, 5, 4, 6, 2, 1$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "4066f057", "template_md5": "35d339e4", "result": "You are given a string of $n-1$ characters, where each character is either '<', '>', or '?'.  This string represents the sequence of characters written when adding $n$ distinct numbers to a set one by one.  \n\n* '<' is written when the added number becomes the minimum element in the set.\n* '>' is written when the added number becomes the maximum element in the set.\n* '?' is written otherwise.\n\nYou will be given $m$ queries, each replacing one character in the string. After each query, you need to calculate the number of different ways to order the numbers $1, 2, ..., n$ such that the resulting string of characters matches the current state of the string.\n\nPrint the number of valid orderings modulo $998244353$ both before processing any queries and after each query."}, {"prompt_md5": "9448a214", "template_md5": "465699a0", "result": "You are given a sequence of characters representing actions. Each character indicates whether a number added to a set becomes the maximum, minimum, or neither.  You need to determine how many different orders of numbers would result in this sequence of actions. You will then be given queries to change some characters in the sequence. After each change, recalculate the number of possible orders."}]}