{"uid": "1333-D", "url": "https://codeforces.com/contest/1333/problem/D", "tags": ["brute force", " constructive algorithms", " games", " graphs", " greedy", " implementation", " sortings"], "title": "1333-D", "statement": "D. Challenges in school №41time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere are $$$n$$$ children, who study at the school №41. It is well-known that they are good mathematicians. Once at a break, they arranged a challenge for themselves. All children arranged in a row and turned heads either to the left or to the right.Children can do the following: in one second several pairs of neighboring children who arelooking at each othercansimultaneouslyturn the head in the opposite direction. For instance, the one who was looking at the right neighbor turns left and vice versa for the second child. Moreover, every secondat least onepair of neighboring children performs such action. They are going to finish when there is no pair of neighboring children who are looking at each other.You are given the number $$$n$$$, the initial arrangement of children and the number $$$k$$$. You have to find a way for the children to act if they want to finish the process in exactly $$$k$$$ seconds. More formally, for each of the $$$k$$$ moves, you need to output the numbers of the children who turn left during this move.For instance, for the configuration shown below and $$$k = 2$$$ children can do the following steps:At the beginning, two pairs make move: $$$(1, 2)$$$ and $$$(3, 4)$$$. After that, we receive the following configuration:At the second move pair $$$(2, 3)$$$ makes the move. The final configuration is reached. Good job.It is guaranteed that if the solution exists, it takes not more than $$$n^2$$$ \"headturns\".InputThe first line of input contains two integers $$$n$$$ and $$$k$$$ ($$$2 \\\\le n \\\\le 3000$$$, $$$1 \\\\le k \\\\le 3000000$$$)  — the number of children and required number of moves.The next line contains a string of length $$$n$$$ and consists only of charactersLandR, whereLmeans that the child looks to the left andRmeans that the child looks to the right.OutputIf there is no solution, print a single line with number $$$-1$$$.Otherwise, output $$$k$$$ lines. Each line has to start with a number $$$n_i$$$ ($$$1\\\\le n_i \\\\le \\\\frac{n}{2}$$$)  — the number of pairs of children, who turn at this move. After that print $$$n_i$$$distinctintegers  — the numbers of the children who will turn left during this move.After performing all \"headturns\", there can't be a pair of two neighboring children looking at each other.If there are many solutions, print any of them.ExamplesInput2 1 RLOutput1 1Input2 1 LROutput-1Input4 2 RLRLOutput2 1 3  1 2NoteThe first sample contains a pair of children who look at each other. After one move, they can finish the process.In the second sample, children can't make any move. As a result, they can't end in $$$k>0$$$ moves.The third configuration is described in the statement.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "e35dc53f", "template_md5": "35d339e4", "result": "You are given $n$ children arranged in a line. Each child can either face left (L) or right (R).  \n\nThe children can perform a move where any number of pairs of adjacent children who are facing each other simultaneously change their direction.\n\nYou need to determine if there is a sequence of moves that allows the children to stop facing each other after exactly $k$ moves. \n\nIf a solution exists, output $k$ lines. Each line should start with the number of pairs of children who change direction in that move, followed by the numbers of those children.\n\nIf no solution exists, output -1."}, {"prompt_md5": "f1368c95", "template_md5": "465699a0", "result": "You are given a line of people, each facing either left or right.  They can change their direction in pairs simultaneously.  Find a sequence of pairs of people to change directions in, so that it takes exactly a given number of steps for no two adjacent people to be facing each other. If no such sequence exists, output -1."}]}