{"uid": "690-E1", "url": "https://codeforces.com/contest/690/problem/E1", "tags": [], "title": "690-E1", "statement": "E1. Photographs (I)time limit per test15 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe Human-Cow Confederation (HC2), led by Heidi, has built a base where people and cows can hide, guarded from zombie attacks. The entrance to the base is protected by an automated gate which performs a kind of a Turing test: it shows the entering creature a photograph and asks them whether the top and bottom halves of this photograph have been swapped or not. A person (or even a cow) will have no problem answering such questions; on the other hand, a zombie would just randomly smash one of the two buttons.The creature is asked a series of such questions. If at least75%of them are answered correctly, the gate is unlocked; otherwise, a side door opens, beneath which a huge fan is spinning...Heidi is now building a robot army to fight the zombies, and she wants the robots to also be able to enter the base. You are tasked with programming them to distinguish the images.The first two images from the test set. The first picture has been rearranged, but not the second.InputThe first line of the input contains the numberqof questions (1 ≤q≤ 220). After that,qquestions follow, each of which in the format described below.The first line of every question contains two space-separated integershandw(1 ≤h,w≤ 600) – the height (number of rows) and width (number of columns) of the photograph. (Most photographs are roughly200 × 300.) After this,hlines follow, each describing a single row of the picture. The picture is monochrome (in shades of grey). Itsi-th row is described bywspace-separated integersaij(j= 1, ...,w), whereaijis the brightness of the corresponding pixel (0 ≤aij< 256, where0is black and255is white).Each picture will be either a real-life photograph, or a real-life photograph which has been broken up into two pieces and rearranged. More precisely, in the latter case, the topmostrows have been moved to the bottom of the picture. It is guaranteed thathis even.There is only a single input file to be processed, calledall.in, and it is downloadable from the online judge. You are also a given another input file, calledsample.in, which contains the first20pictures fromall.in; you are provided the correct answers forsample.ininsample.out. You are also given a directoryeasy_bmp, which contains the first 50 input photographs in the form of.bmpimage files, as well as a directoryeasy_sample_original_bmp, which contains the first20imagesbefore rearrangement. Check the notes for the download links.OutputYour program should printqlines. Thei-th line should contain your answer for thei-th question:YESif the photograph has been rearranged andNOotherwise. Your answers will be accepted if they all conform to this format and if at least75%of them are correct.Because the input is rather huge, feel free to process it locally and submit just your precomputed answers (i.e., a program which just prints your output for the input fileall.in).NoteThe link to download all necessary files is http://assets.codeforces.com/files/690/easy_contestant_package.zip", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "90dd3022", "template_md5": "35d339e4", "result": "You are given a set of images. Each image is either a normal photograph or a photograph where the top and bottom halves have been swapped. \n\nFor each image, you need to determine if it has been swapped. \n\nYou will be given the dimensions of each image and a description of each row of pixels in the image.  A pixel value of 0 represents black and 255 represents white.\n\nYour program should output \"YES\" if the image has been swapped and \"NO\" if it has not been swapped. \n\n\nYou will be graded on the accuracy of your answers. At least 75% of your answers must be correct."}, {"prompt_md5": "568dd91b", "template_md5": "465699a0", "result": "You are given a series of images. Each image is either normal or has its top and bottom halves swapped.  You need to determine which images have been swapped."}]}