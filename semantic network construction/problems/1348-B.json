{"uid": "1348-B", "url": "https://codeforces.com/contest/1348/problem/B", "tags": ["constructive algorithms", " data structures", " greedy", " sortings"], "title": "1348-B", "statement": "B. Phoenix and Beautytime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputPhoenix loves beautiful arrays. An array is beautiful if all its subarrays of length $$$k$$$ have the same sum. A subarray of an array is any sequence of consecutive elements.Phoenix currently has an array $$$a$$$ of length $$$n$$$. He wants to insert some number of integers, possibly zero, into his array such that it becomes beautiful. The inserted integers must be between $$$1$$$ and $$$n$$$ inclusive. Integers may be inserted anywhere (even before the first or after the last element), and he isnot tryingto minimize the number of inserted integers.InputThe input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\\\le t \\\\le 50$$$) — the number of test cases.The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\\\le k \\\\le n \\\\le 100$$$).The second line of each test case contains $$$n$$$ space-separated integers ($$$1 \\\\le a_i \\\\le n$$$) — the array that Phoenix currently has. This array may or may not be already beautiful.OutputFor each test case, if it is impossible to create a beautiful array, print-1. Otherwise, print two lines.The first line should contain the length of the beautiful array $$$m$$$ ($$$n \\\\le m \\\\le 10^4$$$). You don't need to minimize $$$m$$$.The second line should contain $$$m$$$ space-separated integers ($$$1 \\\\le b_i \\\\le n$$$) — a beautiful array that Phoenix can obtain after inserting some, possibly zero, integers into his array $$$a$$$. You may print integers that weren't originally in array $$$a$$$.If there are multiple solutions, print any. It's guaranteed that if we can make array $$$a$$$ beautiful, we can always make it with resulting length no more than $$$10^4$$$.ExampleInput4 4 2 1 2 2 1 4 3 1 2 2 1 3 2 1 2 3 4 4 4 3 4 2Output5 1 2 1 2 1 4 1 2 2 1 -1 7 4 3 2 1 4 3 2NoteIn the first test case, we can make array $$$a$$$ beautiful by inserting the integer $$$1$$$ at index $$$3$$$ (in between the two existing $$$2$$$s). Now, all subarrays of length $$$k=2$$$ have the same sum $$$3$$$. There exists many other possible solutions, for example:$$$2, 1, 2, 1, 2, 1$$$$$$1, 2, 1, 2, 1, 2$$$In the second test case, the array is already beautiful: all subarrays of length $$$k=3$$$ have the same sum $$$5$$$.In the third test case, it can be shown that we cannot insert numbers to make array $$$a$$$ beautiful.In the fourth test case, the array $$$b$$$ shown is beautiful and all subarrays of length $$$k=4$$$ have the same sum $$$10$$$. There exist other solutions also.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "b3e6ab0b", "template_md5": "35d339e4", "result": "You are given an array of integers of length $n$. You want to insert some integers (possibly zero) into the array to make it \"beautiful\". An array is beautiful if all its subarrays of length $k$ have the same sum. \n\nThe integers you insert must be between 1 and $n$ inclusive. You can insert them anywhere in the array, including before the first element and after the last element.\n\nFor each test case, determine if it is possible to make the array beautiful. If it is possible, output the length of the beautiful array and the elements of the beautiful array. If it is not possible, output -1."}, {"prompt_md5": "89fcac14", "template_md5": "465699a0", "result": "You are given an array of numbers.  You can add more numbers to the array.  The goal is to make the array so that all groups of consecutive numbers of a fixed size have the same sum. If this is possible, output the length of the new array and the new array. If it's not possible, output -1."}]}