{"uid": "472-G", "url": "https://codeforces.com/contest/472/problem/G", "tags": ["bitmasks", " data structures", " fft"], "title": "472-G", "statement": "G. Design Tutorial: Increase the Constraintstime limit per test7 secondsmemory limit per test256 megabytesinputstdinoutputstdoutThere is a simple way to create hard tasks: take one simple problem as the query, and try to find an algorithm that can solve it faster than bruteforce. This kind of tasks usually appears in OI contest, and usually involves data structures.Let's try to create a task, for example, we take the \"Hamming distance problem\": for two binary stringssandtwith the same length, the Hamming distance between them is the number of positions at which the corresponding symbols are different. For example, the Hamming distance between \"00111\" and \"10101\" is 2 (the different symbols are marked with bold).We use the Hamming distance problem as a query in the following way: you are given two stringsaandband several queries. Each query will be: what is the Hamming distance between two stringsap1ap1+ 1...ap1+len- 1andbp2bp2+ 1...bp2+len- 1?Note, that in this problem the strings arezero-based, that iss=s0s1...s|s| - 1.InputThe first line contains a stringa(1 ≤ |a| ≤ 200000). The second line contains a stringb(1 ≤ |b| ≤ 200000). Each character of both strings is either \"0\" or \"1\".The third line contains an integerq(1 ≤q≤ 400000)— the number of queries. Each of the followingqlines contains three integers:p1,p2andlen(0 ≤p1≤ |a| -len; 0 ≤p2≤ |b| -len), these numbers denote the parameters of the current query.OutputOutputqintegers — the answers for the queries.ExamplesInput1010101111000030 0 32 3 45 7 1Output110Input1000101010101100101010010101001101010101010010100101010010010101050 0 123 9 76 4 1512 15 1013 3 20Output543513", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "a90495c3", "template_md5": "35d339e4", "result": "You are given two binary strings,  'a' and 'b'.  \n\nYou need to process multiple queries. Each query consists of three integers: p1, p2, and len.  For each query, you need to find the Hamming distance between the substrings of 'a' and 'b' defined by:\n\n* Substring of 'a':  a[p1] a[p1+1] ... a[p1 + len - 1]\n* Substring of 'b':  b[p2] b[p2+1] ... b[p2 + len - 1]\n\nThe Hamming distance between two strings of the same length is the number of positions at which the corresponding symbols are different.\n\n**Input:**\n\n* The first line contains string 'a'.\n* The second line contains string 'b'.\n* The third line contains the number of queries, q.\n* Each of the following q lines contains three integers: p1, p2, and len.\n\n**Output:**\n\nOutput q integers, where each integer is the Hamming distance for a corresponding query."}, {"prompt_md5": "c6e07fc6", "template_md5": "465699a0", "result": "You are given two strings of 0s and 1s. You need to find the number of positions where the corresponding characters in two substrings of these strings are different. You will be given many pairs of starting positions and lengths for these substrings."}]}