{"uid": "1356-D1", "url": "https://codeforces.com/contest/1356/problem/D1", "tags": ["*special"], "title": "1356-D1", "statement": "D1. Quantum Classification - 1time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given atraining dataset, in which each entry is a features vector (an array of 2 real numbers) and a label 0 or 1 indicating the class to which this vector belongs.Your goal is to use this dataset to train a quantum classification model that will accurately classify a validation dataset - a different dataset generated using the same data distribution as the training one. The error rate of classifying the validation dataset using your model (the percentage of incorrectly classified samples) should be less than 5The quantum classification library that will use your model to classify the data is documentedhere.This tutorialhas an end-to-end example of training a model using this library as a Python notebook.You can find examples of training a model and using it for classificationhere.InputYour code will not be given any inputs. Instead, you should use theprovided dataset fileto train your model.The training dataset is represented as a JSON file and consists of two arrays, \"Features\" and \"Labels\". Each array has exactly 200 elements. Each element of the \"Features\" array is an array with 2 elements, each of them a floating-point number between -1 and 1. Each element of the \"Labels\" array is the label of the class to which the corresponding element of the \"Features\" array belongs, 0 or 1.OutputYour code should return the description of the model you'd like to use in the following format:The model is described using a tuple(ControlledRotation[], (Double[], Double)).The first element of the tuple describes circuit geometry of the model as an array of controlled rotation gates.The second element of the tuple describes numeric parameters of the model and is a tuple of an array of rotation angles used by the gates and the bias used to decide the class of the model.Your code should have the following signature:namespace Solution {open Microsoft.Quantum.MachineLearning;operation Solve () : (ControlledRotation[], (Double[], Double)) {// your code here}}Please refer to the documentation and examples for details on each parameter.NoteNote that majority of the data analysis is going to happen \"offline\" before you submit the solution. The solution has to contain only the description of the trained model, not the training code itself - if you attempt to train the model \"online\" in your submitted code during the evaluation process, it will very likely time out.Training your model offline is likely to involve:Defining the circuit structure that your model will use.Generating several parameter seed vectors - the values from which training the model will start.Selecting appropriate hyperparameters of the training process (learning rate, batch size, tolerance, maximal number of iterations etc.)Training a number of classification models (one per each seed vector and hyperparameter combination)Selecting the best trained model and submitting it.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "5fccdb8f", "template_md5": "35d339e4", "result": "You are given a training dataset with 200 data points. Each data point is a 2-dimensional vector of real numbers between -1 and 1, and it is labeled as either 0 or 1. Your task is to train a quantum classification model using this dataset.  \n\nYou will need to:\n\n1. **Design the structure of your quantum model:** This involves choosing the type of quantum gates and how they are arranged.\n2. **Choose parameters for your model:** These parameters will determine how the model learns from the training data.\n3. **Train your model:** Use the training dataset to adjust the parameters of your model so that it can accurately classify the data.\n\nOnce you have trained your model, you need to describe it in a specific format:\n\n* **Circuit geometry:** A list of controlled rotation gates used in your model.\n* **Numeric parameters:** A list of rotation angles used by the gates and a bias value used for classification.\n\nYou will not be given any input data during the evaluation. Instead, your trained model description will be used to classify a separate validation dataset. The goal is to achieve an error rate (percentage of incorrectly classified samples) of less than 5%. \n\n\nYou are provided with documentation and examples to help you understand how to use the quantum classification library."}, {"prompt_md5": "7da4fdba", "template_md5": "465699a0", "result": "You are given a dataset of data points with labels. Your task is to create a model based on this data that can accurately predict the labels of new, unseen data points. You must submit a description of your model, not the training code itself."}]}