{"uid": "1942-H", "url": "https://codeforces.com/contest/1942/problem/H", "tags": ["data structures", " dp", " flows", " trees"], "title": "1942-H", "statement": "H. Farmer John's Favorite Interntime limit per test6 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputPeaches...⠀Ruby just won an internship position at Farmer John's farm by winning a coding competition! As the newly recruited intern, Ruby is tasked with maintaining Farmer John's peach tree, a tree consisting of $$$n$$$ nodes rooted at node $$$1$$$. Each node initially contains $$$a_i = 0$$$ peaches, and there are two types of events that can happen:Growth event at some node $$$x$$$: Ruby must chooseeitherthe parent of $$$x$$$orany node in the subtree of $$$x$$$ and increase the amount of peaches it contains by one.Harvest event at some node $$$x$$$: Ruby must choose a single node that is in the subtree of $$$x$$$ and decrease the amount of peaches it contains by one. Note that this isnotthe same set of nodes as the growth event.Note that the subtree of $$$x$$$ includes the node $$$x$$$ as well.Ruby is also given an array $$$b$$$ of length $$$n$$$. The peach tree is deemed healthy if $$$a_i \\\\ge b_i$$$ for every node $$$i$$$.Ruby is asked to perform $$$q$$$ operations of two types:1 x v— Perform $$$v$$$ growth events on node $$$x$$$. Ruby doesnothave to choose the same node to increase in every growth event.2 x v— Perform $$$v$$$ harvest events on node $$$x$$$. Ruby doesnothave to choose the same node to decrease in every harvest event.For every prefix of operations, Ruby asks you to find if she can perform these operationsin some ordersuch that the resulting peach tree (at the end of these operations) is healthy. Note that Ruby can't perform a harvest event that makes any $$$a_i$$$ negative.Every prefix is independent, meaning that for a given operation, Ruby may choose different nodes to perform events on for every prefix that contains that operation.InputThe first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^4$$$)  — the number of test cases.The first line of each test case contains two integers $$$n$$$ and $$$q$$$ ($$$1 \\\\le n, q \\\\le 2 \\\\cdot 10^5$$$)  — the size of the tree and the number of operations.The second line contains $$$n - 1$$$ integers $$$p_2, p_3, \\\\ldots, p_n$$$ ($$$1 \\\\le p_i < i$$$)  — the parent of each node.The third line contains $$$n$$$ integers $$$b_1, b_2, \\\\ldots, b_n$$$ ($$$0 \\\\le b_i \\\\le 10^6$$$)  — the minimum number of peaches each node needs for the peach tree to be considered healthy.The next $$$q$$$ lines describe the operations Ruby will perform. Each line contains three integers $$$t$$$, $$$x$$$, and $$$v$$$ ($$$1 \\\\le t \\\\le 2$$$, $$$1 \\\\le x \\\\le n$$$, $$$1 \\\\le v \\\\le 10^6$$$). If $$$t = 1$$$, this denotes that Ruby must perform $$$v$$$ growth events on node $$$x$$$. If $$$t = 2$$$, this denotes that Ruby must perform $$$v$$$ harvest events on node $$$x$$$.It is guaranteed that the sum of $$$n$$$ does not exceed $$$2 \\\\cdot 10^5$$$ and the sum of $$$q$$$ does not exceed $$$2 \\\\cdot 10^5$$$OutputFor each test case, output $$$q$$$ lines. The $$$i$$$-th line should contain \"YES\" if Ruby can make the peach tree healthy after performing operations $$$1, 2, \\\\ldots, i$$$ in some order. Otherwise, it should contain \"NO\".You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.ExampleInput28 81 1 1 4 3 6 65 6 2 9 8 4 1 31 3 141 4 171 2 72 2 11 6 12 1 10000001 4 9999991 3 110 201 1 1 2 5 2 4 7 2311353 270334 74853 385085 315501 183346 234819 417314 103862 4294371 1 8375411 10 9338761 1 5659581 4 7914552 3 850542 3 4409781 4 9810401 5 685222 1 8583052 4 1843081 4 9050812 8 5196262 2 2690901 1 430162 2 5176441 5 3557921 9 3192412 10 1254472 10 5238901 10 241045OutputNO NO YES NO YES NO NO YES NO NO NO YES YES NO NO YES YES NO YES YES NO YES NO NO YES YES NO NONoteFor the prefix containing operations $$$1, 2, \\\\ldots, 5$$$ in the first test case, Ruby may perform the operations in the following order:Ruby performs operation $$$2$$$ and chooses to increase $$$a_4$$$ by $$$9$$$ and $$$a_5$$$ by $$$8$$$.Ruby performs operation $$$1$$$ and chooses to increase $$$a_1$$$ by $$$5$$$, $$$a_3$$$ by $$$2$$$, $$$a_6$$$ by $$$4$$$, and $$$a_8$$$ by $$$3$$$.Ruby performs operation $$$3$$$ and chooses to increase $$$a_2$$$ by $$$7$$$.Ruby performs operation $$$4$$$ and chooses to decrease $$$a_2$$$ by $$$1$$$.Ruby performs operation $$$5$$$ and chooses to increase $$$a_7$$$ by $$$1$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "c5a3ac9a", "template_md5": "35d339e4", "result": "You are given a tree with $n$ nodes, each initially containing 0 peaches. There is an array $b$ of length $n$, where $b_i$ represents the minimum number of peaches node $i$ needs to have for the tree to be healthy.\n\nYou can perform two types of operations:\n\n* **Growth:** Choose a node $x$ and increase the number of peaches in either its parent or any node in its subtree by 1.\n* **Harvest:** Choose a node $x$ and decrease the number of peaches in any node in its subtree by 1 (you cannot make any node have negative peaches).\n\nYou are given $q$ operations, each of which is either a growth operation or a harvest operation. For each prefix of these operations (i.e., the first $i$ operations), determine if it is possible to perform the operations in some order to make the tree healthy.\n\n**Input:**\n\n* $t$: the number of test cases\n* For each test case:\n    * $n$: the number of nodes in the tree\n    * $q$: the number of operations\n    * $p_2, p_3, ..., p_n$: the parent of each node (1-indexed)\n    * $b_1, b_2, ..., b_n$: the minimum number of peaches each node needs\n    * $q$ lines, each containing:\n        * $t$: the type of operation (1 for growth, 2 for harvest)\n        * $x$: the node\n        * $v$: the number of times to perform the operation\n\n**Output:**\n\n* For each test case, output $q$ lines, each containing \"YES\" if it is possible to make the tree healthy after performing the first $i$ operations, or \"NO\" otherwise."}, {"prompt_md5": "dad0f730", "template_md5": "465699a0", "result": "You are given a tree with nodes, each containing a number of items. You have a set of operations to perform:\n\n* **Growth:** Increase the number of items in a node or its descendants.\n* **Harvest:** Decrease the number of items in a node or its descendants.\n\nFor each prefix of operations, determine if it's possible to perform them in a way that ensures each node has at least a minimum number of items."}]}