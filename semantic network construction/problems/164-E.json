{"uid": "164-E", "url": "https://codeforces.com/contest/164/problem/E", "tags": [], "title": "164-E", "statement": "E. Polycarpus and Taskstime limit per test3 secondsmemory limit per test256 megabytesinputstdinoutputstdoutPolycarpus has many tasks. Each task is characterized by three integersli,riandti. Three integers(li,ri,ti)mean that to perform taski, one needs to choose an integersi(li≤si;si+ti- 1 ≤ri), then the task will be carried out continuously fortiunits of time, starting at timesiand up to timesi+ti- 1, inclusive. In other words, a task is performed for a continuous period of time lastingti, should be started no earlier thanli, and completed no later thanri.Polycarpus's tasks have a surprising property: for any taskj,k(withj<k)lj<lkandrj<rk.Let's suppose there is an ordered set of tasksA, containing|A|tasks. We'll assume thataj= (lj,rj,tj)(1 ≤j≤ |A|). Also, we'll assume that the tasks are ordered by increasingljwith the increase in number.Let's consider the following recursive functionf, whose argument is an ordered set of tasksA, and the result is an integer. The functionf(A)is defined by the greedy algorithm, which is described below in a pseudo-language of programming.Step 1.,ans= 0.Step 2. We consider all tasks in the order of increasing of their numbers in the setA. Lets define the current task counteri= 0.Step 3. Consider the next task:i=i+ 1. Ifi> |A|fulfilled, then go to the 8 step.Step 4. If you can get the task done starting at timesi= max(ans+ 1,li), then do the taski:si= max(ans+ 1,li),ans=si+ti- 1,. Go to the next task (step 3).Step 5. Otherwise, find such task, that first, taskaican be done at timesi= max, and secondly, the value ofis positive and takes the maximum value among allbkthat satisfy the first condition. If you can choose multiple tasks asbk, choose the one with the maximum number in setA.Step 6. If you managed to choose taskbk, then,. Go to the next task (step 3).Step 7. If you didn't manage to choose taskbk, then skip taski. Go to the next task (step 3).Step 8. Returnansas a result of executingf(A).Polycarpus got entangled in all these formulas and definitions, so he asked you to simulate the execution of the functionf, calculate the value off(A).InputThe first line of the input contains a single integern(1 ≤n≤ 105) — the number of tasks in setA.Thennlines describe the tasks. Thei-th line contains three space-separated integersli,ri,ti(1 ≤li≤ri≤ 109,1 ≤ti≤ri-li+ 1) — the description of thei-th task.It is guaranteed that for any tasksj,k(considering thatj<k) the following is true:lj<lkandrj<rk.OutputFor each taskiprint a single integer — the result of processing taskion thei-th iteration of the cycle (step 3) in functionf(A). In thei-th line print:0 — if you managed to add taskion step 4.-1 — if you didn't manage to add or replace taski(step 7).resi(1 ≤resi≤n) — if you managed to replace the task (step 6):resiequals the task number (in setA), that should be chosen asbkand replaced by taskai.ExamplesInput51 8 52 9 33 10 38 11 411 12 2Output0 0 1 0 -1Input131 8 52 9 43 10 14 11 38 12 59 13 510 14 511 15 112 16 113 17 114 18 315 19 316 20 2Output0 0 0 2 -1 -1 0 0 0 0 7 0 12", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "06276101", "template_md5": "35d339e4", "result": "You are given a set of tasks. Each task is defined by three integers:\n\n*  $l_i$: The earliest time the task can start.\n*  $r_i$: The latest time the task must finish.\n*  $t_i$: The duration of the task.\n\nTasks are ordered such that $l_j < l_k$ and $r_j < r_k$ for all $j < k$.\n\nYou need to find the optimal schedule for completing these tasks.  The schedule is determined by a recursive function `f(A)` where `A` is the set of tasks.\n\nThe function `f(A)` works as follows:\n\n1. Initialize `ans` to 0.\n2. Iterate through each task in the set `A`.\n3. For each task:\n    * If the task can be started at `ans + 1`, schedule it and update `ans` to the end time of the task.\n    * Otherwise, find the task `b_k` that can be started at `ans + 1` and has the highest index `k` in `A`. If multiple tasks can be started at `ans + 1`, choose the one with the highest index.\n    * If a suitable `b_k` is found, replace the current task with `b_k` and update `ans`.\n    * If no suitable `b_k` is found, skip the current task.\n4. Return `ans`.\n\nFor each task, output:\n\n* 0 if the task was successfully scheduled.\n* -1 if the task was skipped.\n* The index `res_i` of the task that replaced the current task."}, {"prompt_md5": "cb01aeff", "template_md5": "465699a0", "result": "You are given a list of tasks, each with a start time, end time, and duration. Tasks must be completed in order of increasing start time.  \n\nFor each task, determine the earliest possible start time that allows it to be completed within its time constraints, without overlapping with previously scheduled tasks. If a task cannot be scheduled, output -1. If a task can be scheduled, output 0. If a task can be scheduled earlier than its original start time by replacing an existing task, output the number of the task being replaced."}]}