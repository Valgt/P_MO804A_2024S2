{"uid": "46-D", "url": "https://codeforces.com/contest/46/problem/D", "tags": ["data structures", " implementation"], "title": "46-D", "statement": "D. Parking Lottime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutNowadays it is becoming increasingly difficult to park a car in cities successfully. Let's imagine a segment of a street as long asLmeters along which a parking lot is located. Drivers should park their cars strictly parallel to the pavement on the right side of the street (remember that in the country the authors of the tasks come from the driving is right side!). Every driver when parking wants to leave for themselves some extra space to move their car freely, that's why a driver is looking for a place where the distance between his car and the one behind his will be no less thanbmeters and the distance between his car and the one in front of his will be no less thanfmeters (if there's no car behind then the car can be parked at the parking lot segment edge; the same is true for the case when there're no cars parked in front of the car). Let's introduce an axis of coordinates along the pavement. Let the parking lot begin at point 0 and end at pointL. The drivers drive in the direction of the coordinates' increasing and look for the earliest place (with the smallest possible coordinate) where they can park the car. In case there's no such place, the driver drives on searching for his perfect peaceful haven. Sometimes some cars leave the street and free some space for parking. Considering that there never are two moving cars on a street at a time write a program that can use the data on the drivers, entering the street hoping to park there and the drivers leaving it, to model the process and determine a parking lot space for each car.InputThe first line contains three integersL,bиf(10 ≤L≤ 100000, 1 ≤b,f≤ 100). The second line contains an integern(1 ≤n≤ 100) that indicates the number of requests the program has got. Every request is described on a single line and is given by two numbers. The first number represents the request type. If the request type is equal to1, then in that case the second number indicates the length of a car (in meters) that enters the street looking for a place to park. And if the request type is equal to2, then the second number identifies the number of such a request (starting with1) that the car whose arrival to the parking lot was described by a request with this number, leaves the parking lot. It is guaranteed that that car was parked at the moment the request of the2type was made. The lengths of cars are integers from1to1000.OutputFor every request of the1type print number-1on the single line if the corresponding car couldn't find place to park along the street. Otherwise, print a single number equal to the distance between the back of the car in its parked position and the beginning of the parking lot zone.ExamplesInput30 1 261 51 41 52 21 51 4Output06111723Input30 1 161 51 41 52 21 51 4Output0611176Input10 1 111 12Output-1", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "53538e74", "template_md5": "35d339e4", "result": "You are given a parking lot of length $L$ meters. Cars enter the parking lot and need to park with a minimum distance of $b$ meters behind the car in front of them and $f$ meters in front of the car behind them.  \n\nThe input consists of:\n\n* Three integers: $L$, $b$, and $f$ (the length of the parking lot, the minimum distance behind, and the minimum distance in front).\n* An integer $n$ (the number of requests).\n\nEach request is described by two numbers:\n\n* If the first number is 1, it means a car of length $x$ is entering the parking lot.\n* If the first number is 2, it means the car that entered with request number $x$ is leaving the parking lot.\n\nFor each request of type 1, output:\n\n* -1 if the car cannot find a parking spot.\n* The distance from the back of the parked car to the beginning of the parking lot if a spot is found."}, {"prompt_md5": "3a5a8d99", "template_md5": "465699a0", "result": "A parking lot is represented as a line of length L. Cars enter the lot and need to park with a minimum distance b in front and behind them.  \n\nGiven a series of events (cars entering and leaving), determine the parking spot for each entering car, or indicate if no spot is available."}]}