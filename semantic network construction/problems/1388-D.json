{"uid": "1388-D", "url": "https://codeforces.com/contest/1388/problem/D", "tags": ["data structures", " dfs and similar", " graphs", " greedy", " implementation", " trees"], "title": "1388-D", "statement": "D. Captain Flint and Treasuretime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputCaptain Fint is involved in another treasure hunt, but have found only one strange problem. The problem may be connected to the treasure's location or may not. That's why captain Flint decided to leave the solving the problem to his crew and offered an absurdly high reward: one day off. The problem itself sounds like this...There are two arrays $$$a$$$ and $$$b$$$ of length $$$n$$$. Initially, an $$$ans$$$ is equal to $$$0$$$ and the following operation is defined:Choose position $$$i$$$ ($$$1 \\\\le i \\\\le n$$$);Add $$$a_i$$$ to $$$ans$$$;If $$$b_i \\\\neq -1$$$ then add $$$a_i$$$ to $$$a_{b_i}$$$.What is the maximum $$$ans$$$ you can get by performing the operation on each $$$i$$$ ($$$1 \\\\le i \\\\le n$$$)exactly once?Uncle Bogdan is eager to get the reward, so he is asking your help to find the optimal order of positions to perform the operation on them.InputThe first line contains the integer $$$n$$$ ($$$1 \\\\le n \\\\le 2 \\\\cdot 10^5$$$) — the length of arrays $$$a$$$ and $$$b$$$.The second line contains $$$n$$$ integers $$$a_1, a_2, \\\\ldots, a_n$$$ ($$$−10^6 \\\\le a_i \\\\le 10^6$$$).The third line contains $$$n$$$ integers $$$b_1, b_2, \\\\ldots, b_n$$$ ($$$1 \\\\le b_i \\\\le n$$$ or $$$b_i = -1$$$).Additional constraint: it's guaranteed that for any $$$i$$$ ($$$1 \\\\le i \\\\le n$$$) the sequence $$$b_i, b_{b_i}, b_{b_{b_i}}, \\\\ldots$$$ is not cyclic, in other words it will always end with $$$-1$$$.OutputIn the first line, print the maximum $$$ans$$$ you can get.In the second line, print the order of operations: $$$n$$$ different integers $$$p_1, p_2, \\\\ldots, p_n$$$ ($$$1 \\\\le p_i \\\\le n$$$). The $$$p_i$$$ is the position which should be chosen at the $$$i$$$-th step. If there are multiple orders, print any of them.ExamplesInput3 1 2 3 2 3 -1Output10 1 2 3Input2 -1 100 2 -1Output99 2 1Input10 -10 -1 2 2 5 -2 -3 -4 2 -6 -1 -1 2 2 -1 5 5 7 7 9Output-9 3 5 6 1 9 4 10 7 8 2", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "899d1bdc", "template_md5": "35d339e4", "result": "You are given two arrays,  $a$ and $b$, both of length $n$.  You can perform the following operation on each index $i$ from 1 to $n$ exactly once:\n\n1. Add the value at $a_i$ to a running total, called $ans$.\n2. If $b_i$ is not equal to -1, add $a_i$ to the value at $a_{b_i}$.\n\nWhat is the maximum value of $ans$ you can achieve? Also, provide one possible order of indices to perform these operations in.\n\n**Input:**\n\n* The first line contains the integer $n$ (1 ≤ $n$ ≤ 2 * 10⁵) - the length of the arrays.\n* The second line contains $n$ integers $a_1, a_2, ..., a_n$ (-10⁶ ≤ $a_i$ ≤ 10⁶).\n* The third line contains $n$ integers $b_1, b_2, ..., b_n$ (1 ≤ $b_i$ ≤ $n$ or $b_i$ = -1).\n\n**Output:**\n\n* The first line contains the maximum value of $ans$.\n* The second line contains $n$ integers $p_1, p_2, ..., p_n$ (1 ≤ $p_i$ ≤ $n$) representing the order of indices to perform the operations."}, {"prompt_md5": "1e92f997", "template_md5": "465699a0", "result": "You have two lists of numbers. You can choose one number from each list, add it to a running total, and then add the chosen number from the first list to a specific number in the second list (if that number is not -1). You can do this for each number in the first list exactly once. What is the maximum total you can achieve?  What order should you choose the numbers in to get this maximum total?"}]}