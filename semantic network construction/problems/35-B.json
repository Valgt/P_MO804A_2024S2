{"uid": "35-B", "url": "https://codeforces.com/contest/35/problem/B", "tags": ["implementation"], "title": "35-B", "statement": "B. Warehousetime limit per test2 secondsmemory limit per test64 megabytesinputinput.txtoutputoutput.txtOnce upon a time, when the world was more beautiful, the sun shone brighter, the grass was greener and the sausages tasted better Arlandia was the most powerful country. And its capital was the place where our hero DravDe worked. He couldn’t program or make up problems (in fact, few people saw a computer those days) but he was nevertheless happy. He worked in a warehouse where a magical but non-alcoholic drink Ogudar-Olok was kept. We won’t describe his work in detail and take a better look at a simplified version of the warehouse.The warehouse has one set of shelving. It hasnshelves, each of which is divided intomsections. The shelves are numbered from top to bottom starting from1and the sections of each shelf are numbered from left to right also starting from1. Each section can contain exactly one box of the drink, and try as he might, DravDe can never put a box in a section that already has one. In the course of his work DravDe frequently notices that he has to put a box in a filled section. In that case his solution is simple. DravDe ignores that section and looks at the next one to the right. If it is empty, he puts the box there. Otherwise he keeps looking for the first empty section to the right. If no empty section is found by the end of the shelf, he looks at the shelf which is under it, then the next one, etc. Also each time he looks at a new shelf he starts from the shelf’s beginning. If DravDe still can’t find an empty section for the box, he immediately drinks it all up and throws the empty bottles away not to be caught.After one great party with a lot of Ogudar-Olok drunk DravDe asked you to help him. Unlike him, you can program and therefore modeling the process of counting the boxes in the warehouse will be easy work for you.The process of counting contains two types of query messages:«+1 x y id» (wherex,yare integers,1 ≤x≤n,1 ≤y≤m, andidis a string of lower case Latin letters — from1to10characters long). That query means that the warehouse got a box identified asid, which should be put in the sectionyon the shelfx. If the section is full, use the rules described above. It is guaranteed that every moment of the process the identifiers of all the boxes in the warehouse are different. You don’t have to answer this query.«-1 id» (whereidis a string of lower case Latin letters — from1to10characters long). That query means that a box identified asidis removed from the warehouse. You have to answer this query (see output format).InputThe first input line contains integersn,mandk(1 ≤n,m≤ 30,1 ≤k≤ 2000) — the height, the width of shelving and the amount of the operations in the warehouse that you need to analyze. In the followingklines the queries are given in the order of appearance in the format described above.OutputFor each query of the «-1 id» type output two numbers in a separate line — index of the shelf and index of the section where the box with this identifier lay. If there was no such box in the warehouse when the query was made, output «-1 -1» without quotes.ExamplesInput2 2 9+1 1 1 cola+1 1 1 fanta+1 1 1 sevenup+1 1 1 whitekey-1 cola-1 fanta-1 sevenup-1 whitekey-1 colaOutput1 11 22 12 2-1 -1Input2 2 8+1 1 1 cola-1 cola+1 1 1 fanta-1 fanta+1 1 1 sevenup-1 sevenup+1 1 1 whitekey-1 whitekeyOutput1 11 11 11 1", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "40279098", "template_md5": "35d339e4", "result": "There is a warehouse with $n$ shelves and $m$ sections per shelf. Each section can hold one box.  \n\nYou are given $k$ operations. Each operation is one of two types:\n\n* **+1 x y id**: A new box with identifier `id` is added to the warehouse and must be placed in section $y$ on shelf $x$. If the section is full, the box is placed in the next available empty section to the right, moving to the next shelf if necessary.\n\n* **-1 id**:  You need to find the shelf and section where a box with identifier `id` is located. If the box is not in the warehouse, output -1 -1. \n\nOutput the shelf and section index for each **-1 id** operation."}, {"prompt_md5": "cd14f9f7", "template_md5": "465699a0", "result": "A warehouse has shelves with sections. Each section can hold one item.  You are given instructions to add items to the warehouse and remove items from the warehouse.  When adding an item, if a section is full, the item is placed in the next available empty section on the same shelf, moving to the next shelf if necessary.  When removing an item, you need to report the shelf and section where it was located."}]}