{"uid": "566-B", "url": "https://codeforces.com/contest/566/problem/B", "tags": ["constructive algorithms", " greedy"], "title": "566-B", "statement": "B. Replicating Processestime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA Large Software Company develops its own social network. Analysts have found that during the holidays, major sporting events and other significant events users begin to enter the network more frequently, resulting in great load increase on the infrastructure.As part of this task, we assume that the social network is4nprocesses running on thenservers. All servers are absolutely identical machines, each of which has a volume of RAM of1GB =1024MB(1). Each process takes 100 MB of RAM on the server. At the same time, the needs of maintaining the viability of the server takes about100more megabytes of RAM. Thus, each server may have up to9different processes of social network.Now each of thenservers is running exactly4processes. However, at the moment of peak load it is sometimes necessary to replicate the existing4nprocesses by creating8nnew processes instead of the old ones. More formally, there is a set of replication rules, thei-th (1 ≤i≤ 4n) of which has the form ofai→ (bi,ci), whereai,biandci(1 ≤ai,bi,ci≤n) are the numbers of servers. This means that instead of an old process running on serverai, there should appear two new copies of the process running on serversbiandci. The two new replicated processes can be on the same server (i.e.,bimay be equal toci) or even on the same server where the original process was (i.e.aimay be equal tobiorci). During the implementation of the ruleai→ (bi,ci)first the process from the serveraiis destroyed, then appears a process on the serverbi, then appears a process on the serverci.There is a set of4nrules, destroying all the original4nprocesses fromnservers, and creating after their application8nreplicated processes, besides, on each of thenservers will be exactly8processes. However, the rules can only be applied consecutively, and therefore the amount of RAM of the servers imposes limitations on the procedure for the application of the rules.According to this set of rules determine the order in which you want to apply all the4nrules so that at any given time the memory of each of the servers contained at most9processes (old and new together), or tell that it is impossible.InputThe first line of the input contains integern(1 ≤n≤ 30 000) — the number of servers of the social network.Next4nlines contain the rules of replicating processes, thei-th (1 ≤i≤ 4n) of these lines as formai,bi,ci(1 ≤ai,bi,ci≤n) and describes ruleai→ (bi,ci).It is guaranteed that each number of a server from1tonoccurs four times in the set of allai, and eight times among a set that unites allbiandci.OutputIf the required order of performing rules does not exist, print \"NO\" (without the quotes).Otherwise, print in the first line \"YES\" (without the quotes), and in the second line — a sequence of4nnumbers from1to4n, giving the numbers of the rules in the order they are applied. The sequence should be a permutation, that is, include each number from1to4nexactly once.If there are multiple possible variants, you are allowed to print any of them.ExamplesInput21 2 21 2 21 2 21 2 22 1 12 1 12 1 12 1 1OutputYES1 2 5 6 3 7 4 8Input31 2 31 1 11 1 11 1 12 1 32 2 22 2 22 2 23 1 23 3 33 3 33 3 3OutputYES2 3 4 6 7 8 10 11 12 1 5 9Note(1)To be extremely accurate, we should note that the amount of server memory is1GiB =1024MiB and processes require100MiB RAM where a gibibyte (GiB) is the amount of RAM of230bytes and a mebibyte (MiB) is the amount of RAM of220bytes.In the first sample test the network uses two servers, each of which initially has four launched processes. In accordance with the rules of replication, each of the processes must be destroyed and twice run on another server. One of the possible answers is given in the statement: after applying rules1and2the first server will have2old running processes, and the second server will have8(4old and4new) processes. After we apply rules5and6, both servers will have6running processes (2old and4new). After we apply rules3and7, both servers will have7running processes (1old and6new), and after we apply rules4and8, each server will have8running processes. At no time the number of processes on a single server exceeds9.In the second sample test the network uses three servers. On each server, three processes are replicated into two processes on the same server, and the fourth one is replicated in one process for each of the two remaining servers. As a result of applying rules2, 3, 4, 6, 7, 8, 10, 11, 12each server would have7processes (6old and1new), as a result of applying rules1, 5, 9each server will have8processes. At no time the number of processes on a single server exceeds9.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "1a397982", "template_md5": "35d339e4", "result": "You are given a network with $n$ servers. Each server can run up to 9 processes. Initially, each server runs 4 processes.\n\nYou have $4n$ rules, where each rule has the form $a_i \\rightarrow (b_i, c_i)$. This means that the process running on server $a_i$ will be destroyed, and two new processes will be created, one on server $b_i$ and one on server $c_i$.\n\nThe goal is to apply these rules in a specific order so that at any point in time, no server has more than 9 processes running (old or new).\n\nDetermine if such an order exists. If it does, output \"YES\" followed by the order of the rules. If it doesn't exist, output \"NO\"."}, {"prompt_md5": "abf59550", "template_md5": "465699a0", "result": "You are given a list of rules that specify how to move processes between servers. Each server can hold a maximum of 9 processes.  Determine if it's possible to apply the rules in a specific order so that at no point does any server exceed its capacity. If possible, output the order of the rules. If not, output \"NO\"."}]}