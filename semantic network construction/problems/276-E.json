{"uid": "276-E", "url": "https://codeforces.com/contest/276/problem/E", "tags": ["data structures", " graphs", " trees"], "title": "276-E", "statement": "E. Little Girl and Problem on Treestime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutA little girl loves problems on trees very much. Here's one of them.A tree is an undirected connected graph, not containing cycles. The degree of nodexin the tree is the number of nodesyof the tree, such that each of them is connected with nodexby some edge of the tree.Let's consider a tree that consists ofnnodes. We'll consider the tree's nodes indexed from 1 ton. The cosidered tree has the following property: each node except for node number 1 has the degree of at most 2.Initially, each node of the tree contains number 0. Your task is to quickly process the requests of two types:Request of form:0vxd. In reply to the request you should addxto all numbers that are written in the nodes that are located at the distance of at mostdfrom nodev. The distance between two nodes is the number of edges on the shortest path between them.Request of form:1v. In reply to the request you should print the current number that is written in nodev.InputThe first line contains integersn(2 ≤n≤ 105) andq(1 ≤q≤ 105) — the number of tree nodes and the number of requests, correspondingly.Each of the nextn-  1lines contains two integersuiandvi(1 ≤ui,vi≤n,ui≠vi), that show that there is an edge between nodesuiandvi. Each edge's description occurs in the input exactly once. It is guaranteed that the given graph is a tree that has the property that is described in the statement.Nextqlines describe the requests.The request to add has the following format:0vxd(1 ≤v≤n,1 ≤x≤ 104,1 ≤d<n).The request to print the node value has the following format:1v(1 ≤v≤n).The numbers in the lines are separated by single spaces.OutputFor each request to print the node value print an integer — the reply to the request.ExamplesInput3 61 21 30 3 1 20 2 3 10 1 5 21 11 21 3Output996Input6 111 22 55 41 61 30 3 1 30 3 4 50 2 1 40 1 5 50 4 6 21 11 21 31 41 51 6Output111711161711", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "6534def7", "template_md5": "35d339e4", "result": "You are given a tree with $n$ nodes, where each node has a value.  \n\nThere are two types of operations:\n\n* **Operation 0:** Add $x$ to all nodes within a distance of $d$ from node $v$.\n* **Operation 1:** Print the value of node $v$.\n\nYou need to process $q$ operations.\n\n**Input:**\n\n* The first line contains two integers, $n$ (the number of nodes) and $q$ (the number of operations).\n* The next $n-1$ lines describe the edges of the tree, each line containing two integers $u$ and $v$ representing an edge between nodes $u$ and $v$.\n* The next $q$ lines describe the operations. Each operation is either of the form \"0 v x d\" or \"1 v\".\n\n**Output:**\n\nFor each operation of type \"1\", print the value of the corresponding node."}, {"prompt_md5": "9d02a9ec", "template_md5": "465699a0", "result": "You are given a tree with a specific structure (each node has at most two connections except for the first node).  Each node has a value initially set to 0. You need to process two types of requests:\n\n1. **Add:** Increase the value of all nodes within a certain distance from a given node by a specific amount.\n2. **Print:** Output the current value of a given node."}]}