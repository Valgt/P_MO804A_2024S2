{"uid": "1028-D", "url": "https://codeforces.com/contest/1028/problem/D", "tags": ["combinatorics", " data structures", " greedy"], "title": "1028-D", "statement": "D. Order booktime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputLet's consider a simplified version of order book of some stock. The order book is a list of orders (offers) from people that want to buy or sell one unit of the stock, each order is described bydirection(BUYorSELL) and price.At every moment of time, everySELLoffer has higher price than everyBUYoffer.In this problem no two ever existed orders will have the same price.The lowest-priceSELLorder and the highest-priceBUYorder are called thebest offers, marked with black frames on the picture below.The presented order book says that someone wants to sell the product at price $$$12$$$ and it's the bestSELLoffer because the other two have higher prices. The bestBUYoffer has price $$$10$$$.There are two possible actions in this orderbook:Somebody adds a new order of some direction with some price.Somebody accepts the best possibleSELLorBUYoffer (makes a deal). It's impossible to accept not the bestSELLorBUYoffer (to make a deal at worse price). After someone accepts the offer, it is removed from the orderbook forever.It is allowed to add newBUYorder only with prices less than the bestSELLoffer (if you want to buy stock for higher price, then instead of adding an order you should accept the bestSELLoffer). Similarly, one couldn't add a newSELLorder with price less or equal to the bestBUYoffer. For example, you can't add a new offer \"SELL$$$20$$$\" if there is already an offer \"BUY$$$20$$$\" or \"BUY$$$25$$$\" — in this case you just accept the bestBUYoffer.You have a damaged order book log (in the beginning the are no orders in book). Every action has one of the two types:\"ADD$$$p$$$\" denotes adding a new order with price $$$p$$$ and unknown direction. The order must not contradict with orders still not removed from the order book.\"ACCEPT$$$p$$$\" denotes accepting an existing best offer with price $$$p$$$ and unknown direction.The directions of all actions are lost. Information from the log isn't always enough to determine these directions. Count the number of ways to correctly restore allADDaction directions so that all the described conditions are satisfied at any moment. Since the answer could be large, output it modulo $$$10^9 + 7$$$. If it is impossible to correctly restore directions, then output $$$0$$$.InputThe first line contains an integer $$$n$$$ ($$$1 \\\\le n \\\\le 363\\\\,304$$$) — the number of actions in the log.Each of the next $$$n$$$ lines contains a string \"ACCEPT\" or \"ADD\" and an integer $$$p$$$ ($$$1 \\\\le p \\\\le 308\\\\,983\\\\,066$$$), describing an action type and price.AllADDactions have different prices. ForACCEPTaction it is guaranteed that the order with the same price has already been added but has not been accepted yet.OutputOutput the number of ways to restore directions ofADDactions modulo $$$10^9 + 7$$$.ExamplesInput6ADD 1ACCEPT 1ADD 2ACCEPT 2ADD 3ACCEPT 3Output8Input4ADD 1ADD 2ADD 3ACCEPT 2Output2Input7ADD 1ADD 2ADD 3ADD 4ADD 5ACCEPT 3ACCEPT 5Output0NoteIn the first example each of orders may beBUYorSELL.In the second example the order with price $$$1$$$ has to beBUYorder, the order with the price $$$3$$$ has to beSELLorder.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "2025144a", "template_md5": "35d339e4", "result": "You are given a log of actions performed on a simplified stock order book. Each action is either \"ADD $p$\" or \"ACCEPT $p$\", where $p$ is a price. \n\n* **ADD $p$**:  A new order is added to the order book at price $p$. The direction of the order (buy or sell) is unknown.\n* **ACCEPT $p$**: The best available order at price $p$ is accepted (either the best buy or the best sell order).\n\nThe order book always maintains the following:\n\n* All sell orders have higher prices than all buy orders.\n* No two orders have the same price.\n\nYou don't know the direction (buy or sell) of the ADD actions.  \n\n**Your task:**\n\nDetermine the number of ways to assign directions to the ADD actions so that the order book always satisfies the above rules after each action.  \n\n**Output:**\n\nThe number of valid ways to assign directions, modulo $10^9 + 7$. If it's impossible to assign directions that satisfy the rules, output 0."}, {"prompt_md5": "9185cb84", "template_md5": "465699a0", "result": "You are given a log of actions on an order book. Each action is either adding a new order at a specific price or accepting the best available order (either buy or sell). The order book always has a highest buy price and a lowest sell price.  You need to figure out how many ways you can assign \"buy\" or \"sell\" to each new order addition so that the order book always follows the rules."}]}