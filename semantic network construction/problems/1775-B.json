{"uid": "1775-B", "url": "https://codeforces.com/contest/1775/problem/B", "tags": ["bitmasks", " constructive algorithms"], "title": "1775-B", "statement": "B. Gardener and the Arraytime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe gardener Kazimir Kazimirovich has an array of $$$n$$$ integers $$$c_1, c_2, \\\\dots, c_n$$$.He wants to check if there are two different subsequences $$$a$$$ and $$$b$$$ of the original array, for which $$$f(a) = f(b)$$$, where $$$f(x)$$$ is thebitwise ORof all of the numbers in the sequence $$$x$$$.A sequence $$$q$$$ is a subsequence of $$$p$$$ if $$$q$$$ can be obtained from $$$p$$$ by deleting several (possibly none or all) elements.Two subsequences are considered different if the sets of indexes of their elements in the original sequence are different, that is, the values of the elements are not considered when comparing the subsequences.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 10^5$$$). The description of the test cases follows.The first line of each test case contains one integer $$$n$$$ ($$$1 \\\\le n \\\\le 10^5$$$) — the size of the array $$$c$$$.The description of the array $$$c$$$ in this problem is given implicitly to speed up input.The $$$(i + 1)$$$-st of the following $$$n$$$ lines of the test case begins with an integer $$$k_i$$$ ($$$1 \\\\le k_i \\\\le 10^5$$$) — the number of set bits in the number $$$c_i$$$. Next follow $$$k_i$$$ distinct integers $$$p_{i, 1}, p_{i, 2}, \\\\dots, p_{i, k_i}$$$ ($$$1 \\\\le p_i \\\\le 2 \\\\cdot 10^5$$$) —the numbers of bits that are set to one in number $$$c_i$$$. In other words, $$$c_i = 2^{p_{i, 1}} + 2^{p_{i, 2}} + \\\\ldots + 2^{p_{i, k_i}}$$$.It is guaranteed that the total sum of $$$k_i$$$ in all tests does not exceed $$$10^5$$$.OutputFor each set of input, print \"Yes\" if there exist two different subsequences for which $$$f(a) = f(b)$$$, and \"No\" otherwise.You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.ExampleInput532 1 52 2 42 2 322 1 21 243 1 2 42 2 44 1 2 5 62 2 553 3 1 23 2 5 35 7 2 3 1 45 1 2 6 3 53 2 6 321 11 2OutputNo Yes Yes Yes NoNoteIt can be proven that in the first test case there are no two different subsequences $$$a$$$ and $$$b$$$ for which $$$f(a) = f(b)$$$.In the second test case, one of the possible answers are following subsequences: the subsequence $$$a$$$ formed by the element at position $$$1$$$, and the subsequence $$$b$$$ formed by the elements at positions $$$1$$$ and $$$2$$$.In the third test case, one of the possible answers are following subsequences: the subsequence $$$a$$$ formed by elements at positions $$$1$$$, $$$2$$$, $$$3$$$ and $$$4$$$, and the subsequence $$$b$$$ formed by elements at positions $$$2$$$, $$$3$$$ and $$$4$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "2c6d4da6", "template_md5": "35d339e4", "result": "You are given an array of integers.  Determine if there exist two different subsequences of the array, where a subsequence is a sequence of elements from the original array in any order, such that the bitwise OR of the elements in each subsequence is the same. \n\nThe bitwise OR of a sequence of numbers is calculated by taking the bitwise OR of each individual number in the sequence.\n\nFor example, the bitwise OR of the sequence [1, 2, 3] is 7 (because 1 OR 2 OR 3 = 7).\n\nInput:\n\n* The first line contains the number of test cases, *t*.\n* For each test case:\n    * The first line contains the size of the array, *n*.\n    * The following *n* lines describe the array elements. Each line starts with the number of set bits in the element, followed by the positions of those set bits.\n\nOutput:\n\n* For each test case, print \"Yes\" if there exist two different subsequences with the same bitwise OR, and \"No\" otherwise."}, {"prompt_md5": "7fc94cbc", "template_md5": "465699a0", "result": "Given a list of numbers, determine if you can find two different sublists (subsets of the original list) where the bitwise OR of the numbers in each sublist is the same."}]}