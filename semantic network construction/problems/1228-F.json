{"uid": "1228-F", "url": "https://codeforces.com/contest/1228/problem/F", "tags": ["constructive algorithms", " implementation", " trees"], "title": "1228-F", "statement": "F. One Node is Gonetime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou have an integer $$$n$$$. Let's define following tree generation asMcDic's generation:Make a complete and full binary tree of $$$2^{n} - 1$$$ vertices. Complete and full binary tree means a tree that exactly one vertex is a root, all leaves have the same depth (distance from the root), and all non-leaf nodes have exactly two child nodes.Select a non-root vertex $$$v$$$ from that binary tree.Remove $$$v$$$ from tree and make new edges between $$$v$$$'s parent and $$$v$$$'s direct children. If $$$v$$$ has no children, then no new edges will be made.You have a tree. Determine if this tree can be made by McDic's generation. If yes, then find the parent vertex of removed vertex in tree.InputThe first line contains integer $$$n$$$ ($$$2 \\\\le n \\\\le 17$$$).The $$$i$$$-th of the next $$$2^{n} - 3$$$ lines contains two integers $$$a_{i}$$$ and $$$b_{i}$$$ ($$$1 \\\\le a_{i} \\\\lt b_{i} \\\\le 2^{n} - 2$$$) — meaning there is an edge between $$$a_{i}$$$ and $$$b_{i}$$$. It is guaranteed that the given edges form a tree.OutputPrint two lines.In the first line, print a single integer — the number of answers. If given tree cannot be made by McDic's generation, then print $$$0$$$.In the second line, print all possible answers in ascending order, separated by spaces. If the given tree cannot be made by McDic's generation, then don't print anything.ExamplesInput4 1 2 1 3 2 4 2 5 3 6 3 13 3 14 4 7 4 8 5 9 5 10 6 11 6 12Output1 3Input2 1 2Output2 1 2Input3 1 2 2 3 3 4 4 5 5 6Output0NoteIn the first example, $$$3$$$ is the only possible answer.In the second example, there are $$$2$$$ possible answers.In the third example, the tree can't be generated by McDic's generation.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "c0a5b803", "template_md5": "35d339e4", "result": "You are given an integer $n$. \n\nConsider a complete and full binary tree with $2^n - 1$ vertices.  A complete binary tree is a tree where every level is completely filled except possibly the last level, and the last level has all keys as left as possible. A full binary tree is a tree where every node has either 0 or 2 children.\n\nNow, choose a non-root vertex $v$ in this tree. Remove vertex $v$ and connect its parent to its two children. If $v$ has no children, nothing changes.\n\nYou are given a tree. Determine if this tree can be formed by this process. If yes, find the parent of the removed vertex in the given tree.\n\n**Input:**\n\n* The first line contains the integer $n$ ($2 \\le n \\le 17$).\n* The next $2^n - 3$ lines each contain two integers $a_i$ and $b_i$ ($1 \\le a_i < b_i \\le 2^n - 2$), representing an edge between vertices $a_i$ and $b_i$.\n\n**Output:**\n\n* Print a single integer on the first line, representing the number of possible answers. If the given tree cannot be formed by this process, print 0.\n* Print all possible answers (the parent of the removed vertex) on the second line, separated by spaces. If the given tree cannot be formed, print nothing."}, {"prompt_md5": "d5804df5", "template_md5": "465699a0", "result": "You are given a tree with a specific number of nodes. Determine if this tree can be formed by removing a single node from a complete binary tree of a certain size and connecting its parent to its children. If so, find the parent node of the removed node."}]}