{"uid": "1419-F", "url": "https://codeforces.com/contest/1419/problem/F", "tags": ["binary search", " data structures", " dfs and similar", " dsu", " graphs", " implementation"], "title": "1419-F", "statement": "F. Rain of Firetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere are $$$n$$$ detachments on the surface, numbered from $$$1$$$ to $$$n$$$, the $$$i$$$-th detachment is placed in a point with coordinates $$$(x_i, y_i)$$$. All detachments are placed in different points.Brimstone should visit each detachment at least once. You can choose the detachment where Brimstone starts.To move from one detachment to another he should first choose one of four directions of movement (up, right, left or down) and then start moving with the constant speed of one unit interval in a second until he comes to a detachment. After he reaches an arbitrary detachment, he can repeat the same process.Each $$$t$$$ seconds an orbital strike covers the whole surface, so at that moment Brimstone should be in a point where some detachment is located. He can stay with any detachment as long as needed.Brimstone is a good commander, that's why he can createat most onedetachment and place it in any empty point with integer coordinates he wants before his trip. Keep in mind that Brimstone will need to visit this detachment, too.Help Brimstone and find such minimal $$$t$$$ that it is possible to check each detachment. If there is no such $$$t$$$ report about it.InputThe first line contains a single integer $$$n$$$ $$$(2 \\\\le n \\\\le 1000)$$$ — the number of detachments.In each of the next $$$n$$$ lines there is a pair of integers $$$x_i$$$, $$$y_i$$$ $$$(|x_i|, |y_i| \\\\le 10^9)$$$ — the coordinates of $$$i$$$-th detachment.It is guaranteed that all points are different.OutputOutput such minimal integer $$$t$$$ that it is possible to check all the detachments adding at most one new detachment.If there is no such $$$t$$$, print $$$-1$$$.ExamplesInput4 100 0 0 100 -100 0 0 -100Output100Input7 0 2 1 0 -3 0 0 -2 -1 -1 -1 -3 -2 -3Output-1Input5 0 0 0 -1 3 0 -2 0 -2 1Output2Input5 0 0 2 0 0 -1 -2 0 -2 1Output2NoteIn the first test it is possible to place a detachment in $$$(0, 0)$$$, so that it is possible to check all the detachments for $$$t = 100$$$. It can be proven that it is impossible to check all detachments for $$$t < 100$$$; thus the answer is $$$100$$$.In the second test, there is no such $$$t$$$ that it is possible to check all detachments, even with adding at most one new detachment, so the answer is $$$-1$$$.In the third test, it is possible to place a detachment in $$$(1, 0)$$$, so that Brimstone can check all the detachments for $$$t = 2$$$. It can be proven that it is the minimal such $$$t$$$.In the fourth test, there is no need to add any detachments, because the answer will not get better ($$$t = 2$$$). It can be proven that it is the minimal such $$$t$$$.", "source": "CF", "vjudge": false, "processed": [{"prompt_md5": "887ba783", "template_md5": "35d339e4", "result": "You are given $n$ points in a 2D plane, each representing a detachment.  You need to visit each point at least once. You can start at any point and move one unit in any of the four cardinal directions (up, down, left, right) at a time. Every $t$ seconds, an orbital strike covers the entire plane. You must be at a detachment when the strike occurs.\n\nYou can create one new detachment at any empty point with integer coordinates before your trip.\n\nFind the minimum value of $t$ that allows you to visit all the detachments, including the new one if you create it. If it's impossible, output -1."}, {"prompt_md5": "616cf606", "template_md5": "465699a0", "result": "You have a set of points on a 2D plane. You need to visit each point at least once, moving one unit in a direction at a time. Every certain number of seconds, a strike covers the entire plane, so you must be at a point when the strike happens. You can add one new point to the set. Find the minimum time it takes to visit all points. If it's impossible, say so."}]}