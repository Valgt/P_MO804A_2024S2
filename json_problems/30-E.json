{
    "uid": "30-E",
    "url": "https://codeforces.com/contest/30/problem/E",
    "tags": [
        "binary search",
        " constructive algorithms",
        " data structures",
        " greedy",
        " hashing",
        " strings"
    ],
    "title": "30-E",
    "statement": "E. Tricky and Clever Passwordtime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutIn his very young years the hero of our story, king Copa, decided that his private data was hidden not enough securely, what is unacceptable for the king. That's why he invented tricky and clever password (later he learned that his password is a palindrome of odd length), and coded all his data using it.Copa is afraid to forget his password, so he decided to write it on a piece of paper. He is aware that it is insecure to keep password in such way, so he decided to cipher it the following way: he cutxcharacters from the start of his password and from the end of it (xcan be0, and2xis strictly less than the password length). He obtained 3parts of the password. Let's call itprefix,middleandsuffixcorrespondingly, bothprefixandsuffixhaving equal length andmiddlealways having odd length. From these parts he made a stringA+prefix+B+middle+C+suffix, whereA,BandCare some (possibly empty) strings invented by Copa, and «+» means concatenation.Many years have passed, and just yesterday the king Copa found the piece of paper where his ciphered password was written. The password, as well as the stringsA,BandC, was completely forgotten by Copa, so he asks you to find a password of maximum possible length, which could be invented, ciphered and written by Copa.InputThe input contains single string of small Latin letters with length from1to105characters.OutputThe first line should contain integerk— amount ofnonempty parts of the passwordin your answer (). In each of the followingklines output two integersxiandli— start and length of the corresponding part of the password. Output pairs in order of increasingxi. Separate the numbers in pairs by a single space.Starting positionxishould be an integer from1to the length of the input string. Alllimust be positive, because you should output only non-empty parts. The middle part must have odd length.If there are several solutions, output any. Note that your goal is to maximize the sum ofli, but not to maximizek.ExamplesInputabacabaOutput11 7InputaxbyaOutput31 12 15 1InputxabyczbaOutput32 24 17 2",
    "source": "CF",
    "vjudge": false
}