{
    "uid": "1348-C",
    "url": "https://codeforces.com/contest/1348/problem/C",
    "tags": [
        "constructive algorithms",
        " greedy",
        " sortings",
        " strings"
    ],
    "title": "1348-C",
    "statement": "C. Phoenix and Distributiontime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputPhoenix has a string $$$s$$$ consisting of lowercase Latin letters. He wants to distribute all the letters of his string into $$$k$$$non-emptystrings $$$a_1, a_2, \\\\dots, a_k$$$ such that every letter of $$$s$$$ goes to exactly one of the strings $$$a_i$$$. The strings $$$a_i$$$do notneed to be substrings of $$$s$$$. Phoenix can distribute letters of $$$s$$$ and rearrange the letters within each string $$$a_i$$$ however he wants.For example, if $$$s = $$$babaand $$$k=2$$$, Phoenix may distribute the letters of his string in many ways, such as:baandbaaandabbabandabaaandbbBut these ways are invalid:baaandbabandbababaand empty string ($$$a_i$$$ should be non-empty)Phoenix wants to distribute the letters of his string $$$s$$$ into $$$k$$$ strings $$$a_1, a_2, \\\\dots, a_k$$$ tominimizethe lexicographically maximum string among them, i. e. minimize $$$max(a_1, a_2, \\\\dots, a_k)$$$. Help him find the optimal distribution and print the minimal possible value of $$$max(a_1, a_2, \\\\dots, a_k)$$$.String $$$x$$$ is lexicographically less than string $$$y$$$ if either $$$x$$$ is a prefix of $$$y$$$ and $$$x \\\\ne y$$$, or there exists an index $$$i$$$ ($$$1 \\\\le i \\\\le min(|x|, |y|))$$$ such that $$$x_i$$$ < $$$y_i$$$ and for every $$$j$$$ $$$(1 \\\\le j < i)$$$ $$$x_j = y_j$$$. Here $$$|x|$$$ denotes the length of the string $$$x$$$.InputThe input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\\\le t \\\\le 1000$$$) — the number of test cases. Each test case consists of two lines.The first line of each test case consists of two integers $$$n$$$ and $$$k$$$ ($$$1 \\\\le k \\\\le n \\\\le 10^5$$$) — the length of string $$$s$$$ and the number of non-empty strings, into which Phoenix wants to distribute letters of $$$s$$$, respectively.The second line of each test case contains a string $$$s$$$ of length $$$n$$$ consisting only of lowercase Latin letters.It is guaranteed that the sum of $$$n$$$ over all test cases is $$$\\\\le 10^5$$$.OutputPrint $$$t$$$ answers — one per test case. The $$$i$$$-th answer should be the minimal possible value of $$$max(a_1, a_2, \\\\dots, a_k)$$$ in the $$$i$$$-th test case.ExampleInput6 4 2 baba 5 2 baacb 5 3 baacb 5 3 aaaaa 6 4 aaxxzz 7 1 phoenixOutputab abbc b aa x ehinopxNoteIn the first test case, one optimal solution is to distributebabaintoabandab.In the second test case, one optimal solution is to distributebaacbintoabbcanda.In the third test case, one optimal solution is to distributebaacbintoac,ab, andb.In the fourth test case, one optimal solution is to distributeaaaaaintoaa,aa, anda.In the fifth test case, one optimal solution is to distributeaaxxzzintoaz,az,x, andx.In the sixth test case, one optimal solution is to distributephoenixintoehinopx.",
    "source": "CF",
    "vjudge": false
}