{
    "uid": "1096-D",
    "url": "https://codeforces.com/contest/1096/problem/D",
    "tags": [
        "dp"
    ],
    "title": "1096-D",
    "statement": "D. Easy Problemtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputVasya is preparing a contest, and now he has written a statement for an easy problem. The statement is a string of length $$$n$$$ consisting of lowercase Latin latters. Vasya thinks that the statement can be considered hard if it contains a subsequencehard; otherwise the statement is easy. For example,hard,hzazrzd,haaaaardcan be considered hard statements, whilehar,hartanddrahare easy statements.Vasya doesn't want the statement to be hard. He may remove some characters from the statement in order to make it easy. But, of course, some parts of the statement can be crucial to understanding. Initially theambiguityof the statement is $$$0$$$, and removing $$$i$$$-th character increases theambiguityby $$$a_i$$$ (the index of each character is considered as it was in the original statement, so, for example, if you delete characterrfromhard, and then characterd, the index ofdis still $$$4$$$ even though you delete it from the stringhad).Vasya wants to calculate the minimumambiguityof the statement, if he removes some characters (possibly zero) so that the statement is easy. Help him to do it!Recall that subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.InputThe first line contains one integer $$$n$$$ ($$$1 \\\\le n \\\\le 10^5$$$) — the length of the statement.The second line contains one string $$$s$$$ of length $$$n$$$, consisting of lowercase Latin letters — the statement written by Vasya.The third line contains $$$n$$$ integers $$$a_1, a_2, \\\\dots, a_n$$$ ($$$1 \\\\le a_i \\\\le 998244353$$$).OutputPrint minimum possibleambiguityof the statement after Vasya deletes some (possibly zero) characters so the resulting statement is easy.ExamplesInput6 hhardh 3 2 9 11 7 1Output5Input8 hhzarwde 3 2 6 9 4 8 7 1Output4Input6 hhaarr 1 2 3 4 5 6Output0NoteIn the first example, first two characters are removed so the result isardh.In the second example, $$$5$$$-th character is removed so the result ishhzawde.In the third example there's no need to remove anything.",
    "source": "CF",
    "vjudge": false
}