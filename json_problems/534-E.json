{
    "uid": "534-E",
    "url": "https://codeforces.com/contest/534/problem/E",
    "tags": [
        "constructive algorithms",
        " greedy",
        " hashing",
        " implementation"
    ],
    "title": "534-E",
    "statement": "E. Berland Local Positioning Systemtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputIn Berland a bus travels along the main street of the capital. The street begins from the main square and looks like a very long segment. There arenbus stops located along the street, thei-th of them is located at the distanceaifrom the central square, all distances are distinct, the stops are numbered in the order of increasing distance from the square, that is,ai<ai+ 1for allifrom 1 ton- 1. The bus starts its journey from the first stop, it passes stops2,3and so on. It reaches the stop numbern, turns around and goes in the opposite direction to stop1, passing all the intermediate stops in the reverse order. After that, it again starts to move towards stopn. During the day, the bus runs non-stop on this route.The bus is equipped with the Berland local positioning system. When the bus passes a stop, the system notes down its number.One of the key features of the system is that it can respond to the queries about the distance covered by the bus for the parts of its path between some pair of stops. A special module of the system takes the input with the information about a set of stops on a segment of the path, a stop number occurs in the set as many times as the bus drove past it. This module returns the length of the traveled segment of the path (or -1 if it is impossible to determine the length uniquely). The operation of the module is complicated by the fact thatstop numbers occur in the request not in the order they were visited but in the non-decreasing order.For example, if the number of stops is6, and the part of the bus path starts at the bus stop number5, ends at the stop number3and passes the stops as follows:, then the request about this segment of the path will have form:3, 4, 5, 5, 6. If the bus on the segment of the path from stop5to stop3has time to drive past the1-th stop (i.e., if we consider a segment that ends with the second visit to stop3on the way from5), then the request will have form:1, 2, 2, 3, 3, 4, 5, 5, 6.You will have to repeat the Berland programmers achievement and implement this function.InputThe first line contains integern(2 ≤n≤ 2·105) — the number of stops.The second line containsnintegers (1 ≤ai≤ 109) — the distance from thei-th stop to the central square. The numbers in the second line go in the increasing order.The third line contains integerm(1 ≤m≤ 4·105) — the number of stops the bus visited on some segment of the path.The fourth line containsmintegers (1 ≤bi≤n) — the sorted list of numbers of the stops visited by the bus on the segment of the path. The number of a stop occurs as many times as it was visited by a bus.It is guaranteed that the query corresponds to some segment of the path.OutputIn the single line please print the distance covered by a bus. If it is impossible to determine it unambiguously, print- 1.ExamplesInput62 3 5 7 11 1353 4 5 5 6Output10Input62 3 5 7 11 1391 2 2 3 3 4 5 5 6Output16Input310 200 30041 2 2 3Output-1Input31 2 341 2 2 3Output3NoteThe first test from the statement demonstrates the first example shown in the statement of the problem.The second test from the statement demonstrates the second example shown in the statement of the problem.In the third sample there are two possible paths that have distinct lengths, consequently, the sought length of the segment isn't defined uniquely.In the fourth sample, even though two distinct paths correspond to the query, they have the same lengths, so the sought length of the segment is defined uniquely.",
    "source": "CF",
    "vjudge": false
}