{
    "uid": "895-E",
    "url": "https://codeforces.com/contest/895/problem/E",
    "tags": [
        "data structures",
        " probabilities"
    ],
    "title": "895-E",
    "statement": "E. Eyes Closedtime limit per test2.5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputVasya and Petya were tired of studying so they decided to play a game. Before the game begins Vasya looks at arrayaconsisting ofnintegers. As soon as he remembers all elements ofathe game begins. Vasya closes his eyes and Petya doesqactions of one of two types:1)Petya says 4 integersl1,r1,l2,r2— boundaries of two non-intersecting segments. After that he swaps one random element from the[l1,r1]segment with another random element from the[l2,r2]segment.2)Petya asks Vasya the sum of the elements ofain the[l,r]segment.Vasya is a mathematician so he answers Petya the mathematical expectation of the sum of the elements in the segment.Your task is to write a program which will answer the second type questions as Vasya would do it. In other words your program should print the mathematical expectation of the sum of the elements ofain the[l,r]segment for every second type query.InputThe first line contains two integersn,q(2 ≤n≤ 105, 1 ≤q≤ 105)  — the number of elements in the array and the number of queries you need to handle.The second line containsnintegersai(1 ≤ai≤ 109)  — elements of the array.The nextqlines contain Petya's actions of type 1 or 2.If it is a type1action then the line contains5integers1,l1,r1,l2,r2(1 ≤l1 ≤r1 ≤n, 1 ≤l2 ≤r2 ≤n).If it is a type2query then the line contains3integers2,l,r(1 ≤l≤r≤n).It is guaranteed that there is at least one type2query and segments[l1,r1], [l2,r2]don't have common elements.OutputFor each type2query print one real number — the mathematical expectation of the sum of elements in the segment.Your answer will be considered correct if its absolute or relative error doesn't exceed10- 4— formally, the answer is correct ifwherexis jury's answer andyis yours.ExamplesInput4 41 1 2 21 2 2 3 32 1 21 1 2 3 42 1 2Output3.00000003.0000000Input10 51 1 1 1 1 2 2 2 2 21 1 5 6 102 1 51 1 5 6 101 1 5 6 102 6 10Output6.00000008.0400000Input10 101 2 3 4 5 6 7 8 9 101 1 5 6 101 1 5 6 102 1 51 1 3 6 92 1 31 5 7 8 101 1 1 10 102 1 52 7 102 1 10Output23.000000014.000000028.013333321.573333355.0000000",
    "source": "CF",
    "vjudge": false
}