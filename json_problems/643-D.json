{
    "uid": "643-D",
    "url": "https://codeforces.com/contest/643/problem/D",
    "tags": [],
    "title": "643-D",
    "statement": "D. Bearish Fanpagestime limit per test5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere is a social website withnfanpages, numbered1throughn. There are alsoncompanies, and thei-th company owns thei-th fanpage.Recently, the website created a feature called following. Each fanpage must choose exactly one other fanpage to follow.The website doesn’t allow a situation whereifollowsjand at the same timejfollowsi. Also, a fanpage can't follow itself.Let’s say that fanpageifollows some other fanpagej0. Also, let’s say thatiis followed bykother fanpagesj1,j2, ...,jk. Then, when people visit fanpageithey see ads fromk+ 2distinct companies:i,j0,j1, ...,jk. Exactlytipeople subscribe (like) thei-th fanpage, and each of them will click exactly one add. For each ofk+ 1companiesj0,j1, ...,jk, exactlypeople will click their ad. Remainingpeople will click an ad from companyi(the owner of the fanpage).The total income of the company is equal to the number of people who click ads from this copmany.Limak and Radewoosh ask you for help. Initially, fanpageifollows fanpagefi. Your task is to handleqqueries of three types:1 i j— fanpageifollows fanpagejfrom now. It's guaranteed thatididn't followjjust before the query. Note an extra constraint for the number of queries of this type (below, in the Input section).2 i— print the total income of thei-th company.3— print two integers: the smallest income of one company and the biggest income of one company.InputThe first line of the input contains two integersnandq(3 ≤n≤ 100 000,1 ≤q≤ 100 000) — the number of fanpages and the number of queries, respectively.The second line containsnintegerst1,t2, ...,tn(1 ≤ti≤ 1012) wheretidenotes the number of people subscribing thei-th fanpage.The third line containsnintegersf1,f2, ...,fn(1 ≤fi≤n). Initially, fanpageifollows fanpagefi.Then,qlines follow. Thei-th of them describes thei-th query. The first number in the line is an integertypei(1 ≤typei≤ 3) — the type of the query.There will be at most50 000queries of the first type. There will be at least one query of the second or the third type (so, the output won't be empty).It's guaranteed that at each moment a fanpage doesn't follow itself, and that no two fanpages follow each other.OutputFor each query of the second type print one integer in a separate line - the total income of the given company. For each query of the third type print two integers in a separate line - the minimum and the maximum total income, respectively.ExampleInput5 1210 20 30 40 502 3 4 5 22 12 22 32 42 51 4 22 12 22 32 42 53Output10362840369572728299 57NoteIn the sample test, there are5fanpages. Thei-th of them hasi·10subscribers.On drawings, numbers of subscribers are written in circles. An arrow fromAtoBmeans thatAfollowsB.The left drawing shows the initial situation. The first company gets incomefrom its own fanpage, and gets incomefrom the2-nd fanpage. So, the total income is5 + 5 = 10. After the first query (\"2 1\") you should print10.The right drawing shows the situation after a query \"1 4 2\" (after which fanpage4follows fanpage2). Then, the first company still gets income5from its own fanpage, but now it gets onlyfrom the2-nd fanpage. So, the total income is5 + 4 = 9now.",
    "source": "CF",
    "vjudge": false
}