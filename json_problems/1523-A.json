{
    "uid": "1523-A",
    "url": "https://codeforces.com/contest/1523/problem/A",
    "tags": [
        "implementation"
    ],
    "title": "1523-A",
    "statement": "A. Game of Lifetime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputWilliam really likes the cellular automaton called \"Game of Life\" so he decided to make his own version. For simplicity, William decided to define his cellular automaton on an array containing $$$n$$$ cells, with each cell either being alive or dead.Evolution of the array in William's cellular automaton occurs iteratively in the following way:If the element is dead and it hasexactly$$$1$$$ alive neighborin the current state of the array, then on the next iteration it will become alive. For an element at index $$$i$$$ the neighbors would be elements with indices $$$i - 1$$$ and $$$i + 1$$$. If there is no element at that index, it is considered to be a dead neighbor.William is a humane person so all alive elements stay alive.Check the note section for examples of the evolution.You are given some initial state of all elements and you need to help William find the state of the array after $$$m$$$ iterations of evolution.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\\\le t \\\\le 10^3$$$). Description of the test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\\\le n \\\\le 10^3, 1 \\\\le m \\\\le 10^9$$$), which are the total number of cells in the array and the number of iterations.The second line of each test case contains a string of length $$$n$$$ made up of characters \"0\" and \"1\" and defines the initial state of the array. \"1\" means a cell is alive and \"0\" means it is dead.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^4$$$.OutputIn each test case output a string of length $$$n$$$, made up of characters \"0\" and \"1\"  — the state of the array after $$$m$$$ iterations of evolution.ExampleInput4 11 3 01000000001 10 2 0110100101 5 2 10101 3 100 000Output11111001111 1110111101 10101 000NoteSequence of iterations of evolution for the first test case01000000001— initial state11100000011— first iteration of evolution11110000111— second iteration of evolution11111001111— third iteration of evolutionSequence of iterations of evolution for the second test case0110100101— initial state1110111101— first iteration of evolution1110111101— second iteration of evolution",
    "source": "CF",
    "vjudge": false
}