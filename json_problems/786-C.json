{
    "uid": "786-C",
    "url": "https://codeforces.com/contest/786/problem/C",
    "tags": [
        "data structures",
        " divide and conquer"
    ],
    "title": "786-C",
    "statement": "C. Till I Collapsetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputRick and Morty want to find MR. PBH and they can't do it alone. So they need of Mr. Meeseeks. They Have generatednMr. Meeseeks, standing in a line numbered from1ton. Each of them has his own color.i-th Mr. Meeseeks' color isai.Rick and Morty are gathering their army and they want to divide Mr. Meeseeks into some squads. They don't want their squads to be too colorful, so each squad should have Mr. Meeseeks of at mostkdifferent colors. Also each squad should be a continuous subarray of Mr. Meeseeks in the line. Meaning that for each1 ≤i≤e≤j≤n, if Mr. Meeseeks numberiand Mr. Meeseeks numberjare in the same squad then Mr. Meeseeks numbereshould be in that same squad.Also, each squad needs its own presidio, and building a presidio needs money, so they want the total number of squads to be minimized.Rick and Morty haven't finalized the exact value ofk, so in order to choose it, for eachkbetween1andn(inclusive) need to know the minimum number of presidios needed.InputThe first line of input contains a single integern(1 ≤n≤ 105) — number of Mr. Meeseeks.The second line containsnintegersa1,a2, ...,anseparated by spaces (1 ≤ai≤n) — colors of Mr. Meeseeks in order they standing in a line.OutputIn the first and only line of input printnintegers separated by spaces.i-th integer should be the minimum number of presidios needed if the value ofkisi.ExamplesInput51 3 4 3 3Output4 2 1 1 1Input81 5 7 8 1 7 6 1Output8 4 3 2 1 1 1 1NoteFor the first sample testcase, some optimal ways of dividing army into squads for eachkare:[1], [3], [4], [3, 3][1], [3, 4, 3, 3][1, 3, 4, 3, 3][1, 3, 4, 3, 3][1, 3, 4, 3, 3]For the second testcase, some optimal ways of dividing army into squads for eachkare:[1], [5], [7], [8], [1], [7], [6], [1][1, 5], [7, 8], [1, 7], [6, 1][1, 5, 7], [8], [1, 7, 6, 1][1, 5, 7, 8], [1, 7, 6, 1][1, 5, 7, 8, 1, 7, 6, 1][1, 5, 7, 8, 1, 7, 6, 1][1, 5, 7, 8, 1, 7, 6, 1][1, 5, 7, 8, 1, 7, 6, 1]",
    "source": "CF",
    "vjudge": false
}