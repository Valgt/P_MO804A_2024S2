{
    "uid": "362-C",
    "url": "https://codeforces.com/contest/362/problem/C",
    "tags": [
        "data structures",
        " dp",
        " implementation",
        " math"
    ],
    "title": "362-C",
    "statement": "C. Insertion Sorttime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutPetya is a beginner programmer. He has already mastered the basics of the C++ language and moved on to learning algorithms. The first algorithm he encountered was insertion sort. Petya has already written the code that implements this algorithm and sorts the given integer zero-indexed arrayaof sizenin the non-decreasing order.for (int i = 1; i < n; i = i + 1){int j = i;while (j > 0 && a[j] < a[j - 1]){swap(a[j], a[j - 1]); // swap elements a[j] and a[j - 1]j = j - 1;}}Petya uses this algorithm only for sorting of arrays that are permutations of numbers from0ton- 1. He has already chosen the permutation he wants to sort but he first decided to swap some two of its elements. Petya wants to choose these elements in such a way that the number of times the sorting executes functionswap, was minimum. Help Petya find out the number of ways in which he can make the swap and fulfill this requirement.It is guaranteed that it's always possible to swap two elements of the input permutation in such a way that the number ofswapfunction calls decreases.InputThe first line contains a single integern(2 ≤n≤ 5000) — the length of the permutation. The second line containsndifferent integers from0ton- 1, inclusive — the actual permutation.OutputPrint two integers: the minimum number of times theswapfunction is executed and the number of such pairs(i,j)that swapping the elements of the input permutation with indexesiandjleads to the minimum number of the executions.ExamplesInput54 0 3 1 2Output3 2Input51 2 3 4 0Output3 4NoteIn the first sample the appropriate pairs are(0, 3)and(0, 4).In the second sample the appropriate pairs are(0, 4),(1, 4),(2, 4)and(3, 4).",
    "source": "CF",
    "vjudge": false
}