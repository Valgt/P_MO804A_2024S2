{
    "uid": "89-B",
    "url": "https://codeforces.com/contest/89/problem/B",
    "tags": [
        "dp",
        " expression parsing",
        " graphs",
        " implementation"
    ],
    "title": "89-B",
    "statement": "B. Widget Librarytime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutVasya writes his own library for building graphical user interface. Vasya called his creationVTK(VasyaToolKit). One of the interesting aspects of this library is that widgets are packed in each other.A widget is some element of graphical interface. Each widget has width and height, and occupies some rectangle on the screen. Any widget in Vasya's library is of typeWidget. For simplicity we will identify the widget and its type.TypesHBoxandVBoxare derivatives of typeWidget, so they also are typesWidget. WidgetsHBoxandVBoxare special. They can store other widgets. Both those widgets can use thepack()method to pack directly in itself some other widget. Widgets of typesHBoxandVBoxcan store several other widgets, even several equal widgets — they will simply appear several times. As a result of using the methodpack()only the link to the packed widget is saved, that is when the packed widget is changed, its image in the widget, into which it is packed, will also change.We shall assume that the widgetais packed in the widgetbif there exists a chain of widgetsa=c1,c2, ...,ck=b,k≥ 2, for whichciis packed directly toci+ 1for any1 ≤i<k. In Vasya's library the situation when the widgetais packed in the widgeta(that is, in itself) is not allowed. If you try to pack the widgets into each other in this manner immediately results in an error.Also, the widgetsHBoxandVBoxhave parametersborderandspacing, which are determined by the methodsset_border()andset_spacing()respectively. By default both of these options equal0.The picture above shows how the widgets are packed intoHBoxandVBox. At thatHBoxandVBoxautomatically change their size depending on the size of packed widgets. As forHBoxandVBox, they only differ in that inHBoxthe widgets are packed horizontally and inVBox— vertically. The parameterspacingsets the distance between adjacent widgets, andborder— a frame around all packed widgets of the desired width. Packed widgets are placed exactly in the order in which thepack()method was called for them. If withinHBoxorVBoxthere are no packed widgets, their sizes are equal to0 × 0, regardless of the optionsborderandspacing.The construction of all the widgets is performed using a scripting languageVasyaScript. The description of the language can be found in the input data.For the final verification of the code Vasya asks you to write a program that calculates the sizes of all the widgets on the source code in the language ofVasyaScript.InputThe first line contains an integern— the number of instructions (1 ≤n≤ 100). Nextnlines contain instructions in the languageVasyaScript— one instruction per line. There is a list of possible instructions below.\"Widget [name]([x],[y])\" — create a new widget[name]of the typeWidgetpossessing the width of[x]units and the height of[y]units.\"HBox [name]\" — create a new widget[name]of the typeHBox.\"VBox [name]\" — create a new widget[name]of the typeVBox.\"[name1].pack([name2])\" — pack the widget[name2]in the widget[name1]. At that, the widget[name1]must be of typeHBoxorVBox.\"[name].set_border([x])\" — set for a widget[name]theborderparameter to[x]units. The widget[name]must be of typeHBoxorVBox.\"[name].set_spacing([x])\" — set for a widget[name]thespacingparameter to[x]units. The widget[name]must be of typeHBoxorVBox.All instructions are written without spaces at the beginning and at the end of the string. The words inside the instruction are separated by exactly one space. There are no spaces directly before the numbers and directly after them.The case matters, for example, \"wiDget x\" is not a correct instruction. The case of the letters is correct in the input data.All names of the widgets consist of lowercase Latin letters and has the length from1to10characters inclusive. The names of all widgets are pairwise different. All numbers in the script are integers from0to100inclusiveIt is guaranteed that the above-given script is correct, that is that all the operations with the widgets take place after the widgets are created and no widget is packed in itself. It is guaranteed that the script creates at least one widget.OutputFor each widget print on a single line its name, width and height, separated by spaces. The lines must be ordered lexicographically by a widget's name.Please, do not use the%lldspecificator to read or write 64-bit integers in C++. It is preferred to usecoutstream (also you may use%I64dspecificator)ExamplesInput12Widget me(50,40)VBox grandpaHBox fathergrandpa.pack(father)father.pack(me)grandpa.set_border(10)grandpa.set_spacing(20)Widget brother(30,60)father.pack(brother)Widget friend(20,60)Widget uncle(100,20)grandpa.pack(uncle)Outputbrother 30 60father 80 60friend 20 60grandpa 120 120me 50 40uncle 100 20Input15Widget pack(10,10)HBox dummyHBox xVBox yy.pack(dummy)y.set_border(5)y.set_spacing(55)dummy.set_border(10)dummy.set_spacing(20)x.set_border(10)x.set_spacing(10)x.pack(pack)x.pack(dummy)x.pack(pack)x.set_border(0)Outputdummy 0 0pack 10 10x 40 10y 10 10NoteIn the first sample the widgets are arranged as follows:",
    "source": "CF",
    "vjudge": false
}