{
    "uid": "331-B1",
    "url": "https://codeforces.com/contest/331/problem/B1",
    "tags": [
        "implementation"
    ],
    "title": "331-B1",
    "statement": "B1. Shave Beaver!time limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutThe Smart Beaver has recently designed and built an innovative nanotechnologic all-purpose beaver mass shaving machine, \"Beavershave 5000\". Beavershave 5000 can shave beavers by families! How does it work? Very easily!There arenbeavers, each of them has a unique id from 1 ton. Consider a permutationa1,a2, ...,anofnthese beavers. Beavershave 5000 needs one session to shave beavers with ids fromxtoy(inclusive) if and only if there are such indicesi1<i2< ... <ik, thatai1=x,ai2=x+ 1, ...,aik- 1=y- 1,aik=y. And that is really convenient. For example, it needs one session to shave a permutation of beavers1, 2, 3, ...,n.If we can't shave beavers fromxtoyin one session, then we can split these beavers into groups[x,p1],[p1+ 1,p2], ...,[pm+ 1,y](x≤p1<p2< ... <pm<y), in such a way that the machine can shave beavers in each group in one session. But then Beavershave 5000 needsm+ 1working sessions to shave beavers fromxtoy.All beavers are restless and they keep trying to swap. So if we consider the problem more formally, we can consider queries of two types:what is the minimum number of sessions that Beavershave 5000 needs to shave beavers with ids fromxtoy, inclusive?two beavers on positionsxandy(the beaversaxanday) swapped.You can assume that any beaver can be shaved any number of times.InputThe first line contains integern— the total number of beavers,2 ≤n. The second line containsnspace-separated integers — the initial beaver permutation.The third line contains integerq— the number of queries,1 ≤q≤ 105. The nextqlines contain the queries. Each queryilooks aspixiyi, wherepiis the query type (1is to shave beavers fromxitoyi, inclusive,2is to swap beavers on positionsxiandyi). All queries meet the condition:1 ≤xi<yi≤n.to get 30 points, you need to solve the problem with constraints:n≤ 100(subproblem B1);to get 100 points, you need to solve the problem with constraints:n≤ 3·105(subproblems B1+B2).Note that the number of queriesqis limited1 ≤q≤ 105in both subproblem B1 and subproblem B2.OutputFor each query withpi= 1, print the minimum number of Beavershave 5000 sessions.ExamplesInput51 3 4 2 561 1 51 3 42 2 31 1 52 1 51 1 5Output2135",
    "source": "CF",
    "vjudge": false
}