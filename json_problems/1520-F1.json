{
    "uid": "1520-F1",
    "url": "https://codeforces.com/contest/1520/problem/F1",
    "tags": [
        "binary search",
        " interactive"
    ],
    "title": "1520-F1",
    "statement": "F1. Guess the K-th Zero (Easy version)time limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an interactive problem.This is an easy version of the problem. The difference from the hard version is that in the easy version $$$t=1$$$ and the number of queries is limited to $$$20$$$.Polycarp is playing a computer game. In this game, an array consisting of zeros and ones is hidden. Polycarp wins if he guesses the position of the $$$k$$$-th zero from the left $$$t$$$ times.Polycarp can make no more than $$$20$$$ requests of the following type:?$$$l$$$ $$$r$$$ — find out the sum of all elements in positions from $$$l$$$ to $$$r$$$ ($$$1 \\\\le l \\\\le r \\\\le n$$$) inclusive.In this (easy version) of the problem, this paragraph doesn't really make sense since $$$t=1$$$ always.To make the game more interesting, each guessed zero turns into one and the game continues on the changed array. More formally, if the position of the $$$k$$$-th zero was $$$x$$$, then after Polycarp guesses this position, the $$$x$$$-th element of the array will be replaced from $$$0$$$ to $$$1$$$. Of course, this feature affects something only for $$$t>1$$$.Help Polycarp win the game.InteractionFirst, your program must read two integers $$$n$$$ and $$$t$$$ ($$$1 \\\\le n \\\\le 2 \\\\cdot 10^5$$$, $$$t=1$$$).Then $$$t$$$ lines follow, each of which contains one integer $$$k$$$ ($$$1 \\\\le k \\\\le n$$$). It is guaranteed that at the moment of the request the array contains at least $$$k$$$ zeros. In order to get the next value of $$$k$$$, you must output the answer for the current value of $$$k$$$.After that, you can make no more than $$$20$$$ requests.Use the following format to output the answer (it is not a request, it doesn't count in $$$20$$$):!$$$x$$$ — position of the $$$k$$$-th zero.Positions in the array are numbered from left to right from $$$1$$$ to $$$n$$$ inclusive.After printing $$$t$$$ answers, your program should exit immediately.In this task, the interactor isnot adaptive. This means that within the same test, the hidden array and the queriesdo not change.In case of an incorrect query,-1will be displayed. When this value is received, your program must immediately exit normally (for example, by callingexit(0)), otherwise, the testing system may issue an arbitrary verdict.If the number of requests is exceeded, the verdictwrong answerwill be displayed.Your solution may get the verdictIdleness limit exceededif you don't print anything or forget to flush the output buffer.To flush the output buffer, you need to do the following immediately after the query output and the end-of-line character:fflush(stdout)orcout.flush()in C ++;System.out.flush()in Java;flush(output)in Pascal;stdout.flush()in Python;see the documentation for other languages.HacksUse the following format for hacks:On the first line print the string $$$s$$$ ($$$1 \\\\le |s| \\\\le 2 \\\\cdot 10^5$$$), consisting of zeros and ones, and an integer $$$t$$$ ($$$t = 1$$$) — hidden array and number of requests, respectively. In the next $$$t$$$ lines output the number $$$k$$$ ($$$1 \\\\le k \\\\le |s|$$$).The hacked solution will not have direct access to the hidden array.ExampleInput6 1 2  2  1  1  0  0Output? 4 6  ? 1 1  ? 1 2  ? 2 2  ? 5 5  ! 5NoteIn the first test, the $$$[1, 0, 1, 1, 0, 1]$$$ array is hidden. In this test $$$k=2$$$.",
    "source": "CF",
    "vjudge": false
}