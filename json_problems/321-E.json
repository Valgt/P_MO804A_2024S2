{
    "uid": "321-E",
    "url": "https://codeforces.com/contest/321/problem/E",
    "tags": [
        "data structures",
        " divide and conquer",
        " dp"
    ],
    "title": "321-E",
    "statement": "E. Ciel and Gondolastime limit per test4 secondsmemory limit per test512 megabytesinputstdinoutputstdoutFox Ciel is in the Amusement Park. And now she is in a queue in front of the Ferris wheel. There arenpeople (or foxes more precisely) in the queue: we use first people to refer one at the head of the queue, andn-th people to refer the last one in the queue.There will bekgondolas, and the way we allocate gondolas looks like this:When the first gondolas come, theq1people in head of the queue go into the gondolas.Then when the second gondolas come, theq2people in head of the remain queue go into the gondolas....The remainqkpeople go into the last (k-th) gondolas.Note thatq1,q2, ...,qkmust be positive. You can get from the statement thatandqi> 0.You know, people don't want to stay with strangers in the gondolas, so your task is to find an optimal allocation way (that is find an optimal sequenceq) to make people happy. For every pair of peopleiandj, there exists a valueuijdenotes a level of unfamiliar. You can assumeuij=ujifor alli,j(1 ≤i,j≤n)anduii= 0for alli(1 ≤i≤n). Then an unfamiliar value of a gondolas is the sum of the levels of unfamiliar between any pair of people that is into the gondolas.A total unfamiliar value is the sum of unfamiliar values for all gondolas. Help Fox Ciel to find the minimal possible total unfamiliar value for some optimal allocation.InputThe first line contains two integersnandk(1 ≤n≤ 4000and1 ≤k≤min(n, 800)) — the number of people in the queue and the number of gondolas. Each of the followingnlines containsnintegers — matrixu, (0 ≤uij≤ 9,uij=ujianduii= 0).Please, use fast input methods (for example, please use BufferedReader instead of Scanner for Java).OutputPrint an integer — the minimal possible total unfamiliar value.ExamplesInput5 20 0 1 1 10 0 1 1 11 1 0 0 01 1 0 0 01 1 0 0 0Output0Input8 30 1 1 1 1 1 1 11 0 1 1 1 1 1 11 1 0 1 1 1 1 11 1 1 0 1 1 1 11 1 1 1 0 1 1 11 1 1 1 1 0 1 11 1 1 1 1 1 0 11 1 1 1 1 1 1 0Output7Input3 20 2 02 0 30 3 0Output2NoteIn the first example, we can allocate people like this: {1, 2} goes into a gondolas, {3, 4, 5} goes into another gondolas.In the second example, an optimal solution is : {1, 2, 3} | {4, 5, 6} | {7, 8}.",
    "source": "CF",
    "vjudge": false
}