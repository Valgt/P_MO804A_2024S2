{
    "uid": "75-B",
    "url": "https://codeforces.com/contest/75/problem/B",
    "tags": [
        "expression parsing",
        " implementation",
        " strings"
    ],
    "title": "75-B",
    "statement": "B. Facetook Priority Walltime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutFacetook is a well known social network website, and it will launch a new feature called Facetook Priority Wall. This feature will sort all posts from your friends according to the priority factor (it will be described).This priority factor will be affected by three types of actions:1. \"Xposted onY's wall\" (15 points),2. \"Xcommented onY's post\" (10 points),3. \"XlikesY's post\" (5 points).XandYwill be two distinct names. And each action will increase the priority factor betweenXandY(and vice versa) by the above value of points (the priority factor betweenXandYis the same as the priority factor betweenYandX).You will be givennactions with the above format (without the action number and the number of points), and you have to print all the distinct names in these actions sorted according to the priority factor with you.InputThe first line contains your name. The second line contains an integern, which is the number of actions (1 ≤n≤ 100). Thennlines follow, it is guaranteed that each one contains exactly 1 action in the format given above. There is exactly one space between each two words in a line, and there are no extra spaces. All the letters are lowercase. All names in the input will consist of at least 1 letter and at most 10 small Latin letters.OutputPrintmlines, wheremis the number of distinct names in the input (excluding yourself). Each line should contain just 1 name. The names should be sorted according to the priority factor with you in the descending order (the highest priority factor should come first). If two or more names have the same priority factor, print them in the alphabetical (lexicographical) order.Note, that you should output all the names that are present in the input data (excluding yourself), even if that person has a zero priority factor.The lexicographical comparison is performed by the standard \"<\" operator in modern programming languages. The lineais lexicographically smaller than the lineb, if eitherais the prefix ofb, or if exists such ani(1 ≤i≤min(|a|, |b|)), thatai<bi, and for anyj(1 ≤j<i)aj=bj, where|a|and|b|stand for the lengths of stringsaandbcorrespondently.ExamplesInputahmed3ahmed posted on fatma's wallfatma commented on ahmed's postmona likes ahmed's postOutputfatmamonaInputaba1likes likes posted's postOutputlikesposted",
    "source": "CF",
    "vjudge": false
}