{
    "uid": "513-D2",
    "url": "https://codeforces.com/contest/513/problem/D2",
    "tags": [
        "constructive algorithms",
        " data structures"
    ],
    "title": "513-D2",
    "statement": "D2. Constrained Treetime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutYou need to find a binary tree of sizenthat satisfies a given set ofcconstraints. Suppose that the nodes of the unknown binary tree are labeled using apre-ordertraversal starting with1. For thei-th constraint you are given two labels,aiandbiand a direction, left or right. In case of left direction,biis an element of the subtree rooted atai's left child. Similarly in the case of right directionbiis an element of the subtree rooted atai's right child.InputThe first line of input contains two integersnandc. The nextclines contain 2 integersai,bi(1 ≤ai,bi≤n) and either \"LEFT\" or \"RIGHT\" denoting whetherbis in the subtree rooted atai's left child or in the subtree rooted atai's right child.The problem consists of multiple subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.In subproblem D1 (9points), the constraints1 ≤n≤ 100,1 ≤c≤ 50will hold.In subproblem D2 (8points), the constraints1 ≤n≤ 1000000,1 ≤c≤ 100000will hold.OutputOutput will be on a single line.Any binary tree that satisfies the constraints will be accepted. The tree's nodes should be printed out asnspace separated labels representing anin-ordertraversal, using thepre-ordernumbers as labels of vertices.If there are no trees that satisfy the constraints, print \"IMPOSSIBLE\" (without quotes).ExamplesInput3 21 2 LEFT1 3 RIGHTOutput2 1 3Input3 21 2 RIGHT1 3 LEFTOutputIMPOSSIBLENoteConsider the first sample test. We need to find a tree with 3 nodes that satisfies the following two constraints. The node labeled 2 with pre-order traversal should be in the left subtree of the node labeled 1 with pre-order traversal; the node labeled 3 with pre-order traversal should be in the right subtree of the node labeled 1. There is only one tree with three nodes that satisfies these constraints and its in-order traversal is(2, 1, 3).Pre-orderis the \"root – left subtree – right subtree\" order.In-orderis the \"left subtree – root – right subtree\" order.For other information regardingin-orderandpre-order, seehttp://en.wikipedia.org/wiki/Tree_traversal.",
    "source": "CF",
    "vjudge": false
}