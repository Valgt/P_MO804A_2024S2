{
    "uid": "223-A",
    "url": "https://codeforces.com/contest/223/problem/A",
    "tags": [
        "data structures",
        " expression parsing",
        " implementation"
    ],
    "title": "223-A",
    "statement": "A. Bracket Sequencetime limit per test2 secondsmemory limit per test256 megabytesinputstdinoutputstdoutAbracket sequenceis a string, containing only characters \"(\", \")\", \"[\" and \"]\".Acorrect bracket sequenceis a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"1\" and \"+\" between the original characters of the sequence. For example, bracket sequences \"()[]\", \"([])\" are correct (the resulting expressions are: \"(1)+[1]\", \"([1+1]+1)\"), and \"](\" and \"[\" are not.The empty string is a correct bracket sequence by definition.Asubstrings[l...r](1 ≤l≤r≤ |s|)of strings=s1s2...s|s|(where|s|is the length of strings) is the stringslsl+ 1...sr.The empty string is a substring of any string by definition.You are given a bracket sequence, not necessarily correct. Find its substring which is a correct bracket sequence and contains as many opening square brackets «[» as possible.InputThe first and the only line contains the bracket sequence as a string, consisting only of characters \"(\", \")\", \"[\" and \"]\". It is guaranteed that the string is non-empty and its length doesn't exceed105characters.OutputIn the first line print a single integer — the number of brackets «[» in the required bracket sequence. In the second line print the optimal sequence. If there are more than one optimal solutions print any of them.ExamplesInput([])Output1([])Input(((Output0",
    "source": "CF",
    "vjudge": false
}