{
    "uid": "472-G",
    "url": "https://codeforces.com/contest/472/problem/G",
    "tags": [
        "bitmasks",
        " data structures",
        " fft"
    ],
    "title": "472-G",
    "statement": "G. Design Tutorial: Increase the Constraintstime limit per test7 secondsmemory limit per test256 megabytesinputstdinoutputstdoutThere is a simple way to create hard tasks: take one simple problem as the query, and try to find an algorithm that can solve it faster than bruteforce. This kind of tasks usually appears in OI contest, and usually involves data structures.Let's try to create a task, for example, we take the \"Hamming distance problem\": for two binary stringssandtwith the same length, the Hamming distance between them is the number of positions at which the corresponding symbols are different. For example, the Hamming distance between \"00111\" and \"10101\" is 2 (the different symbols are marked with bold).We use the Hamming distance problem as a query in the following way: you are given two stringsaandband several queries. Each query will be: what is the Hamming distance between two stringsap1ap1+ 1...ap1+len- 1andbp2bp2+ 1...bp2+len- 1?Note, that in this problem the strings arezero-based, that iss=s0s1...s|s| - 1.InputThe first line contains a stringa(1 ≤ |a| ≤ 200000). The second line contains a stringb(1 ≤ |b| ≤ 200000). Each character of both strings is either \"0\" or \"1\".The third line contains an integerq(1 ≤q≤ 400000)— the number of queries. Each of the followingqlines contains three integers:p1,p2andlen(0 ≤p1≤ |a| -len; 0 ≤p2≤ |b| -len), these numbers denote the parameters of the current query.OutputOutputqintegers — the answers for the queries.ExamplesInput1010101111000030 0 32 3 45 7 1Output110Input1000101010101100101010010101001101010101010010100101010010010101050 0 123 9 76 4 1512 15 1013 3 20Output543513",
    "source": "CF",
    "vjudge": false
}