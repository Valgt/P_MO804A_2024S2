{
    "uid": "165-D",
    "url": "https://codeforces.com/contest/165/problem/D",
    "tags": [
        "data structures",
        " dsu",
        " trees"
    ],
    "title": "165-D",
    "statement": "D. Beard Graphtime limit per test4 secondsmemory limit per test256 megabytesinputstdinoutputstdoutLet's define a non-oriented connected graph ofnvertices andn- 1edges as abeard, if all of its vertices except, perhaps, one, have the degree of 2 or 1 (that is, there exists no more than one vertex, whose degree is more than two). Let us remind you that the degree of a vertex is the number of edges that connect to it.Let each edge be either black or white. Initially all edges are black.You are given the description of the beard graph. Your task is to analyze requests of the following types:paint the edge numberiblack. The edge numberiis the edge that has this number in the description. It is guaranteed that by the moment of this request thei-th edge is whitepaint the edge numberiwhite. It is guaranteed that by the moment of this request thei-th edge is blackfind the length of the shortest path goingonly along the black edgesbetween verticesaandbor indicate that no such path exists between them (a path's length is the number of edges in it)The vertices are numbered with integers from1ton, and the edges are numbered with integers from1ton- 1.InputThe first line of the input contains an integern(2 ≤n≤ 105) — the number of vertices in the graph. Nextn- 1lines contain edges described as the numbers of verticesvi,ui(1 ≤vi,ui≤n,vi≠ui) connected by this edge. It is guaranteed that the given graph is connected and forms a beard graph, and has no self-loops or multiple edges.The next line contains an integerm(1 ≤m≤ 3·105) — the number of requests. Nextmlines contain requests in the following form: first a line contains an integertype, which takes values ​​from1to3, and represents the request type.Iftype= 1, then the current request is a request to paint the edge black. In this case, in addition to numbertypethe line should contain integerid(1 ≤id≤n- 1), which represents the number of the edge to paint.Iftype= 2, then the current request is a request to paint the edge white, its form is similar to the previous request.Iftype= 3, then the current request is a request to find the distance. In this case, in addition totype, the line should contain two integersa,b(1 ≤a,b≤n,acan be equal tob) — the numbers of vertices, the distance between which must be found.The numbers in all lines are separated by exactly one space. The edges are numbered in the order in which they are given in the input.OutputFor each request to \"find the distance between verticesaandb\" print the result. If there is no path going only along the black edges between verticesaandb, then print \"-1\" (without the quotes). Print the results in the order of receiving the requests, separate the numbers with spaces or line breaks.ExamplesInput31 22 373 1 23 1 33 2 32 23 1 23 1 33 2 3Output1211-1-1Input61 56 42 33 55 663 3 42 53 2 63 1 22 33 3 1Output3-132NoteIn the first sample vertices1and2are connected with edge number1, and vertices2and3are connected with edge number2. Before the repainting edge number2each vertex is reachable from each one along the black edges. Specifically, the shortest path between1and3goes along both edges.If we paint edge number2white, vertex3will end up cut off from other vertices, that is, no path exists from it to any other vertex along the black edges.",
    "source": "CF",
    "vjudge": false
}