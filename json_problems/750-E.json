{
    "uid": "750-E",
    "url": "https://codeforces.com/contest/750/problem/E",
    "tags": [
        "data structures",
        " divide and conquer",
        " dp",
        " matrices"
    ],
    "title": "750-E",
    "statement": "E. New Year and Old Subsequencetime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA stringtis calledniceif a string \"2017\" occurs intas asubsequencebut a string \"2016\" doesn't occur intas asubsequence. For example, strings \"203434107\" and \"9220617\" are nice, while strings \"20016\", \"1234\" and \"20167\" aren't nice.Theuglinessof a string is the minimum possible number of characters to remove, in order to obtain a nice string. If it's impossible to make a string nice by removing characters, its ugliness is- 1.Limak has a stringsof lengthn, with characters indexed1throughn. He asks youqqueries. In thei-th query you should compute and print the ugliness of asubstring(continuous subsequence) ofsstarting at the indexaiand ending at the indexbi(inclusive).InputThe first line of the input contains two integersnandq(4 ≤n≤ 200 000,1 ≤q≤ 200 000) — the length of the stringsand the number of queries respectively.The second line contains a stringsof lengthn. Every character is one of digits '0'–'9'.Thei-th of nextqlines contains two integersaiandbi(1 ≤ai≤bi≤n), describing a substring in thei-th query.OutputFor each query print the ugliness of the given substring.ExamplesInput8 3201667661 81 72 8Output43-1Input15 50120166620916703 41 144 151 1310 15Output-121-1-1Input4 212342 41 2Output-1-1NoteIn the first sample:In the first query,ugliness(\"20166766\") = 4because all four sixes must be removed.In the second query,ugliness(\"2016676\") = 3because all three sixes must be removed.In the third query,ugliness(\"0166766\") =  - 1because it's impossible to remove some digits to get a nice string.In the second sample:In the second query,ugliness(\"01201666209167\") = 2. It's optimal to remove the first digit '2' and the last digit '6', what gives a string \"010166620917\", which is nice.In the third query,ugliness(\"016662091670\") = 1. It's optimal to remove the last digit '6', what gives a nice string \"01666209170\".",
    "source": "CF",
    "vjudge": false
}