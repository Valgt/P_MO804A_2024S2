{
    "uid": "715-A",
    "url": "https://codeforces.com/contest/715/problem/A",
    "tags": [
        "constructive algorithms",
        " math"
    ],
    "title": "715-A",
    "statement": "A. Plus and Square Roottime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputZS the Coder is playing a game. There is a number displayed on the screen and there are two buttons, '+' (plus) and '' (square root). Initially, the number2is displayed on the screen. There aren+ 1levels in the game and ZS the Coder start at the level1.When ZS the Coder is at levelk, he can :Press the '+' button. This increases the number on the screen by exactlyk. So, if the number on the screen wasx, it becomesx+k.Press the '' button. Let the number on the screen bex. After pressing this button, the number becomes. After that, ZS the Coder levels up, so his current level becomesk+ 1. This button can only be pressed whenxis aperfect square, i.e.x=m2for some positive integerm.Additionally, after each move, if ZS the Coder is at levelk, and the number on the screen ism, thenmmust be a multiple ofk. Note that this condition is only checked after performing the press. For example, if ZS the Coder is at level4and current number is100, he presses the '' button and the number turns into10. Note that at this moment,10is not divisible by4, but this press is still valid, because after it, ZS the Coder is at level5, and10is divisible by5.ZS the Coder needs your help in beating the game — he wants to reach leveln+ 1. In other words, he needs to press the '' buttonntimes. Help him determine the number of times he should press the '+' button before pressing the '' button at each level.Please note that ZS the Coder wants to find just any sequence of presses allowing him to reach leveln+ 1, but not necessarily a sequence minimizing the number of presses.InputThe first and only line of the input contains a single integern(1 ≤n≤ 100 000), denoting that ZS the Coder wants to reach leveln+ 1.OutputPrintnnon-negative integers, one per line.i-th of them should be equal to the number of times that ZS the Coder needs to press the '+' button before pressing the '' button at leveli.Each number in the output should not exceed1018. However, the number on the screencan be greaterthan1018.It is guaranteed that at least one solution exists. If there are multiple solutions, print any of them.ExamplesInput3Output141646Input2Output99999999999999999844500000000Input4Output2174697NoteIn the first sample case:On the first level, ZS the Coder pressed the '+' button14times (and the number on screen is initially2), so the number became2 + 14·1 = 16. Then, ZS the Coder pressed the '' button, and the number became.After that, on the second level, ZS pressed the '+' button16times, so the number becomes4 + 16·2 = 36. Then, ZS pressed the '' button, levelling up and changing the number into.After that, on the third level, ZS pressed the '+' button46times, so the number becomes6 + 46·3 = 144. Then, ZS pressed the '' button, levelling up and changing the number into.Note that12is indeed divisible by4, so ZS the Coder can reach level4.Also, note that pressing the '+' button10times on the third level before levelling up does not work, because the number becomes6 + 10·3 = 36, and when the '' button is pressed, the number becomesand ZS the Coder is at Level4. However,6is not divisible by4now, so this isnot a valid solution.In the second sample case:On the first level, ZS the Coder pressed the '+' button999999999999999998times (and the number on screen is initially2), so the number became2 + 999999999999999998·1 = 1018. Then, ZS the Coder pressed the '' button, and the number became.After that, on the second level, ZS pressed the '+' button44500000000times, so the number becomes109+ 44500000000·2 = 9·1010. Then, ZS pressed the '' button, levelling up and changing the number into.Note that300000is a multiple of3, so ZS the Coder can reach level3.",
    "source": "CF",
    "vjudge": false
}