{
    "uid": "1538-E",
    "url": "https://codeforces.com/contest/1538/problem/E",
    "tags": [
        "data structures",
        " hashing",
        " implementation",
        " matrices",
        " strings"
    ],
    "title": "1538-E",
    "statement": "E. Funny Substringstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputPolycarp came up with a new programming language. There are only two types of statements in it:\"x := s\": assign the variable namedxthe values(wheresis a string). For example, the statementvar := helloassigns the variable namedvarthe valuehello. Note thatsis the value of a string, not the name of a variable. Between the variable name, the:=operator and the string contains exactly one space each.\"x = a + b\": assign the variable namedxthe concatenation of values of two variablesaandb. For example, if the program consists of three statementsa := hello,b := world,c = a + b, then the variablecwill contain the stringhelloworld. It is guaranteed that the program is correct and the variablesaandbwere previously defined. There is exactly one space between the variable names and the=and+operators.All variable names and strings only consist of lowercase letters of the English alphabet and do not exceed $$$5$$$ characters.The result of the program is the number of occurrences of stringhahain the string that was written to the variable in the last statement.Polycarp was very tired while inventing that language. He asks you to implement it. Your task is — for given program statements calculate the number of occurrences of stringhahain the last assigned variable.InputThe first line contains an integer $$$t$$$ ($$$1 \\\\le t \\\\le 10^3$$$). Then $$$t$$$ test cases follow.The first line of each test case contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 50$$$) — the number of statements in the program. All variable names and strings are guaranteed to consist only of lowercase letters of the English alphabet and do not exceed $$$5$$$ characters.This is followed by $$$n$$$ lines describing the statements in the format described above. It is guaranteed that the program is correct.OutputFor each set of input data, output the number of occurrences of thehahasubstring in the string that was written to the variable in the last statement.ExampleInput4 6 a := h b := aha c = a + b c = c + c e = c + c d = a + c 15 x := haha x = x + x x = x + x x = x + x x = x + x x = x + x x = x + x x = x + x x = x + x x = x + x x = x + x x = x + x x = x + x x = x + x x = x + x 1 haha := hah 5 haahh := aaaha ahhhh = haahh + haahh haahh = haahh + haahh ahhhh = ahhhh + haahh ahhaa = haahh + ahhhhOutput3 32767 0 0NoteIn the first test case the resulting value ofdishhahahaha.",
    "source": "CF",
    "vjudge": false
}