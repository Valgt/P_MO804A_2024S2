{
    "uid": "242-E",
    "url": "https://codeforces.com/contest/242/problem/E",
    "tags": [
        "bitmasks",
        " data structures"
    ],
    "title": "242-E",
    "statement": "E. XOR on Segmenttime limit per test4 secondsmemory limit per test256 megabytesinputstdinoutputstdoutYou've got an arraya, consisting ofnintegersa1,a2, ...,an. You are allowed to perform two operations on this array:Calculate the sum of current array elements on the segment[l,r], that is, count valueal+al+ 1+ ... +ar.Apply the xor operation with a given numberxto each array element on the segment[l,r], that is, execute. This operation changes exactlyr-l+ 1array elements.Expressionmeans applying bitwise xor operation to numbersxandy. The given operation exists in all modern programming languages, for example in languageC++andJavait is marked as \"^\", inPascal— as \"xor\".You've got a list ofmoperations of the indicated type. Your task is to perform all given operations, for each sum query you should print the result you get.InputThe first line contains integern(1 ≤n≤ 105) — the size of the array. The second line contains space-separated integersa1,a2, ...,an(0 ≤ai≤ 106) — the original array.The third line contains integerm(1 ≤m≤ 5·104) — the number of operations with the array. Thei-th of the followingmlines first contains an integerti(1 ≤ti≤ 2) — the type of thei-th query. Ifti= 1, then this is the query of the sum, ifti= 2, then this is the query to change array elements. If thei-th operation is of type1, then next follow two integersli,ri(1 ≤li≤ri≤n). If thei-th operation is of type2, then next follow three integersli,ri,xi(1 ≤li≤ri≤n, 1 ≤xi≤ 106). The numbers on the lines are separated by single spaces.OutputFor each query of type1print in a single line the sum of numbers on the given segment. Print the answers to the queries in the order in which the queries go in the input.Please, do not use the%lldspecifier to read or write 64-bit integers in С++. It is preferred to use thecin,coutstreams, or the%I64dspecifier.ExamplesInput54 10 3 13 781 2 42 1 3 31 2 41 3 32 2 5 51 1 52 1 2 101 2 3Output262203411Input64 7 4 0 7 352 2 3 81 1 52 3 5 12 4 5 61 2 3Output3828",
    "source": "CF",
    "vjudge": false
}