{
    "uid": "616-C",
    "url": "https://codeforces.com/contest/616/problem/C",
    "tags": [
        "dfs and similar"
    ],
    "title": "616-C",
    "statement": "C. The Labyrinthtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a rectangular field ofn×mcells. Each cell is either empty or impassable (contains an obstacle). Empty cells are marked with '.', impassable cells are marked with '*'. Let's call two empty cellsadjacentif they share a side.Let's call aconnected componentany non-extendible set of cells such that any two of them are connected by the path of adjacent cells. It is a typical well-known definition of a connected component.For each impassable cell(x,y)imagine that it is an empty cell (all other cells remain unchanged) and find the size (the number of cells) of the connected component which contains(x,y). You should do it for each impassable cell independently.The answer should be printed as a matrix withnrows andmcolumns. Thej-th symbol of thei-th row should be \".\" if the cell is empty at the start. Otherwise thej-th symbol of thei-th row should contain the only digit —- the answer modulo10. The matrix should be printed without any spaces.To make your output faster it is recommended to build the output as an array ofnstrings having lengthmand print it as a sequence of lines. It will be much faster than writing character-by-character.As input/output can reach huge size it is recommended to use fast input/output methods: for example, prefer to usescanf/printfinstead ofcin/coutin C++, prefer to useBufferedReader/PrintWriterinstead ofScanner/System.outinJava.InputThe first line contains two integersn,m(1 ≤n,m≤ 1000) — the number of rows and columns in the field.Each of the nextnlines containsmsymbols: \".\" for empty cells, \"*\" for impassable cells.OutputPrint the answer as a matrix as described above. See the examples to precise the format of the output.ExamplesInput3 3*.*.*.*.*Output3.3.5.3.3Input4 5**..*..***.*.*.*.*.*Output46..3..732.6.4.5.4.3NoteIn first example, if we imagine that the central cell is empty then it will be included to component of size5(cross). If any of the corner cell will be empty then it will be included to component of size3(corner).",
    "source": "CF",
    "vjudge": false
}