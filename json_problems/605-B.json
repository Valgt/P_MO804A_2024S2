{
    "uid": "605-B",
    "url": "https://codeforces.com/contest/605/problem/B",
    "tags": [
        "constructive algorithms",
        " data structures",
        " graphs"
    ],
    "title": "605-B",
    "statement": "B. Lazy Studenttime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputStudent Vladislav came to his programming exam completely unprepared as usual. He got a question about some strange algorithm on a graph — something that will definitely never be useful in real life. He asked a girl sitting next to him to lend him some cheat papers for this questions and found there the following definition:The minimum spanning treeTof graphGis such a tree that it contains all the vertices of the original graphG, and the sum of the weights of its edges is the minimum possible among all such trees.Vladislav drew a graph withnvertices andmedges containing no loops and multiple edges. He found one of its minimum spanning trees and then wrote for each edge its weight and whether it is included in the found tree or not. Unfortunately, the piece of paper where the graph was painted is gone and the teacher is getting very angry and demands to see the original graph. Help Vladislav come up with a graph so that the information about the minimum spanning tree remains correct.InputThe first line of the input contains two integersnandm() — the number of vertices and the number of edges in the graph.Each of the nextmlines describes an edge of the graph and consists of two integersajandbj(1 ≤aj≤ 109,bj= {0, 1}). The first of these numbers is the weight of the edge and the second number is equal to1if this edge was included in the minimum spanning tree found by Vladislav, or0if it was not.It is guaranteed that exactlyn- 1number{bj}are equal to one and exactlym-n+ 1of them are equal to zero.OutputIf Vladislav has made a mistake and such graph doesn't exist, print- 1.Otherwise printmlines. On thej-th line print a pair of vertices(uj,vj)(1 ≤uj,vj≤n,uj≠vj), that should be connected by thej-th edge. The edges are numbered in the same order as in the input. The graph, determined by these edges, must be connected, contain no loops or multiple edges and its edges withbj= 1must define the minimum spanning tree. In case there are multiple possible solutions, print any of them.ExamplesInput4 52 13 14 01 15 0Output2 41 43 43 13 2Input3 31 02 13 1Output-1",
    "source": "CF",
    "vjudge": false
}