{
    "uid": "1291-B",
    "url": "https://codeforces.com/contest/1291/problem/B",
    "tags": [
        "greedy",
        " implementation"
    ],
    "title": "1291-B",
    "statement": "B. Array Sharpeningtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou're given an array $$$a_1, \\\\ldots, a_n$$$ of $$$n$$$ non-negative integers.Let's call itsharpenedif and only if there exists an integer $$$1 \\\\le k \\\\le n$$$ such that $$$a_1 < a_2 < \\\\ldots < a_k$$$ and $$$a_k > a_{k+1} > \\\\ldots > a_n$$$. In particular, any strictly increasing or strictly decreasing array issharpened. For example:The arrays $$$[4]$$$, $$$[0, 1]$$$, $$$[12, 10, 8]$$$ and $$$[3, 11, 15, 9, 7, 4]$$$ are sharpened;The arrays $$$[2, 8, 2, 8, 6, 5]$$$, $$$[0, 1, 1, 0]$$$ and $$$[2, 5, 6, 9, 8, 8]$$$ arenotsharpened.You can do the following operation as many times as you want: choose anystrictly positiveelement of the array, and decrease it by one. Formally, you can choose any $$$i$$$ ($$$1 \\\\le i \\\\le n$$$) such that $$$a_i>0$$$ and assign $$$a_i := a_i - 1$$$.Tell if it's possible to make the given arraysharpenedusing some number (possibly zero) of these operations.InputThe input consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\\\le t \\\\le 15\\\\ 000$$$)  — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \\\\le n \\\\le 3 \\\\cdot 10^5$$$).The second line of each test case contains a sequence of $$$n$$$ non-negative integers $$$a_1, \\\\ldots, a_n$$$ ($$$0 \\\\le a_i \\\\le 10^9$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3 \\\\cdot 10^5$$$.OutputFor each test case, output a single line containing \"Yes\" (without quotes) if it's possible to make the given array sharpened using the described operations, or \"No\" (without quotes) otherwise.ExampleInput10 1 248618 3 12 10 8 6 100 11 15 9 7 8 4 0 1 1 0 2 0 0 2 0 1 2 1 0 2 1 1 3 0 1 0 3 1 0 1OutputYes Yes Yes No No Yes Yes Yes Yes NoNoteIn the first and the second test case of the first test, the given array is already sharpened.In the third test case of the first test, we can transform the array into $$$[3, 11, 15, 9, 7, 4]$$$ (decrease the first element $$$97$$$ times and decrease the last element $$$4$$$ times). It is sharpened because $$$3 < 11 < 15$$$ and $$$15 > 9 > 7 > 4$$$.In the fourth test case of the first test, it's impossible to make the given array sharpened.",
    "source": "CF",
    "vjudge": false
}