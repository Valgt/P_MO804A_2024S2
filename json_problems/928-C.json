{
    "uid": "928-C",
    "url": "https://codeforces.com/contest/928/problem/C",
    "tags": [
        "*special",
        " graphs",
        " implementation"
    ],
    "title": "928-C",
    "statement": "C. Dependency managementtime limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputPolycarp is currently developing a project in Vaja language and using a popular dependency management system called Vamen. From Vamen's point of view both Vaja project and libraries are treated projects for simplicity.A project in Vaja has its own uniqie non-empty name consisting of lowercase latin letters with length not exceeding10and version — positive integer from1to106. Each project (keep in mind that it is determined by both its name and version) might depend on other projects. For sure, there are no cyclic dependencies.You're given a list of project descriptions.The firstof the given projects is the one being developed by Polycarp at this moment. Help Polycarp determine all projects that his project depends on (directly or via a certain chain).It's possible that Polycarp's project depends on two different versions of some project. In this case collision resolving is applied, i.e. for each such project the system chooses the version that minimizes the distance from it to Polycarp's project. If there are several options, the newer (with the maximum version) is preferred. This version is considered actual;other versions and their dependencies are ignored.More formal, choose such a set of projects of minimum possible size that the following conditions hold:Polycarp's project is chosen;Polycarp's project depends (directly or indirectly) on all other projects in the set;no two projects share the name;for each projectxthat some other project in the set depends on we have eitherxor someywith other version and shorter chain to Polycarp's project chosen. In case of ties the newer one is chosen.Output all Polycarp's project's dependencies (Polycarp's project itself should't be printed) in lexicographical order.InputThe first line contains an only integern(1 ≤n≤ 1 000) — the number of projects in Vaja.The following lines contain the project descriptions. Each project is described by a line consisting of its name and version separated by space. The next line gives the number of direct dependencies (from0ton- 1) and the dependencies themselves (one in a line) in arbitrary order. Each dependency is specified by its name and version. The projects are also given in arbitrary order, but the first of them is always Polycarp's. Project descriptions are separated by one empty line. Refer to samples for better understanding.It's guaranteed that there are no cyclic dependencies.OutputOutput all Polycarp's project's dependencies in lexicographical order.ExamplesInput4a 32b 1c 1b 20b 11b 2c 11b 2Output2b 1c 1Input9codehorses 53webfrmk 6mashadb 1mashadb 2commons 20mashadb 30webfrmk 62mashadb 3commons 2extra 41extra 3extra 30extra 10mashadb 11extra 3mashadb 21extra 1Output4commons 2extra 1mashadb 2webfrmk 6Input3abc 12abc 3cba 2abc 30cba 20Output1cba 2NoteThe first sample is given in the pic below. Arrow fromAtoBmeans thatBdirectly depends onA. Projects that Polycarp's project «a» (version3) depends on are painted black.The second sample is again given in the pic below. Arrow fromAtoBmeans thatBdirectly depends onA. Projects that Polycarp's project «codehorses» (version5) depends on are paint it black. Note that «extra 1» is chosen instead of «extra 3» since «mashadb 1» and all of its dependencies are ignored due to «mashadb 2».",
    "source": "CF",
    "vjudge": false
}