{
    "uid": "708-D",
    "url": "https://codeforces.com/contest/708/problem/D",
    "tags": [
        "flows"
    ],
    "title": "708-D",
    "statement": "D. Incorrect Flowtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputAt the entrance examination for the magistracy of the MSU Cyber-Mechanics Department Sasha got the question about Ford-Fulkerson algorithm. He knew the topic perfectly as he worked with it many times on programming competition. As the task for the question he was given a network with partially build flow that he had to use in order to demonstrate the workflow of the algorithm. He quickly finished to write the text and took a look at the problem only to understand that the given network is incorrect!Suppose you are given a directed graphG(V,E)with two special nodessandtcalled source and sink. We denote asnthe number of nodes in the graph, i.e.n= |V|andmstands for the number of directed edges in the graph, i.e.m= |E|. For the purpose of this problem we always consider node1to be the source and nodento be the sink. In addition, for each edge of the graphewe define the capacity functionc(e)and flow functionf(e). Functionf(e)represents the correct flow if the following conditions are satisfied:For each edgethe flow is non-negative and does not exceed capacityc(e), i.e.0 ≤f(e) ≤c(e).For each node, that is not source or sink (v≠sandv≠t) the sum of flows of all edges going invis equal to the sum of the flows among all edges going out fromv. In other words, there is no flow stuck inv.It was clear that as the exam was prepared last night and there are plenty of mistakes in the tasks. Sasha asked one of the professors to fix the network or give the correct task, but the reply was that the magistrate student should be able to fix the network himself. As the professor doesn't want the task to become easier, he asks Sasha to fix the network in a such way that the total number of changes is minimum possible. Sasha is not allowed to remove edges, add new ones or reverse the direction of existing edges. The only thing he is able to do is to change capacity functionc(e)and flow functionf(e). Moreover, all the values should remain non-negative integers. There is no requirement on the flow to be maximum in any sense.Find the minimum possible total change of the functionsf(e)andc(e)that Sasha has to make in order to make the flow correct. The total change is defined as the sum of absolute differences, i.e. if new functions aref*(e)andc*(e), then the total change is.InputThe first line of the input contains two integersnandm(2 ≤n≤ 100,0 ≤m≤ 100) — the number of nodes and edges in the graph respectively. Each of the followingmlines contains the description of the edges, consisting of four integersui,vi,ciandfi(1 ≤ui,vi≤n,ui≠vi,0 ≤ci,fi≤ 1 000 000) — index of the node the edges starts from, the index of the node the edge goes to, current capacity and flow value.Node number1is the source, and node numbernis the sink. It's guaranteed that no edge goes to the source, and no edges starts in the sink.Given graph contains no self-loops but may contain multiple edges.OutputPrint one integer — the minimum total sum of changes that Sasha has to do in order to get the correct flow description.ExamplesInput2 11 2 2 1Output0Input2 11 2 1 2Output1Input3 31 2 1 12 3 2 21 3 3 3Output1Input4 22 3 1 13 2 1 1Output0NoteIn the first sample, the flow is initially correct. Note, that the flow is not maximum, but this is not required.In the second sample, the flow value of the only edge is greater than its capacity. There are two ways to fix this: either increase the capacity up to2or reduce the flow down to1.In the third sample, there is only1unit of flow coming to vertex2, but there are2units going out of it. One of the possible solutions is to reduce the value of the flow on the second edge by1.In the fourth sample, there is isolated circulation of flow, but this description is correct by definition.",
    "source": "CF",
    "vjudge": false
}